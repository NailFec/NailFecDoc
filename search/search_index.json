{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"NailFec Doc","text":"<p>NailFec \u4fe1\u606f\u5b66\u5965\u8d5b\u7b97\u6cd5\u6587\u7ae0\u8bb0\u5f55\u3002\u4e3a\u8282\u7701\u8bb0\u5f55\u65f6\u95f4\uff0c\u5927\u90e8\u5206\u6587\u7ae0\u90fd\u4ee5\u4ee3\u7801\u4e3a\u4e3b\uff0c\u6587\u5b57\u63cf\u8ff0\u8f83\u5c11\u3002\u5728\u672a\u6765\u4f1a\u9010\u6b65\u5b8c\u5584\u6587\u7ae0\u7684\u5185\u5bb9\u3002</p>"},{"location":"%E5%85%B3%E4%BA%8ENailFec/","title":"\u5173\u4e8e NailFec","text":""},{"location":"%E5%8D%8F%E8%AE%AE/","title":"\u7248\u6743\u58f0\u660e\u548c\u534f\u8bae","text":"<p>\u82e5\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u6b64\u7f51\u7ad9\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u6587\u672c\u3001\u4ee3\u7801\u3001\u56fe\u7247\uff0c\u5747\u5f52\u7248\u6743\u6240\u6709\u4eba \u00a9NailFec \u6240\u6709\uff0c\u4fb5\u6743\u5fc5\u7a76\u3002</p> <p>\u82e5\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u6b64\u7f51\u7ad9\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u6587\u672c\u3001\u4ee3\u7801\u3001\u56fe\u7247\uff0c\u5747\u5728 \u300cNailFec \u7248\u6743\u9644\u52a0\u6761\u6b3e\u300d \u53ca CC BY-SA 4.0 \u534f\u8bae\u4e4b\u6761\u6b3e\u4e0b\u63d0\u4f9b\u3002</p> <p>Info</p> <p>\u7279\u522b\u5730\uff0c\u5bf9\u4e8e\u4e2a\u4eba\u4f7f\u7528\uff0c\u4ec5\u9700\u9075\u5faa CC BY-SA 4.0 \u5373\u53ef\uff08\u5373\uff0c\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u6b64\u7f51\u7ad9\u4efb\u4f55\u5185\u5bb9\uff0c\u4f46\u9700\u8981\u7f72\u540d\u3001\u6807\u660e\u662f\u5426\u66f4\u6539\u3001\u4ee5\u76f8\u540c\u7684\u8bb8\u53ef\u534f\u8bae\u5171\u4eab\u7b49\uff09\uff0c\u300cNailFec \u7248\u6743\u9644\u52a0\u6761\u6b3e\u300d\u4e0d\u5305\u62ec\u5bf9\u4e8e\u4e2a\u4eba\u4f7f\u7528\u7684\u7ea6\u675f\u3002</p> <p>\u53c2\u8003 Markdown \u6807\u6ce8\u683c\u5f0f\uff1a<code>\u6b64\u90e8\u5206\u5185\u5bb9\u4fee\u6539\u81ea/\u6765\u81ea [NailFec Doc](url)</code>\u3002</p>"},{"location":"%E5%8D%8F%E8%AE%AE/#\u6982\u8ff0","title":"\u6982\u8ff0","text":"<p>\u4ee5\u4e0b\u534f\u8bae\u5185\u5bb9\u6982\u8ff0\u4e86\u9002\u7528\u4e8e\u672c\u7f51\u7ad9\u6240\u6709\u5185\u5bb9\u7684\u4f7f\u7528\u3001\u590d\u5236\u3001\u5206\u53d1\u548c\u4fee\u6539\u7684\u6761\u6b3e\u3002</p> <p>\u82e5\u65e0\u7279\u6b8a\u58f0\u660e\uff0c\u672c\u7f51\u7ad9\u6240\u6709\u5185\u5bb9\u53d7\u4ee5\u4e0b\u4e24\u4e2a\u8bb8\u53ef\u8bc1\u7684\u7ea6\u675f\uff1a</p> <ul> <li>Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)</li> <li>NailFec \u9644\u52a0\u6761\u6b3e</li> </ul> <p>NailFec \u9644\u52a0\u6761\u6b3e\u4f18\u5148\u4e8e CC BY-SA 4.0\uff0c\u5373\uff0c\u5728 CC BY-SA 4.0 \u4e0e NailFec \u9644\u52a0\u6761\u6b3e\u51b2\u7a81\u7684\u60c5\u51b5\u4e0b\uff0cNailFec \u9644\u52a0\u6761\u6b3e\u751f\u6548\u3002</p>"},{"location":"%E5%8D%8F%E8%AE%AE/#nailfec-\u9644\u52a0\u6761\u6b3e","title":"NailFec \u9644\u52a0\u6761\u6b3e","text":"<p>\u672c\u8282\u89c4\u5b9a\u4e86\u5bf9\u672c\u7f51\u7ad9\u6240\u6709\u5185\u5bb9\u5546\u4e1a\u548c\u975e\u4e2a\u4eba\u4f7f\u7528\u7684\u9650\u5236\u3002</p>"},{"location":"%E5%8D%8F%E8%AE%AE/#\u5546\u4e1a\u4f7f\u7528","title":"\u5546\u4e1a\u4f7f\u7528","text":"<p>\u5546\u4e1a\u4f7f\u7528\u662f\u6307\u5c06\u672c\u7f51\u7ad9\u6240\u6709\u5185\u5bb9\u7528\u4e8e\u4efb\u4f55\u5546\u4e1a\u76ee\u7684\u4ee5\u83b7\u5f97\u76c8\u5229\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ul> <li>\u51fa\u552e\u6b64\u7f51\u7ad9\u6240\u6709\u5185\u5bb9\u6216\u5176\u884d\u751f\u4f5c\u54c1</li> <li>\u63d0\u4f9b\u6b64\u7f51\u7ad9\u6240\u6709\u5185\u5bb9\u6216\u5176\u884d\u751f\u4f5c\u54c1\u7684\u5546\u4e1a\u670d\u52a1</li> <li>\u5728\u5546\u4e1a\u4ea7\u54c1\u4e2d\u4f7f\u7528\u6b64\u7f51\u7ad9\u6240\u6709\u5185\u5bb9\u6216\u5176\u884d\u751f\u4f5c\u54c1</li> </ul> <p>\u8981\u83b7\u5f97\u5546\u4e1a\u4f7f\u7528\u672c\u7f51\u7ad9\u5185\u5bb9\u7684\u8bb8\u53ef\uff0c\u60a8\u5fc5\u987b\u4ece\u8bb8\u53ef\u8bc1\u6301\u6709\u4eba\uff08NailFec\uff09\u5904\u83b7\u5f97\u5546\u4e1a\u8bb8\u53ef\u3002\u5546\u4e1a\u8bb8\u53ef\u8bc1\u7684\u6761\u6b3e\u5c06\u53e6\u884c\u534f\u5546\u3002</p>"},{"location":"%E5%8D%8F%E8%AE%AE/#\u975e\u4e2a\u4eba\u4f7f\u7528","title":"\u975e\u4e2a\u4eba\u4f7f\u7528","text":"<p>\u975e\u4e2a\u4eba\u4f7f\u7528\u662f\u6307\u7531\u516c\u53f8\u3001\u673a\u6784\u7b49\u7ec4\u7ec7\u800c\u975e\u4e2a\u4eba\u4f7f\u7528\u672c\u7f51\u7ad9\u6240\u6709\u5185\u5bb9\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ul> <li>\u5c06\u672c\u7f51\u7ad9\u6240\u6709\u5185\u5bb9\u5185\u5bb9\u90e8\u7f72\u5728\u975e\u4e2a\u4eba\u7684\u5185\u90e8\u7f51\u7edc\u4e0a</li> <li>\u5c06\u672c\u7f51\u7ad9\u6240\u6709\u5185\u5bb9\u5185\u5bb9\u5d4c\u5165\u5230\u975e\u4e2a\u4eba\u7f51\u7ad9\u4e2d</li> </ul> <p>\u7f51\u7ad9\u5185\u5bb9\u4e0d\u9002\u7528\u4e8e\u975e\u4e2a\u4eba\u4f7f\u7528\u3002\u5982\u679c\u60a8\u5e0c\u671b\u5c06\u7f51\u7ad9\u5185\u5bb9\u7528\u4e8e\u975e\u4e2a\u4eba\u76ee\u7684\uff0c\u8bf7\u8054\u7cfb\u8bb8\u53ef\u8bc1\u6301\u6709\u4eba\u3002</p>"},{"location":"%E5%8D%8F%E8%AE%AE/#cc-by-sa-40","title":"CC BY-SA 4.0","text":"<p>\u7f51\u7ad9\u5185\u5bb9\u8fd8\u53d7 Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) \u7684\u7ea6\u675f\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cCC BY-SA 4.0 \u5305\u542b\u4e00\u4e9b\u4e0e NailFec \u9644\u52a0\u6761\u6b3e\u51b2\u7a81\u7684\u6761\u6b3e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cNailFec \u9644\u52a0\u6761\u6b3e\u4f18\u5148\u3002</p> <p>\u4ee5\u4e0b\u63d0\u4f9b CC BY-SA 4.0 \u534f\u8bae\u4e4b\u6761\u6b3e\u539f\u6587\uff1a</p> <pre><code>Attribution-ShareAlike 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n    wiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More considerations\n     for the public:\n    wiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution-ShareAlike 4.0 International Public\nLicense\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution-ShareAlike 4.0 International Public License (\"Public\nLicense\"). To the extent this Public License may be interpreted as a\ncontract, You are granted the Licensed Rights in consideration of Your\nacceptance of these terms and conditions, and the Licensor grants You\nsuch rights in consideration of benefits the Licensor receives from\nmaking the Licensed Material available under these terms and\nconditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. BY-SA Compatible License means a license listed at\n     creativecommons.org/compatiblelicenses, approved by Creative\n     Commons as essentially the equivalent of this Public License.\n\n  d. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  e. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  f. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  g. License Elements means the license attributes listed in the name\n     of a Creative Commons Public License. The License Elements of this\n     Public License are Attribution and ShareAlike.\n\n  h. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  i. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  j. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  k. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  l. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  m. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part; and\n\n            b. produce, reproduce, and Share Adapted Material.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. Additional offer from the Licensor -- Adapted Material.\n               Every recipient of Adapted Material from You\n               automatically receives an offer from the Licensor to\n               exercise the Licensed Rights in the Adapted Material\n               under the conditions of the Adapter's License You apply.\n\n            c. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n  b. ShareAlike.\n\n     In addition to the conditions in Section 3(a), if You Share\n     Adapted Material You produce, the following conditions also apply.\n\n       1. The Adapter's License You apply must be a Creative Commons\n          license with the same License Elements, this version or\n          later, or a BY-SA Compatible License.\n\n       2. You must include the text of, or the URI or hyperlink to, the\n          Adapter's License You apply. You may satisfy this condition\n          in any reasonable manner based on the medium, means, and\n          context in which You Share Adapted Material.\n\n       3. You may not offer or impose any additional or different terms\n          or conditions on, or apply any Effective Technological\n          Measures to, Adapted Material that restrict exercise of the\n          rights granted under the Adapter's License You apply.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material,\n     including for purposes of Section 3(b); and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n\n=======================================================================\n\nCreative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the \u201cLicensor.\u201d The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n</code></pre>"},{"location":"note/gather/graphtheory/","title":"\u56fe\u8bba","text":""},{"location":"note/gather/graphtheory/#\u5b58\u56fe","title":"\u5b58\u56fe","text":"<p>Info</p> <p>\u96be\u5ea6\u30104\u3011\uff0c\u8f9e\u5178P60\uff0c\u6df1\u8fdbP0\uff0c\u4e00\u672c\u901aP0\uff0cOIwiki/\u56fe\u7684\u5b58\u50a8</p> <p>\u533a\u522b\uff1a\u4e66\u5199\u96be\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001\u5224\u65ad\u662f\u5426\u8fde\u8fb9\u7684\u65f6\u95f4\u590d\u6742\u5ea6</p> <p>\u7a00\u758f\u56fe\uff1a</p> <p>\u5bf9\u4e8e\u591a\u6b21\u5efa\u56fe\u3001\u6709\u79bb\u7ebf\u90e8\u5206\u3001\u30106\u3011Kruskal \u7b97\u6cd5 \u9700\u8981\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u9700\u8981\u989d\u5916\u5355\u72ec\u5b58\u653e\u8fb9</p>"},{"location":"note/gather/graphtheory/#4\u90bb\u63a5\u77e9\u9635","title":"\u30104\u3011\u90bb\u63a5\u77e9\u9635","text":"<pre><code>int g[MAXn][MAXn];\n\nvoid f(int p, int q, int v) {\n    g[p][q] = v;\n    // g[q][p] = v;\n}\n</code></pre>"},{"location":"note/gather/graphtheory/#\u90bb\u63a5\u8868","title":"\u90bb\u63a5\u8868","text":"<p>\u4f7f\u7528 \u30104\u3011vector \u5b9e\u73b0\u65b9\u4fbf\u6392\u5e8f\u5165\u70b9\uff0c\u4f7f\u7528 \u30104\u3011\u94fe\u5f0f\u524d\u5411\u661f \u5b9e\u73b0\u65b9\u4fbf \u30108\u3011\u7f51\u7edc\u6d41 \u7b97\u6cd5\u5b58\u653e\u53cc\u8fb9\u65f6\u80fd\u591f\u5feb\u901f\u6c42\u51fa\u53cd\u8fb9</p>"},{"location":"note/gather/graphtheory/#4vector","title":"\u30104\u3011vector","text":"<pre><code>typedef pair&lt;int, int&gt; pii;\nvector&lt;pii&gt; g[MAXn];\n\nvoid f(int p, int q, v) {\n    g[p].push_back(pii{q, v});\n    // g[q].push_back(pii{p, v});\n}\n</code></pre>"},{"location":"note/gather/graphtheory/#4\u94fe\u5f0f\u524d\u5411\u661f","title":"\u30104\u3011\u94fe\u5f0f\u524d\u5411\u661f","text":"<pre><code>struct node {\n    int p, v, nxt;\n} e[MAXn &lt;&lt; 1];\nint head[MAXn], cnt = 0;\n\n// a \u52a0\u5230 b \u5934\u90e8\nvoid add(int a, int b, int v) {\n    e[++cnt].p = a;\n    e[cnt].v = v;\n    e[cnt].nxt = head[b];\n    head[b] = cnt;\n}\n\nvoid visit(int a) {\n    for(int p = head[a]; p; p = e[p].nxt) {\n        int b = e[p].p;\n        int v = e[p].v;\n    }\n}\n</code></pre>"},{"location":"note/gather/graphtheory/#\u904d\u5386","title":"\u904d\u5386","text":"<p>Info</p> <p>\u96be\u5ea6\u30104~5\u3011\uff0c\u8f9e\u5178P88\uff0c\u6df1\u8fdbP0\uff0c\u4e00\u672c\u901aP0\uff0cOIwiki/dfs &amp; OIwiki/bfs</p>"},{"location":"note/gather/graphtheory/#4\u6df1\u5ea6\u4f18\u5148\u904d\u5386","title":"\u30104\u3011\u6df1\u5ea6\u4f18\u5148\u904d\u5386","text":"<pre><code>bool ved[MAXn];\nvoid dfs(int p) {\n    ved[p] = true;\n    for(int q : g[p])\n        if(!ved[q]) dfs(q);\n}\n</code></pre>"},{"location":"note/gather/graphtheory/#4\u5e7f\u5ea6\u4f18\u5148\u904d\u5386","title":"\u30104\u3011\u5e7f\u5ea6\u4f18\u5148\u904d\u5386","text":"<pre><code>bool ved[MAXn];\nqueue&lt;int&gt; que;\nque.push(1);\nwhile(!que.empty()) {\n    int p = que.front();\n    que.pop();\n    for(int q : g[p])\n        if(!ved[q]) {\n            ved[q] = true;\n            que.push(q);\n        }\n}\n</code></pre>"},{"location":"note/gather/graphtheory/#4\u6cdb\u7ea2\u7b97\u6cd5","title":"\u30104\u3011\u6cdb\u7ea2\u7b97\u6cd5","text":"<p>= \u6d2a\u6c34\u586b\u5145\u7b97\u6cd5 = \u56fe\u7684\u67d3\u8272</p>"},{"location":"note/gather/graphtheory/#\u6700\u77ed\u8def","title":"\u6700\u77ed\u8def","text":"<p>Info</p> <p>\u96be\u5ea6\u30106~7\u3011\uff0c\u8f9e\u5178P194\uff0c\u6df1\u8fdbP167\uff0c\u4e00\u672c\u901aP119\uff0cOIwiki</p> <ul> <li>P3371 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09</li> <li>P4779 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09</li> <li>P4568 [JLOI2011] \u98de\u884c\u8def\u7ebf</li> <li>P1629 \u90ae\u9012\u5458\u9001\u4fe1</li> </ul> <p>\u7ecf\u5178\u95ee\u9898\uff1a1 \u4e24\u70b9\u6700\u77ed\u8def\u30012 \u5355\u6e90\u6700\u77ed\u8def\u30013 \u5355\u6e90\u6b21\u77ed\u8def\u30014 \u591a\u6e90\u6700\u77ed\u8def</p> \u7b97\u6cd5 \u4f5c\u7528 \u9650\u5236 \u68c0\u6d4b\u8d1f\u73af \u65f6\u95f4\u590d\u6742\u5ea6 Floyd 1 \u6240\u6709 \u80fd \\(O(n^3)\\) Bellman-Ford 2 \u6240\u6709 \u80fd \\(O(mn)\\) Dijkstra 2 \u975e\u8d1f\u6743\u56fe \u4e0d\u80fd \\(O(m\\log m)\\) Johnson 1 \u6240\u6709 \u80fd \\(O(mn\\log m)\\)"},{"location":"note/gather/graphtheory/#6dijkstra-\u7b97\u6cd5","title":"\u30106\u3011Dijkstra \u7b97\u6cd5","text":"<p>\u6734\u7d20\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2 + m)\\)\uff0c\u4f7f\u7528\u5806\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(m\\log m)\\)\u3002 \u5728 \\(m\\) \u4e0e \\(n\\) \u540c\u7ea7\u65f6\uff0c\u5806\u4f18\u5316\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e\uff1b\u5728 \\(m\\) \u4e0e \\(n^2\\) \u540c\u7ea7\u65f6\uff0c\u6734\u7d20\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e\u3002</p> <ul> <li>\u4f18\u70b9\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e</li> <li>\u7f3a\u70b9\uff1a\u4ec5\u9002\u7528\u4e8e\u975e\u8d1f\u6743\u56fe</li> </ul>"},{"location":"note/gather/graphtheory/#6spfa-\u7b97\u6cd5","title":"\u30106\u3011SPFA \u7b97\u6cd5","text":"<ul> <li>\u7f3a\u70b9\uff1a\u4e00\u4e2a\u70b9\u53ef\u80fd\u591a\u6b21\u5165\u961f\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8</li> </ul>"},{"location":"note/gather/graphtheory/#6bellman-ford-\u7b97\u6cd5","title":"\u30106\u3011Bellman-Ford \u7b97\u6cd5","text":""},{"location":"note/gather/graphtheory/#6floyd-\u7b97\u6cd5","title":"\u30106\u3011Floyd \u7b97\u6cd5","text":"<p>= Floyd-Warshall \u7b97\u6cd5</p>"},{"location":"note/gather/graphtheory/#6johnson-\u7b97\u6cd5","title":"\u30106\u3011Johnson \u7b97\u6cd5","text":""},{"location":"note/gather/graphtheory/#\u6280\u5de7","title":"\u6280\u5de7","text":"<ol> <li>\u5f53\u4e00\u90e8\u5206\u8fb9\u5177\u6709\u7279\u6b8a\u9650\u5236\uff0c\u5982\u9650\u5236\u8d70\u7684\u6b21\u6570\uff0c\u53ef\u4ee5\u5c06\u56fe\u590d\u5236\u591a\u6b21\u4e3a\u5206\u5c42\u56fe</li> <li>\u5584\u4e8e\u62c6\u5206\u8282\u70b9\u3001\u5408\u5e76\u8282\u70b9\uff0c\u521b\u5efa\u865a\u62df\u8282\u70b9\u3001\u865a\u62df\u8fb9</li> <li>\u6ce8\u610f\u81ea\u73af\u3001\u8d1f\u73af\u3001\u91cd\u8fb9\u7b49\u60c5\u51b5</li> <li>\u67e5\u627e\u6240\u6709\u8282\u70b9\u5230\u67d0\u4e00\u7ed3\u70b9\u7684\u6700\u77ed\u8def\uff0c\u53ef\u4ee5\u5c06\u56fe\u53cd\u5411\u5efa\u8fb9</li> </ol>"},{"location":"note/gather/graphtheory/#\u8d1f\u73af","title":"\u8d1f\u73af","text":""},{"location":"note/gather/graphtheory/#\u5dee\u5206\u7ea6\u675f","title":"\u5dee\u5206\u7ea6\u675f","text":""},{"location":"note/gather/graphtheory/#\u6700\u5c0f\u751f\u6210\u6811","title":"\u6700\u5c0f\u751f\u6210\u6811","text":""},{"location":"note/gather/graphtheory/#prim-\u7b97\u6cd5","title":"Prim \u7b97\u6cd5","text":""},{"location":"note/gather/graphtheory/#kruskal-\u7b97\u6cd5","title":"Kruskal \u7b97\u6cd5","text":""},{"location":"note/gather/graphtheory/#\u6b21\u5c0f\u751f\u6210\u6811","title":"\u6b21\u5c0f\u751f\u6210\u6811","text":""},{"location":"note/gather/graphtheory/#\u6700\u5c0f\u6811\u5f62\u56fe","title":"\u6700\u5c0f\u6811\u5f62\u56fe","text":""},{"location":"note/gather/graphtheory/#\u62d3\u8865\u6392\u5e8f","title":"\u62d3\u8865\u6392\u5e8f","text":""},{"location":"note/gather/graphtheory/#\u6b27\u62c9\u56fe-\u6b27\u62c9\u56de\u8def","title":"\u6b27\u62c9\u56fe \u6b27\u62c9\u56de\u8def","text":""},{"location":"note/gather/graphtheory/#\u4e8c\u5206\u56fe","title":"\u4e8c\u5206\u56fe","text":"<p>= \u5076\u56fe</p>"},{"location":"note/gather/graphtheory/#\u5f3a\u8fde\u901a\u5206\u91cf","title":"\u5f3a\u8fde\u901a\u5206\u91cf","text":""},{"location":"note/gather/graphtheory/#\u5272\u70b9-\u5272\u8fb9","title":"\u5272\u70b9 \u5272\u8fb9","text":""},{"location":"note/gather/graphtheory/#\u4f20\u9012\u95ed\u5305","title":"\u4f20\u9012\u95ed\u5305","text":""},{"location":"note/gather/graphtheory/#2-sat","title":"2-SAT","text":""},{"location":"note/gather/graphtheory/#\u7f51\u7edc\u6d41","title":"\u7f51\u7edc\u6d41","text":""},{"location":"note/gather/graphtheory/#\u56fe\u7684\u652f\u914d\u96c6-\u72ec\u7acb\u96c6-\u8986\u76d6\u96c6","title":"\u56fe\u7684\u652f\u914d\u96c6 \u72ec\u7acb\u96c6 \u8986\u76d6\u96c6","text":""},{"location":"note/gather/graphtheory/#\u5308\u7259\u5229\u7b97\u6cd5","title":"\u5308\u7259\u5229\u7b97\u6cd5","text":""},{"location":"note/gather/graphtheory/#km-\u7b97\u6cd5","title":"KM \u7b97\u6cd5","text":""},{"location":"note/gather/graphtheory/#\u4e00\u822c\u56fe\u7684\u5339\u914d","title":"\u4e00\u822c\u56fe\u7684\u5339\u914d","text":"<p>todo:</p>"},{"location":"note/gather/graphtheory/#\u6709\u5411\u65e0\u73af\u56fe","title":"\u6709\u5411\u65e0\u73af\u56fe","text":""},{"location":"note/gather/graphtheory/#\u8fde\u901a\u56fe-\u5f3a\u8fde\u901a\u56fe","title":"\u8fde\u901a\u56fe \u5f3a\u8fde\u901a\u56fe","text":""},{"location":"note/gather/graphtheory/#\u53cc\u8fde\u901a","title":"\u53cc\u8fde\u901a","text":""},{"location":"note/templates/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/","title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217","text":"<pre><code>// B3637 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 !important\n// \u7ebf\u6027\u52a8\u6001\u89c4\u5212 O(nlogn)\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1e4 + 9;\nint d[MAXn], dp[MAXn], h[MAXn];\n\nint main() {\n    for(int i = 1; i &lt;= MAXn - 3; i ++)\n        h[i] = INT_MAX;    // \u4e0b\u964d\uff1ah[i] = INT_MIN;\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]);\n    int m = 0;\n    for(int i = 1; i &lt;= n; i ++) {\n        dp[i] = 1;    // \u4e00\u5b9a\u5305\u542b\u81ea\u5df1\u7684\u4ee5\u81ea\u5df1\u7ed3\u5c3e\u7684\u6700\u957fXX\u5b50\u5e8f\u5217\u957f\u5ea6\n        // \u6ce2\u5f0f\u4e8c\u5206\uff0c\u5728 h \u6570\u7ec4\u4e2d\u4e8c\u5206\u627e\u5230\u5c0f\u4e8e/\u5927\u4e8e[\u7b49\u4e8e]\u8981\u4e8c\u5206\u7684 d[i] \u7684\u503c\n        int p = 0;\n        for(int j = 20; j &gt;= 0; j --) {\n            int pp = p | (1 &lt;&lt; j);\n            if(pp &lt;= m &amp;&amp; h[pp] &lt; d[i]) p = pp;    // \u4e0b\u964d\uff1ah[pp] &gt; d[i]\n        }\n        dp[i] = p + 1;    // \u4e8c\u5206\u51fa\u7684 dp[i] \u7684\u503c\n        m = max(m, dp[i]);    // \u6700\u957f\u7684\u5e8f\u5217\u503c\uff0c\u4e5f\u662f h \u6570\u7ec4\u7684\u6700\u540e\u4e00\u4f4d\n        h[dp[i]] = min(h[dp[i]], d[i]);    // \u4e0b\u964d\uff1amax(h[dp[i]], d[i])\n        // h[i]: \u957f\u5ea6\u4e3a i \u7684\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4f4d\u7684\u6700\u5c0f/\u5927\u503c\uff0c\u5347 min \u964d max\n    }\n    // int ans = 0;\n    // for(int i = 1; i &lt;= n; i ++)\n    //     ans = max(ans, dp[i]);\n    printf(\"%d\", m);\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E4%BA%8C%E5%88%86/","title":"\u4e8c\u5206","text":""},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E4%BA%8C%E5%88%86/#\u666e\u901a\u4e8c\u5206","title":"\u666e\u901a\u4e8c\u5206","text":"<p>\u8ba1\u7b97\u4e2d\u5fc3\u70b9 \\(m\\) \u7684\u51e0\u79cd\u65b9\u6cd5\uff1a</p> <ul> <li><code>m = (l + r) &gt;&gt; 1</code></li> <li><code>m = l + (r - l) &gt;&gt; 1</code></li> <li><code>m = (l &amp; r) + ((l ^ r) &gt;&gt; 1)</code></li> </ul> <p>\u4ee5\u4e0b\u4ee3\u7801\u7684\u4e8c\u5206\u533a\u95f4\u4e3a \\([l, r)\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1e3 + 9;\nint d[MAXn];\nint n, m;\n\nbool check(int x) {\n    // return true / false;\n}\n\nint ef() {\n    int l = 0, r = 1e9 + 1;\n    while(l + 1 &lt; r) {\n        int m = l + ((r - l) &gt;&gt; 1);\n        if(check(m)) l = m;\n        else r = m;\n    }\n    return l;\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]);\n    scanf(\"%d\", &amp;m);\n    int ans = ef();\n    ans == 0 ? printf(\"Failed\") : printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E4%BA%8C%E5%88%86/#\u500d\u589e","title":"\u500d\u589e","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1e3 + 9;\nint d[MAXn];\nint n, m;\n\nbool check(int x) {\n    // return true / false;\n}\n\nint bz() {\n    int ans = 0;\n    for(int i = 20; i &gt;= 0; i --) {\n        int t = ans | (1 &lt;&lt; i);\n        if(check(t)) ans = t;\n    }\n    return ans;\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]);\n    scanf(\"%d\", &amp;m);\n    int ans = bz();\n    ans == 0 ? printf(\"Failed\") : printf(\"%d\", ans);\n    return 0;\n}   \n</code></pre> \u5c0f\u6ce2\u4e0e\u4e8c\u5206 <p>\u6458\u5f55\u81ea \u79bb\u6563\u5c0f\u6ce2\u53d8\u6362\u00b0 \u7684 QQ \u6d88\u606f\uff1a</p> <ul> <li>\u54ce\u5466\uff0c\u6bcf\u6b21\u6211\u5199\u4e8c\u5206\u6211\u90fd\u5934\u75bc</li> <li>\u4e00\u60f3\u5230\u4e8c\u5206\u533a\u95f4\u5e94\u8be5\u662f\u5de6\u95ed\u53f3\u5f00\u8fd8\u662f\u95ed\u533a\u95f4\uff0c(l+r)/2\u4f1a\u4e0d\u4f1a\u89e6\u53d1\u5411\u96f6\u53d6\u6574\uff0ccheck\u5b8c\u7b54\u6848\u540e\u5230\u5e95\u5e94\u8be5\u8bbe\u7f6e\u4e3a mid \u8fd8\u662f mid+1\uff0c\u5faa\u73af\u6761\u4ef6\u5230\u5e95\u662f l&lt;=r \u8fd8\u662f l&lt;r \u8fd8\u662f\u522b\u7684\u4ec0\u4e48\u4e1c\u897f\uff0c\u6211\u5c31\u5f00\u59cb\u7206\u70b8\u4e86</li> <li>\u600e\u4e48\u529e\uff0c\u5b66\u4e0d\u4f1a\u4e8c\u5206\uff0c\u8fd9\u8f88\u5b50\u7b97\u662f\u5b8c\u4e86</li> <li>\u4f60\u4eec\u5b66\u4e8c\u5206\u7684\u662f\u4e0d\u662f\u90fd\u80fd\u641e\u6e05\u695a\u4e8c\u5206</li> <li>\u4e3b\u8981\u662f\u4e8c\u5206\u7684\u7b49\u4ef7\u5199\u6cd5\u592a\u591a\u4e86\uff0c\u4f46\u662f\u6df7\u5199\u5c31\u4f1a\u51fa\u95ee\u9898\uff0c\u5f88\u5934\u5927\uff09</li> <li>\u6709\u4e00\u4e2a\u9009\u624b\u56e0\u4e3a\u5b66\u4e0d\u660e\u767d\u4e8c\u5206\u6240\u4ee5\u7528\u4e86\u4e94\u5e74\u7684\u500d\u589e</li> <li>\u6211\u5199\u4e0d\u6765\u4e8c\u5206\uff0c\u5176\u5b9e\u4e3b\u8981\u662f\u641e\u4e0d\u6e05\u695a\u8fb9\u754c\u60c5\u51b5\uff0c\u975e\u4e8c\u5206\u4e0d\u53ef\u7684\u60c5\u51b5\u6211\u8fd8\u662f\u4f1a\u4ed4\u7ec6\u7814\u7a76\u4e00\u4e0b\u548b\u5199\uff09</li> <li>\u4e0d\u8fc7\u76ee\u524d\u9664\u4e86\u8bb2\u8bfe\u4e4b\u5916\u8fd8\u6ca1\u78b0\u5230\u975e\u4e8c\u5206\u4e0d\u53ef\u7684\u60c5\u51b5\uff09</li> </ul>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/","title":"\u5feb\u901f IO","text":""},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#\u81ea\u5e26\u51fd\u6570","title":"\u81ea\u5e26\u51fd\u6570","text":"<pre><code>ios::sync_with_stdio(false);\ncin.tie(0);\ncout.tie(0);\n</code></pre> <p>\u7565\u5feb\u4e8e <code>scanf()</code> \u548c <code>printf()</code>\uff0c\u4f46\u6ce8\u610f\u4e0d\u80fd\u6df7\u7528\u3002</p>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#\u666e\u901a\u65b9\u6cd5","title":"\u666e\u901a\u65b9\u6cd5","text":"<p>\u4ee3\u7801\u6765\u81ea\u300a\u6df1\u5165\u6d45\u51fa\u00b7\u8fdb\u9636\u7bc7\u7bc7\u300b \u00a9\u6d1b\u8c37\u3002</p> <p>Info</p> <p>\u6b64\u90e8\u5206\u4ee3\u7801\u4e0d\u5904\u7406\u8bfb\u53d6\u5230\u4e86\u6587\u4ef6\u7ed3\u5c3e\u7684\u60c5\u51b5\u3002</p>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#getchar","title":"getchar","text":"<pre><code>int read() {\n    int ret = 0, sgn = 0, ch = getchar();\n    while(!isdigit(ch)) sgn |= ch == '-', ch = getchar();\n    while(isdigit(ch)) ret = ret * 10 + ch - '0', ch = getchar();\n    return sgn ? -ret : ret;\n}\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#getchar_unlocked","title":"getchar_unlocked","text":"<p>Warning</p> <p>\u4ec5\u9002\u7528\u4e8e Linux\u3002</p> <pre><code>int read() {\n    int ret = 0, sgn = 0, ch = getchar_unlocked();\n    while(!isdigit(ch)) sgn |= ch == '-', ch = getchar_unlocked();\n    while(isdigit(ch)) ret = ret * 10 + ch - '0', ch = getchar_unlocked();\n    return sgn ? -ret : ret;\n}\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#getc","title":"getc","text":"<pre><code>const int SIZE = 1 &lt;&lt; 14;    // 16KB\nchar getc() {\n    static char buf[SIZE], *begin = buf, *end = buf;\n    if(begin == end) {\n        begin = buf;\n        end = buf + fread(buf, 1, SIZE, stdin);\n    }\n    return *begin++;\n}\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#\u590d\u6742\u65b9\u6cd5","title":"\u590d\u6742\u65b9\u6cd5","text":"<p>\u4ee3\u7801\u6765\u81ea \u00a9disangan233\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n#define ll long long\n#define db double\nnamespace fast_io {\n    char buf[1&lt;&lt;12],*p1=buf,*p2=buf,sr[1&lt;&lt;23],z[23],nc;int C=-1,Z=0,Bi=0,ny;\n    char gc() {return p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;12,stdin),p1==p2)?EOF:*p1++;}\n    ll read() {\n        ll x=0;ny=1;while(nc=gc(),(nc&lt;48||nc&gt;57)&amp;&amp;nc!=EOF)if(nc==45)ny=-1;Bi=1;if(nc&lt;0)return nc;\n        x=nc-48;while(nc=gc(),47&lt;nc&amp;&amp;nc&lt;58&amp;&amp;nc!=EOF)x=(x&lt;&lt;3)+(x&lt;&lt;1)+(nc^48),Bi++;return x*ny;\n    }\n    db gf() {int a=read(),y=ny,b=(nc!='.')?0:read();return(b?a+(db)b/pow(10,Bi)*y:a);}\n    int gs(char *s) {char c,*t=s;while(c=gc(),c&lt;=32);*s++=c;while(c=gc(),c&gt;32)*s++=c;return s-t;}\n    void ot() {fwrite(sr,1,C+1,stdout);C=-1;}\n    void flush() {if(C&gt;1&lt;&lt;22) ot();}\n    template &lt;typename T&gt;\n    void write(T x,char t) {\n        int y=0;if(x&lt;0)y=1,x=-x;while(z[++Z]=x%10+48,x/=10);\n        if(y)z[++Z]='-';while(sr[++C]=z[Z],--Z);sr[++C]=t;flush();\n    }\n    void write(char *s) {int l=strlen(s);for(int i=0;i&lt;l;i++)sr[++C]=*s++;sr[++C]='\\n';flush();}\n}\nusing namespace fast_io;\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#\u8bfb\u53d6\u957f\u6574\u578b","title":"\u8bfb\u53d6\u957f\u6574\u578b","text":"<pre><code>ll num = read();\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#\u8bfb\u53d6\u6d6e\u70b9\u6570","title":"\u8bfb\u53d6\u6d6e\u70b9\u6570","text":"<pre><code>db num = gf();\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#\u8bfb\u53d6\u5b57\u7b26\u4e32","title":"\u8bfb\u53d6\u5b57\u7b26\u4e32","text":"<pre><code>char str[100];\nint length = gs(str);\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#\u8f93\u51fa\u957f\u6574\u578b\u6216\u6d6e\u70b9\u6570","title":"\u8f93\u51fa\u957f\u6574\u578b\u6216\u6d6e\u70b9\u6570","text":"<pre><code>write(12345, '\\n');\nwrite(3.14159, ' ');\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#\u8f93\u51fa\u5b57\u7b26\u4e32","title":"\u8f93\u51fa\u5b57\u7b26\u4e32","text":"<pre><code>char str[] = \"Hello, World!\";\nwrite(str);\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#\u8f93\u51fa\u7f13\u51b2\u533a\u5185\u5bb9","title":"\u8f93\u51fa\u7f13\u51b2\u533a\u5185\u5bb9","text":"<pre><code>return ot(), 0;\n</code></pre>"},{"location":"note/templates/%E5%9F%BA%E6%9C%AC/%E5%BF%AB%E9%80%9FIO/#\u5237\u65b0\u7f13\u51b2\u533a","title":"\u5237\u65b0\u7f13\u51b2\u533a","text":"<pre><code>flush();\n</code></pre>"},{"location":"note/templates/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/","title":"KMP","text":""},{"location":"note/templates/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/#\u62fc\u63a5-kmp","title":"\u62fc\u63a5 KMP","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1e6 + 9;\nint b[MAXn &lt;&lt; 1];\n\nint main() {\n    string s, t;\n    cin &gt;&gt; s &gt;&gt; t;\n    s = \"#\" + t + \"#\" + s;\n    int slen = s.size() - 1;\n    int tlen = t.size();\n    for(int i = 2; i &lt;= slen; i ++) {\n        int p = b[i - 1];\n        while(p &amp;&amp; s[p + 1] != s[i]) p = b[p];\n        if(p) b[i] = p + 1;\n        else b[i] = s[1] == s[i] ? 1 : 0;\n        if(b[i] == tlen) printf(\"%d\\n\", i - 2 * tlen);\n    }\n    for(int i = 1; i &lt;= tlen; i ++)\n        printf(\"%d \", b[i]);\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/#\u5339\u914d-kmp","title":"\u5339\u914d KMP","text":""},{"location":"note/templates/%E5%AD%97%E7%AC%A6%E4%B8%B2/manacher/","title":"manacher","text":"<pre><code>#include&lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int MAXn = 1.1e7 + 9;\nstring os, s;\nint d[(MAXn &lt;&lt; 1) + 9];\n\nsigned main() {\n    getline(cin, os);\n    s = \"@\";\n    for(char c : os)\n        s.push_back('#'),\n        s.push_back(c);\n    s.push_back('#');\n    int len = s.length() - 1, ans = 1;\n    for(int t = 1, r = 0, m = 0; t &lt;= len; t ++) {\n        if(t &lt;= r) d[t] = min(d[(m &lt;&lt; 1) - t], r - t + 1);\n        while(s[t - d[t]] == s[t + d[t]]) d[t] ++;\n        if(d[t] + t &gt; r) r = d[t] + t - 1, m = t;\n        ans = max(ans, d[t] - 1);\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA/","title":"\u56de\u6587\u81ea\u52a8\u673a","text":"<p>\u4ee3\u7801\u4fee\u6539\u81ea \u00a9OI wiki\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 4e3 + 9;\nint sz, tot, last;\nint cnt[MAXn], ch[MAXn][128], len[MAXn], fail[MAXn];\nchar s[MAXn], d[MAXn];\n\n// \u5efa\u7acb\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u957f\u5ea6\u4e3a l\nint node(int l) {\n    sz ++;\n    memset(ch[sz], 0, sizeof(ch[sz]));\n    len[sz] = l;\n    fail[sz] = cnt[sz] = 0;\n    return sz;\n}\n\n// \u521d\u59cb\u5316\nvoid clear() {\n    sz = -1;\n    last = 0;\n    s[tot = 0] = '$';\n    node(0);\n    node(-1);\n    fail[0] = 1;\n}\n\n// \u627e\u540e\u7f00\u56de\u6587\nint getfail(int x) {\n    while (s[tot - len[x] - 1] != s[tot]) x = fail[x];\n    return x;\n}\n\n// \u5efa\u6811\nvoid insert(char c) {\n    s[++tot] = c;\n    int now = getfail(last);\n    if(!ch[now][c - 'a']) {\n        int x = node(len[now] + 2);\n        fail[x] = ch[getfail(fail[now])][c - 'a'];\n        ch[now][c - 'a'] = x;\n    }\n    last = ch[now][c - 'a'];\n    cnt[last] ++;\n}\n\nlli solve() {\n    lli ans = 0;\n    for(int i = sz; i &gt;= 0; i--)\n        cnt[fail[i]] += cnt[i];\n    for(int i = 1; i &lt;= sz; i++)\n        ans = max(ans, 1ll * len[i]);\n    return ans;\n}\n\nint main() {\n    clear();\n    scanf(\"%s\", d + 1);\n    for(int i = 1; d[i]; i++) {\n        insert(d[i]);\n    }\n    printf(\"%lld\", solve());\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%A4%B1%E9%85%8D%E6%A0%91/","title":"\u5931\u914d\u6811","text":""},{"location":"note/templates/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E5%85%B8%E6%A0%91/","title":"\u5b57\u5178\u6811","text":""},{"location":"note/templates/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/","title":"\u5b57\u7b26\u4e32\u54c8\u5e0c","text":""},{"location":"note/templates/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#\u5355\u54c8\u5e0c","title":"\u5355\u54c8\u5e0c","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1e4 + 9;\nint d[MAXn], sha[MAXn];\nconst int BASE = 1331, P = 1e9 + 9;\n\nint fsha(string s) {\n    int len = s.length();\n    int ans = 1;\n    for(int i = 0; i &lt; len; i ++)\n        ans = (ans * BASE + s[i]) % P;\n    return ans;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    string str;\n    getline(cin, str);\n    for(int i = 1; i &lt;= n; i ++) {\n        getline(cin, str);\n        sha[i] = fsha(str);\n    }\n    sort(sha + 1, sha + n + 1);\n    printf(\"%d\", unique(sha + 1, sha + n + 1) - sha - 1);\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#\u53cc\u54c8\u5e0c","title":"\u53cc\u54c8\u5e0c","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int Base1 = 1331, P1 = 1e9 + 7;\nconst int Base2 =  131, P2 = 1e9 + 9;\nconst int MAXl = 1e6 + 9;\nint h1[MAXl], h2[MAXl], b1[MAXl], b2[MAXl];\n\npair&lt;int, int&gt; fsha(int l, int r) {\n    int f1 = (h1[r] - 1ll * h1[l - 1] * b1[r - l + 1] % P1 + P1) % P1;\n    int f2 = (h2[r] - 1ll * h2[l - 1] * b2[r - l + 1] % P2 + P2) % P2;\n    return {f1, f2};\n}\n\nint main() {\n    h1[0] = h2[0] = b1[0] = b2[0] = 1;\n    for(int i = 1; i &lt;= len; i ++) {\n        h1[i] = (1ll * h1[i-1] * Base1 + str[i]) % P1;\n        h2[i] = (1ll * h2[i-1] * Base2 + str[i]) % P2;\n        b1[i] = (1ll * b1[i-1] * Base1) % P1;\n        b2[i] = (1ll * b2[i-1] * Base2) % P2;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/FFT%E4%B9%98%E6%B3%95/","title":"FFT \u4e58\u6cd5","text":"<p>\u4ee3\u7801\u4fee\u6539\u81ea \u00a9Trilarflagz\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define ld long double\n#define mem0(x) memset((x),0,sizeof(x))\n#define fill0(x) fill((x), (x)+MAXn, cp(0,0))\nusing namespace std;\ntypedef complex&lt;ld&gt; cp;\nconst int MAXn=1e4+9;\nconst ld PI = acos(-1);\ncp a[MAXn+9], b[MAXn+9];\nint rev[MAXn+9], ans[MAXn+9];\nchar s1[MAXn+9], s2[MAXn+9];\n\nvoid fft(cp *a, int n, int inv) {    // a: \u8981\u64cd\u4f5c\u7684\u7cfb\u6570, n: \u5e8f\u5217\u957f\u5ea6\n    for(int i=0; i&lt;n; i++) {\n        if(i&lt;rev[i])    // \u9632\u6b62\u540c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4e24\u6b21\uff0c\u56de\u5230\u5b83\u539f\u6765\u7684\u4f4d\u7f6e\n            swap(a[i], a[rev[i]]);\n    }\n    for(int h=1; h&lt;n; h*=2) {    // h: \u51c6\u5907\u5408\u5e76\u5e8f\u5217\u7684\u957f\u5ea6\u7684\u4e8c\u5206\u4e4b\u4e00\n        cp wn = exp(cp(0, inv*PI/h));    // \u6c42\u5355\u4f4d\u6839w_n^1\n        for(int j=0; j&lt;n; j+=h*2) {    // j: \u5408\u5e76\u5230\u4e86\u54ea\u4f4d\n            cp w(1, 0);\n            for(int k=j; k&lt;j+h; k++) {    // \u5de6\u534a\n                cp x=a[k];\n                cp y=w*a[k+h];\n                a[k]=x+y;    // \u8774\u8776\u53d8\u6362\n                a[k+h]=x-y;\n                w*=wn;    // \u6c42w_n^k\n            }\n        }\n    }\n    if(inv==-1)    // IFFT\u6c42\u5012\u6570\n        for(int i=0; i&lt;n; i++)\n            a[i]/=n;\n    return;\n}\n\nint main() {\n    int t;\n    scanf(\"%d\",&amp;t);\n    for(int iout=1; iout&lt;=t; iout++){\n        mem0(s1); mem0(s2); mem0(rev); mem0(ans);\n        fill0(a); fill0(b);\n        scanf(\"%s%s\", s1, s2);\n        int len1=strlen(s1), len2=strlen(s2);\n        int n=max(len1, len2);\n        // \u5b58\u653e\u5728\u5b9e\u90e8\n        for(int i=0; i&lt;len1; i++)\n            a[i]=(ld)(s1[len1-i-1]-'0');\n        for(int i=0; i&lt;len2; i++)\n            b[i]=(ld)(s2[len2-i-1]-'0');\n        int k=1, s=2;    // k: \u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u7684\u4f4d\u6570\n        while((1&lt;&lt;k)&lt;2*n-1){\n            k++;\n            s&lt;&lt;=1;\n        }\n        // \u521d\u59cb\u5316\u6bcf\u4e2a\u4f4d\u7f6e\u6700\u7ec8\u5230\u8fbe\u7684\u4f4d\u7f6e\uff08\u4f4d\u53cd\u8f6c\u4f18\u5316\uff09\n        int len=1&lt;&lt;k;\n        for(int i=0; i&lt;len; i++)\n            rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(k-1));\n\n        fft(a, s, 1);\n        fft(b, s, 1);\n        for(int i=0; i&lt;s; i++)\n            a[i]*=b[i]; \n        fft(a, s, -1);\n\n        // \u8fdb\u4f4d\u4fdd\u5b58\u7b54\u6848\u7684\u6bcf\u4e00\u4f4d\n        for(int i=0; i&lt;s; i++) {\n            // \u5b9e\u90e8\u56db\u820d\u4e94\u5165\uff08\u865a\u90e8\u5e94\u7ea6\u4e3a0\uff09\n            ans[i]+=(int)(a[i].real()+0.5);\n            ans[i+1]+=ans[i]/10;\n            ans[i]%=10;\n        }\n        while(!ans[s]&amp;&amp;s&gt;-1) s--;\n        if(s==-1)\n            printf(\"0\\n\");\n        else{\n            for(int i=s; i&gt;=0; i--)\n                printf(\"%d\", ans[i]);\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E5%9F%83%E5%BC%8F%E7%AD%9B/","title":"\u57c3\u5f0f\u7b5b","text":"<pre><code>fill(isPrime, isPrime + MAXn + 1, true);\nisPrime[0] = isPrime[1] = false;\n\nfor (int i = 2; i * i &lt;= MAXn; ++i) {\n    if (isPrime[i]) {\n        for (int j = i * i; j &lt;= MAXn; j += i) {\n            isPrime[j] = false;\n        }\n    }\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E9%80%92%E6%8E%A8/","title":"\u5e38\u7cfb\u6570\u9f50\u6b21\u7ebf\u6027\u9012\u63a8","text":""},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E5%BF%AB%E9%80%9F%E5%B9%82/","title":"\u5feb\u901f\u5e42","text":"<p>\u5728 \\(O(\\log n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97 \\(b^a\\)\u3002</p> <pre><code>ull res = 1;\nwhile(b) {\n    if(b &amp; 1) (res *= a) %= p;\n    (a *= a) %= p;\n    b &gt;&gt;= 1;\n}\nprintf(\"%lld\", res % p);\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97","text":""},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/#\u601d\u8def\u548c\u63a8\u5bfc","title":"\u601d\u8def\u548c\u63a8\u5bfc","text":"<p>\u88f4\u8700\u5b9a\u7406</p> <p>\\(ax + by = c\\) \u6709\u89e3 \u5f53\u4e14\u4ec5\u5f53 \\(\\gcd(a, b) | c\\)\u3002</p> <p>\u6c42\u89e3 \\(ax + by = \\gcd(a, b)\\)\uff1a</p> \\[ \\begin{aligned} ax + by = \\gcd(a, b) = \\gcd(b, a \\bmod b)\\\\ bx' + (a \\bmod b)y' = \\gcd(b, a \\bmod b)\\\\ bx' + (a - \\left\\lfloor \\frac{a}{b} \\right\\rfloor \\times b)y' = \\gcd(b, a \\bmod b)\\\\ ay' + b(x' - \\left\\lfloor \\frac{a}{b} \\right\\rfloor y') = \\gcd(b, a\\bmod b) \\end{aligned} \\] <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97</p> \\[bx' + (a \\bmod b)y' = \\gcd(b, a \\bmod b)\\] <p>\u7684\u89e3\uff0c\u5c31\u8ba1\u7b97\u51fa\u4e86</p> \\[\\left\\{\\begin{array}{l} x \\gets y' \\\\ y \\gets x' - \\left\\lfloor \\frac{a}{b} \\right\\rfloor y' \\end{array}\\right.\\] <p>\u9012\u5f52\u7684\u8fb9\u754c\u4e3a\uff1a</p> <p>\u5f53 \\(b | a\\) \u65f6\uff0c\u65b9\u7a0b\u4e3a \\(ax + by = b\\)\uff0c\u89e3\u5f97 \\(x = 0,\\: y = 1\\)\u3002</p>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/#\u5b9e\u73b0","title":"\u5b9e\u73b0","text":"<pre><code>void exgcd(int a, int b, int &amp;x, int &amp;y) {\n    if(a % b == 0) x = 0, y = 1;\n    else {\n        exgcd(b, a % b, y, x);\n        y -= a / b * x;\n    }\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/#\u8ba1\u7b97\u540c\u4f59","title":"\u8ba1\u7b97\u540c\u4f59","text":"<pre><code>// P1082 [NOIP2012 \u63d0\u9ad8\u7ec4] \u540c\u4f59\u65b9\u7a0b\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid exgcd(int a, int b, int &amp; x, int &amp; y) {\n    if(a % b == 0) return x = 0, y = 1, void();\n    exgcd(b, a % b, y, x);\n    y -= a / b * x;\n}\n\nint main() {\n    int a, b, x, y;\n    // \u6c42\u51fa a: x \u5728 mod b \u610f\u4e49\u4e0b\u7684\u9006\u5143 x: x^{-1}\n    scanf(\"%d%d\", &amp;a, &amp;b);\n    // ax + by = 1; a: x; x: x^{-1}; b: b; y: k\n    exgcd(a, b, x, y);\n    // ans = x (mod b)\n    printf(\"%d\", (x % b + b) % b);\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E6%A3%80%E6%9F%A5%E8%B4%A8%E6%95%B0/","title":"\u68c0\u67e5\u8d28\u6570","text":""},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E6%A3%80%E6%9F%A5%E8%B4%A8%E6%95%B0/#\u8bd5\u9664\u6cd5","title":"\u8bd5\u9664\u6cd5","text":"<p>\u4ee5\u4e0b\u4ee3\u7801\u63d0\u4f9b\u51e0\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u4ee5\u53ca\u5e38\u6570\u4e0a\u7684\u4f18\u5316\uff1a</p> <ul> <li>\u8bd5\u9664\u5230 \\(\\sqrt{n}\\) \u5373\u53ef\uff1b</li> <li>\u63d0\u524d\u5224\u65ad\u662f\u5426\u662f \\(2\\) \u6216 \\(3\\) \u7684\u500d\u6570\uff0c\u6bcf\u6b21\u8bd5\u9664\u7684\u5bf9\u8c61\u4e3a \\(6k \\pm 1, k \\in \\mathbb{N}\\)\u3002</li> </ul> <pre><code>bool isPrime(int n) {\n    if (n &lt;= 1) return false;\n    if (n &lt;= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i &lt;= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    return true;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E6%A3%80%E6%9F%A5%E8%B4%A8%E6%95%B0/#\u5a01\u5c14\u900a\u5b9a\u7406","title":"\u5a01\u5c14\u900a\u5b9a\u7406","text":"<p>\u5b9e\u9645\u7528\u5904\u4e0d\u5927\u3002</p> <p>\u5a01\u5c14\u900a\u5b9a\u7406</p> <p>\u4e00\u4e2a\u6b63\u6574\u6570\u662f\u8d28\u6570\u5f53\u4e14\u4ec5\u5f53 \\((p-1)! \\equiv -1 \\pmod p\\)\u3002</p> <pre><code>bool is_prime(lli n) {\n    if (n &lt; 2) return false;\n    lli fac = 1;\n    for (lli i = 2; i &lt; n; ++i) {\n        fac = (fac * i) % n;\n    }\n    return fac == n - 1;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E6%A3%80%E6%9F%A5%E8%B4%A8%E6%95%B0/#millerrabin-\u7d20\u6027\u6d4b\u8bd5","title":"Miller\u2013Rabin \u7d20\u6027\u6d4b\u8bd5","text":"<p>from \u00a9 OI Wiki</p> <pre><code>bool millerRabin(int n) {\n    if (n &lt; 3 || n % 2 == 0) return n == 2;\n    if (n % 3 == 0) return n == 3;\n    int u = n - 1, t = 0;\n    while (u % 2 == 0) u /= 2, ++t;\n    // test_time \u4e3a\u6d4b\u8bd5\u6b21\u6570\uff0c\u5efa\u8bae\u8bbe\u4e3a\u4e0d\u5c0f\u4e8e 8\n    // \u7684\u6574\u6570\u4ee5\u4fdd\u8bc1\u6b63\u786e\u7387\uff0c\u4f46\u4e5f\u4e0d\u5b9c\u8fc7\u5927\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u6548\u7387\n    for (int i = 0; i &lt; test_time; ++i) {\n        // 0, 1, n-1 \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u6d4b\u8bd5, a \u53d6\u503c\u8303\u56f4 [2, n-2]\n        int a = rand() % (n - 3) + 2, v = quickPow(a, u, n);\n        if (v == 1) continue;\n        int s;\n        for (s = 0; s &lt; t; ++s) {\n            if (v == n - 1) break;    // \u5f97\u5230\u5e73\u51e1\u5e73\u65b9\u6839 n-1\uff0c\u901a\u8fc7\u6b64\u8f6e\u6d4b\u8bd5\n            v = (long long)v * v % n;\n        }\n        // \u5982\u679c\u627e\u5230\u4e86\u975e\u5e73\u51e1\u5e73\u65b9\u6839\uff0c\u5219\u4f1a\u7531\u4e8e\u65e0\u6cd5\u63d0\u524d break; \u800c\u8fd0\u884c\u5230 s == t\n        // \u5982\u679c Fermat \u7d20\u6027\u6d4b\u8bd5\u65e0\u6cd5\u901a\u8fc7\uff0c\u5219\u4e00\u76f4\u8fd0\u884c\u5230 s == t \u524d v \u90fd\u4e0d\u4f1a\u7b49\u4e8e -1\n        if (s == t) return 0;\n    }\n    return 1;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E6%A3%80%E6%9F%A5%E8%B4%A8%E6%95%B0/#\u5176\u4ed6\u65b9\u6cd5","title":"\u5176\u4ed6\u65b9\u6cd5","text":"<p>\u89c1 \u7d20\u6570 - OI Wiki</p>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E4%B8%8E%E5%BF%AB%E9%80%9F%E5%B9%82/","title":"\u77e9\u9635\u4e58\u6cd5\u4e0e\u5feb\u901f\u5e42","text":"<pre><code>// P3390 \u3010\u6a21\u677f\u3011\u77e9\u9635\u5feb\u901f\u5e42\n#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int MAXn = 100 + 9;\nconst int mod = 1e9 + 7;\n\nstruct matrix {\n    int n, m;\n    int d[MAXn][MAXn];\n    matrix() {\n        memset(d, 0, sizeof(d));\n    }\n};\n\nmatrix mul(matrix a, matrix b) {\n    // a.m == b.n\n    matrix c;\n    c.n = a.n; c.m = b.m;\n    int com = a.m;\n    for(int i = 1; i &lt;= c.n; i ++)\n        for(int j = 1; j &lt;= c.m; j ++) {\n            for(int k = 1; k &lt;= com; k ++) {\n                (c.d[i][j] += a.d[i][k] * b.d[k][j] % mod) %= mod;\n            }\n        }\n    return c;\n}\n\nmatrix mpow(matrix a, int p) {\n    // a.n == a.m\n    matrix e;\n    e.n = e.m = a.n;\n    for(int i = 1; i &lt;= a.n; i ++)\n        e.d[i][i] = 1;\n    while(p) {\n        if(p &amp; 1) e = mul(e, a);\n        a = mul(a, a);\n        p &gt;&gt;= 1;\n    }\n    return e;\n}\n\nsigned main() {\n    matrix a;\n    int n, p;\n    scanf(\"%lld%lld\", &amp;n, &amp;p);\n    a.m = a.n = n;\n    for(int i = 1; i &lt;= n; i ++)\n        for(int j = 1; j &lt;= n; j ++)\n            scanf(\"%lld\", &amp;a.d[i][j]);\n    matrix b = mpow(a, p);\n    for(int i = 1; i &lt;= n; i ++) {\n        for(int j = 1; j &lt;= n; j ++)\n            printf(\"%lld \", b.d[i][j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E7%AD%9B/","title":"\u7ebf\u6027\u7b5b","text":""},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E7%AD%9B/#\u8bc1\u660e","title":"\u8bc1\u660e","text":""},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E7%AD%9B/#\u6b63\u786e\u6027\u8bc1\u660e","title":"\u6b63\u786e\u6027\u8bc1\u660e","text":"<p>\u5bf9\u5408\u6570 \\(x = py\\)\uff0c\u5176\u4e2d \\(p\\) \u662f \\(x\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u3002</p> <p>\u8003\u8651\u5f53 \\(i = y\\) \u65f6\uff0c\u679a\u4e3e\u5df2\u7b5b\u51fa\u7684\u8d28\u6570 \\(j\\)\u3002</p> <p>\u7531\u4e8e \\(p\\) \u662f\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5 \\(i\\) \u4e0d\u542b\u5c0f\u4e8e \\(p\\) \u7684\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5\u5728\u679a\u4e3e\u5230 \\(p\\) \u524d\uff0c<code>i % j = 0</code> \u4e0d\u4f1a\u6210\u7acb\uff0c\u5faa\u73af\u4e0d\u4f1a\u7ec8\u6b62\u3002</p> <p>\u8fd9\u5c31\u8bc1\u660e\u4e86 \\(x\\) \u4f1a\u88ab\u7b5b\u6389\u3002</p>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E7%AD%9B/#\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e","title":"\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e","text":"<p>\u5047\u8bbe \\(x = py = qz\\)\uff0c\u5176\u4e2d \\(p\\) \u662f \\(x\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0cq \u662f\u53e6\u4e00\u8d28\u56e0\u5b50\u3002</p> <p>\u6839\u636e\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\\(z\\) \u4e00\u5b9a\u542b\u6709\u8d28\u56e0\u5b50 \\(p\\)\uff0c\u4e14 \\(p &lt; q\\)\u3002</p> <p>\u5219 \\(i = z, j = p\\) \u65f6\uff0c<code>i % j = 0</code> \u4f1a\u5148\u4e00\u6b65\u6210\u7acb\uff0c\u5faa\u73af\u7ec8\u6b62\uff0c\u8d28\u6570\u4e0d\u4f1a\u679a\u4e3e\u5230 \\(q\\)\u3002</p> <p>\u8003\u5bdf\u8bc1\u660e\u8fc7\u7a0b\u53ef\u4ee5\u53d1\u73b0\uff0c\\(j\\) \u5c31\u662f\u5408\u6570 \\(i \\times j\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u3002</p>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E7%AD%9B/#\u7b5b\u51fa\u8d28\u6570","title":"\u7b5b\u51fa\u8d28\u6570","text":"<p>Warning</p> <p>\u7279\u522b\u6ce8\u610f\u7b2c 9 \u884c\u548c\u7b2c 10 \u884c\u7684\u987a\u5e8f\u3002</p> <pre><code>bitset&lt;MAXn&gt; ved;\nvector&lt;int&gt; prime;\n\nint main() {\n    for(int i = 2; i &lt;= MAXn - 3; i ++) {\n        if(!ved[i]) prime.push_back(i);\n        for(int pj : prime) {\n            if(i * pj &gt; MAXn - 3) break;\n            ved[i * pj] = 1;\n            if(i % pj == 0) break;\n        }\n    }\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E7%AD%9B/#\u540c\u65f6\u8ba1\u7b97\u6700\u5c0f\u8d28\u56e0\u5b50","title":"\u540c\u65f6\u8ba1\u7b97\u6700\u5c0f\u8d28\u56e0\u5b50","text":"<pre><code>bitset&lt;MAXn&gt; ved;\nvector&lt;int&gt; prime;\nint mn[MAXn];\n\nint main() {\n    for(int i = 2; i &lt;= MAXn - 3; i ++) {\n        if(!ved[i]) prime.push_back(i), mn[i] = i;\n        for(int pj : prime) {\n            if(i * pj &gt; MAXn - 3) break;\n            ved[i * pj] = 1;\n            mn[i * pj] = pj;\n            if(i % pj == 0) break;\n        }\n    }\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E6%B3%95/","title":"\u9ad8\u65af\u6d88\u5143\u6cd5","text":""},{"location":"note/templates/%E6%95%B0%E5%AD%A6/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E6%B3%95/#\u6a21\u677f\u9ad8\u65af\u6d88\u5143\u6cd5","title":"\u3010\u6a21\u677f\u3011\u9ad8\u65af\u6d88\u5143\u6cd5","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u5bf9\u5176\u6c42\u89e3\u3002</p> \\[ \\begin{cases} a_{1, 1} x_1 + a_{1, 2} x_2 + \\cdots + a_{1, n} x_n = b_1 \\\\ a_{2, 1} x_1 + a_{2, 2} x_2 + \\cdots + a_{2, n} x_n = b_2 \\\\ \\cdots \\\\ a_{n,1} x_1 + a_{n, 2} x_2 + \\cdots + a_{n, n} x_n = b_n \\end{cases}\\] <pre><code>// P3389 \u3010\u6a21\u677f\u3011\u9ad8\u65af\u6d88\u5143\u6cd5\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 100 + 9;\n\nstruct matrix {\n    int m, n;\n    double d[MAXn][MAXn];\n    matrix() {\n        memset(d, 0, sizeof(d));\n    }\n};\n\nbool solve(matrix &amp; a) {\n    int n = a.n;\n    for(int line = 1; line &lt;= n; line ++) {\n        int swp;\n        for(swp = line; swp &lt;= n; swp ++)\n            if(a.d[swp][line]) break;\n        if(swp &gt; n) return false;\n        swap(a.d[line], a.d[swp]);\n        double dvd = 1 / a.d[line][line];\n        for(int j = 1; j &lt;= n + 1; j ++)\n            a.d[line][j] *= dvd;\n        for(int i = 1; i &lt;= n; i ++) {\n            if(i == line) continue;\n            double tms = a.d[i][line];\n            for(int j = 1; j &lt;= n + 1; j ++)\n                a.d[i][j] -= a.d[line][j] * tms;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    matrix a;\n    a.n = n; a.m = n + 1;\n    for(int i = 1; i &lt;= n; i++)\n        for(int j = 1; j &lt;= n + 1; j++)\n            scanf(\"%lf\", &amp;a.d[i][j]);\n    bool can = solve(a);\n    if(can) {\n        for(int i = 1; i &lt;= n; i++)\n            printf(\"%.2lf\\n\", a.d[i][n + 1]);\n    }\n    else printf(\"No Solution\");\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ST%E8%A1%A8/","title":"ST \u8868","text":""},{"location":"note/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ST%E8%A1%A8/#\u8bfb\u5165\u548c\u6253\u8868","title":"\u8bfb\u5165\u548c\u6253\u8868","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1.8e5 + 9;\nconst int MAXl = 25;\nint mx[MAXn][MAXl], mn[MAXn][MAXl];\n\nint main() {\n    for(int i = 0; i &lt;= MAXn - 3; i ++)\n        for(int j = 0; j &lt;= MAXl - 1; j ++)\n            mn[i][j] = INT_MAX;\n    int n, m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;mx[i][0]), mn[i][0] = mx[i][0];\n    for(int j = 1; j &lt;= MAXl; j ++) {\n        int alen = 1 &lt;&lt; j;\n        int blen = 1 &lt;&lt; (j - 1);\n        for(int i = 1; i &lt;= n - alen + 1; i ++)\n            mx[i][j] = max(mx[i][j - 1], mx[i + blen][j - 1]),\n            mn[i][j] = min(mn[i][j - 1], mn[i + blen][j - 1]);\n    }\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ST%E8%A1%A8/#\u67e5\u8be2","title":"\u67e5\u8be2","text":"<pre><code>    int l, r;\n    scanf(\"%d%d\", &amp;l, &amp;r);\n    lg = log2(r - l + 1);\n    len = 1 &lt;&lt; lg;\n    printf(\"%d\\n\", max(mx[l][lg], mx[r - len + 1][lg])\n                 - min(mn[l][lg], mn[r - len + 1][lg]));\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/","title":"\u6811\u72b6\u6570\u7ec4","text":""},{"location":"note/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#\u5355\u70b9\u52a0-\u533a\u95f4\u6c42\u548c","title":"\u5355\u70b9\u52a0 \u533a\u95f4\u6c42\u548c","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 5e5 + 9;\nint a[MAXn + 9], t[MAXn + 9];\nint n;\n\nint lowbit(int x) {\n    return x&amp;(-x);\n}\n\n// O(n)\u5efa\u6811\u6cd51 - \u524d\u7f00\u548c\nint addi[MAXn + 9];\nvoid build1() {\n    for(int i = 1; i &lt;= n; i ++) {\n        addi[i] = addi[i-1] + a[i];\n        // t[i] = [i-lowbit(i)+1, i]\n        t[i] = addi[i] - addi[i - lowbit(i)];\n    }\n}\n\n// O(n)\u5efa\u6811\u6cd52 - \u6bcf\u6b21\u66f4\u65b0\u7236\u8282\u70b9\nvoid build2() {\n    for(int i = 1; i &lt;= n; i ++) {\n        // t[i] += a[i];\n        int fi = i + lowbit(i);\n        if(fi &lt;= n) t[fi] += t[i];\n    }\n}\n\nvoid add(int x, int v) {\n    for(int xi = x; xi &lt;= n; xi += lowbit(xi))\n        t[xi] += v;\n}\n\nint sum(int x) {\n    int ans = 0;\n    for(int xi = x; xi &gt;= 1; xi -= lowbit(xi))\n        ans += t[xi];\n    return ans;\n}\n\nint main() {\n    int m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i ++) {\n        scanf(\"%d\", &amp;t[i]);\n        // add(i, a[i]);\n    }\n    build2();\n    int ia, ib, ic;\n    for(int io = 1; io &lt;= m; io ++) {\n        scanf(\"%d%d%d\", &amp;ia, &amp;ib, &amp;ic);\n        if(ia == 1) add(ib, ic);\n        else printf(\"%d\\n\", sum(ic) - sum(ib - 1));\n    }\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#\u533a\u95f4\u52a0-\u5355\u70b9\u6c42\u503c","title":"\u533a\u95f4\u52a0 \u5355\u70b9\u6c42\u503c","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 5e5 + 9;\nint a[MAXn + 9], cf[MAXn + 9], t[MAXn + 9];\nint n;\n\nint lowbit(int x) {\n    return x&amp;(-x);\n}\n\nvoid build() {\n    for(int i = 1; i &lt;= n; i ++) {\n        t[i] += cf[i];\n        int fai = i + lowbit(i);\n        if(fai &lt;= n) t[fai] += t[i];\n    }\n}\n\nvoid fadd(int x, int v) {\n    for(int ix = x; ix &lt;= n; ix += lowbit(ix))\n        t[ix] += v;\n}\n\nint sum(int x) {\n    int ans = 0;\n    for(int ix = x; ix &gt;= 1; ix -= lowbit(ix))\n        ans += t[ix];\n    return ans;\n}\n\nint main() {\n    int m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i ++) {\n        scanf(\"%d\", &amp;a[i]);\n        cf[i] = a[i] - a[i-1];\n        // fadd(i, cf[i]);\n    }\n    build();\n    int op;\n    for(int iot = 1; iot &lt;= m; iot ++) {\n        scanf(\"%d\", &amp;op);\n        if(op == 1) {\n            int x, y, v;\n            scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;v);\n            fadd(x, v);\n            fadd(y + 1, -v);\n        }\n        else {\n            int x;\n            scanf(\"%d\", &amp;x);\n            printf(\"%d\\n\", sum(x));\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/","title":"\u7ebf\u6bb5\u6811","text":""},{"location":"note/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#\u533a\u95f4\u6c42\u6700\u503c","title":"\u533a\u95f4\u6c42\u6700\u503c","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define calm ((a + b) &gt;&gt; 1)\nusing namespace std;\nconst int MAXn = 1.8e5 + 9;\nint d[MAXn + 9], tx[(MAXn &lt;&lt; 2) + 9], tn[(MAXn &lt;&lt; 2) + 9];\nint n;\n\nvoid fini(int a, int b, int p) {\n    if(a == b) return tx[p] = tn[p] = d[a], void();\n    int m = calm;\n    fini(a, m, p &lt;&lt; 1);\n    fini(m + 1, b, p &lt;&lt; 1 | 1);\n    tx[p] = max(tx[p &lt;&lt; 1], tx[p &lt;&lt; 1 | 1]);\n    tn[p] = min(tn[p &lt;&lt; 1], tn[p &lt;&lt; 1 | 1]);\n}\n\nint fgetmx(int x, int y, int a, int b, int p) {\n    if(x &lt;= a &amp;&amp; b &lt;= y) return tx[p];\n    int m = calm, mx = 0;\n    if(x &lt;= m) mx = max(mx, fgetmx(x, y, a, m, p &lt;&lt; 1));\n    if(m + 1 &lt;= y) mx = max(mx, fgetmx(x, y, m + 1, b, p &lt;&lt; 1 | 1));\n    return mx;\n}\n\nint fgetmn(int x, int y, int a, int b, int p) {\n    if(x &lt;= a &amp;&amp; b &lt;= y) return tn[p];\n    int m = calm, mn = INT_MAX;\n    if(x &lt;= m) mn = min(mn, fgetmn(x, y, a, m, p &lt;&lt; 1));\n    if(m + 1 &lt;= y) mn = min(mn, fgetmn(x, y, m + 1, b, p &lt;&lt; 1 | 1));\n    return mn;\n}\n\nint main() {\n    int m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]);\n    fini(1, n, 1);\n    for(int i = 1, l, r; i &lt;= m; i ++) {\n        scanf(\"%d%d\", &amp;l, &amp;r);\n        printf(\"%d\\n\", fgetmx(l, r, 1, n, 1) - fgetmn(l, r, 1, n, 1));\n    }\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#\u533a\u95f4\u52a0-\u533a\u95f4\u6c42\u548c","title":"\u533a\u95f4\u52a0 \u533a\u95f4\u6c42\u548c","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 1e5 + 9;\nlli t[4 * MAXn + 9], tag[4 * MAXn + 9], dat[MAXn + 9];\nint n;\n\nvoid ini(int a, int b, int p) {\n    if(a == b) {\n        t[p] = dat[a];\n        return;\n    }\n    int m = (a + b) &gt;&gt; 1;\n    ini(a, m, p * 2);\n    ini(m + 1, b, p * 2 + 1);\n    t[p] = t[p * 2] + t[p * 2 + 1];\n}\n\nvoid fadd(int x, int y, int a, int b, int p, int v) {\n    if(x &lt;= a &amp;&amp; b &lt;= y) {\n        t[p] += v * (b - a + 1);\n        tag[p] += v;\n        return;\n    }\n    int m = (a + b) &gt;&gt; 1;\n    if(tag[p]) {\n        tag[p * 2] += tag[p];\n        tag[p * 2 + 1] += tag[p];\n        t[p * 2] += tag[p] * (m - a + 1);\n        t[p * 2 + 1] += tag[p] * (b - m);\n        tag[p] = 0;\n    }\n    if(x &lt;= m) fadd(x, y, a, m, p * 2, v);\n    if(m+1 &lt;= y) fadd(x, y, m + 1, b, p * 2 + 1, v);\n    t[p] = t[p * 2] + t[p * 2 + 1];\n}\n\nlli fget(int x, int y, int a, int b, int p) {\n    if(x &lt;= a &amp;&amp; b &lt;= y)\n        return t[p];\n    int m = (a + b) &gt;&gt; 1;\n    if(tag[p]) {\n        t[p * 2] += tag[p] * (m - a + 1);\n        t[p * 2 + 1] += tag[p] * (b - m);\n        tag[p * 2] += tag[p];\n        tag[p * 2 + 1] += tag[p];\n        tag[p] = 0;\n    }\n    lli sum = 0;\n    if(x &lt;= m) sum += fget(x, y, a, m, p * 2);\n    if(m+1 &lt;= y) sum += fget(x, y, m + 1, b, p * 2 + 1);\n    return sum;\n}\n\nint main() {\n    int m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%lld\", &amp;dat[i]);\n    ini(1, n, 1);\n    int op;\n    for(int iot = 1; iot &lt;= m; iot ++) {\n        scanf(\"%d\", &amp;op);\n        if(op == 1) {\n            int x, y, v;\n            scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;v);\n            fadd(x, y, 1, n, 1, v);\n        }\n        else if(op == 2) {\n            int x, y;\n            scanf(\"%d%d\", &amp;x, &amp;y);\n            printf(\"%lld\\n\", fget(x, y, 1, n, 1));\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#\u533a\u95f4\u52a0-\u533a\u95f4\u4e58-\u533a\u95f4\u6c42\u548c","title":"\u533a\u95f4\u52a0 \u533a\u95f4\u4e58 \u533a\u95f4\u6c42\u548c","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int M = 571373;\nconst int MAXn = 1e5 + 9;\nint ori[MAXn + 9], t[4 * MAXn + 9], atg[4 * MAXn + 9], mtg[4 * MAXn + 9];\n\nvoid pushup(int p) {\n    t[p] = (t[p &lt;&lt; 1] + t[p &lt;&lt; 1 | 1]) % M;\n}\n\nvoid addtag(int a, int b, int p, int v) {\n    // p: \u5b50\u8282\u70b9\n    (atg[p] += v) %= M;\n    (t[p] += v * (b - a + 1) % M) %= M;\n}\n\nvoid multag(int a, int b, int p, int v) {\n    // p: \u5b50\u8282\u70b9\n    v %= M;\n    (atg[p] *= v) %= M;\n    (mtg[p] *= v) %= M;\n    (t[p] *= v) %= M;\n}\n\nvoid pushdown(int a, int b, int p) {\n    // p: \u5f53\u524d\u8282\u70b9\n    int m = (a + b) &gt;&gt; 1;\n    multag(a, m, p &lt;&lt; 1, mtg[p]);\n    multag(m + 1, b, p &lt;&lt; 1 | 1, mtg[p]);\n    addtag(a, m, p &lt;&lt; 1, atg[p]);\n    addtag(m + 1, b, p &lt;&lt; 1 | 1, atg[p]);\n    mtg[p] = 1;\n    atg[p] = 0;\n}\n\nvoid fini(int a, int b, int p) {\n    if(a == b) {\n        t[p] = ori[a] % M;\n        return;\n    }\n    int m = (a + b) &gt;&gt; 1;\n    fini(a, m, p * 2);\n    fini(m + 1, b, p * 2 + 1);\n    pushup(p);\n}\n\nvoid fadd(int x, int y, int a, int b, int p, int v) {\n    if(x &lt;= a &amp;&amp; b &lt;= y) {\n        addtag(a, b, p, v);\n        return;\n    }\n    int m = (a + b) &gt;&gt; 1;\n    pushdown(a, b, p);\n    if(x &lt;= m) fadd(x, y, a, m, p &lt;&lt; 1, v);\n    if(m+1 &lt;= y) fadd(x, y, m + 1, b, p &lt;&lt; 1 | 1, v);\n    pushup(p);\n}\n\nvoid fmul(int x, int y, int a, int b, int p, int v) {\n    if(x &lt;= a &amp;&amp; b &lt;= y) {\n        multag(a, b, p, v);\n        return;\n    }\n    int m = (a + b) &gt;&gt; 1;\n    pushdown(a, b, p);\n    if(x &lt;= m) fmul(x, y, a, m, p &lt;&lt; 1, v);\n    if(m+1 &lt;= y) fmul(x, y, m + 1, b, p &lt;&lt; 1 | 1, v);\n    pushup(p);\n}\n\nint fget(int x, int y, int a, int b, int p) {\n    if(x &lt;= a &amp;&amp; b &lt;= y)\n        return t[p];\n    pushdown(a, b, p);\n    int m = (a + b) &gt;&gt; 1;\n    int sum = 0;\n    if(x &lt;= m) sum += fget(x, y, a, m, p &lt;&lt; 1) % M;\n    if(m+1 &lt;= y) sum += fget(x, y, m + 1, b, p &lt;&lt; 1 | 1) % M;\n    return sum % M;\n}\n\nsigned main() {\n    int n, tms, ia;\n    scanf(\"%lld%lld%lld\", &amp;n, &amp;tms, &amp;ia);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%lld\", &amp;ori[i]);\n    for(int i = 1; i &lt;= 4*MAXn; i ++)\n        mtg[i] = 1;\n    fini(1, n, 1);\n    int op;\n    for(int ims = 1; ims &lt;= tms; ims ++) {\n        scanf(\"%lld\", &amp;op);\n        if(op == 1) {\n            int x, y, v;\n            scanf(\"%lld%lld%lld\", &amp;x, &amp;y, &amp;v);\n            fmul(x, y, 1, n, 1, v);\n        }\n        else if(op == 2) {\n            int x, y, v;\n            scanf(\"%lld%lld%lld\", &amp;x, &amp;y, &amp;v);\n            fadd(x, y, 1, n, 1, v);\n\n        }\n        else if(op == 3) {\n            int x, y;\n            scanf(\"%lld%lld\", &amp;x, &amp;y);\n            printf(\"%lld\\n\", fget(x, y, 1, n, 1));\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%A0%91%E4%B8%8A%E9%97%AE%E9%A2%98/LCA/","title":"LCA","text":""},{"location":"note/templates/%E6%A0%91%E4%B8%8A%E9%97%AE%E9%A2%98/LCA/#\u500d\u589e\u6c42-lca","title":"\u500d\u589e\u6c42 LCA","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 5e5 + 9;\nvector&lt;int&gt; g[MAXn];\nvector&lt;int&gt; order;\nint depth[MAXn];    // depth[tp] = 1\nint fa[MAXn][26];\n\nvoid dfs(int x, int f, int dph) {\n    order.push_back(x);\n    fa[x][0] = f;\n    depth[x] = dph;\n    for(int y : g[x]) if(y != f)\n        dfs(y, x, dph + 1);\n}\n\nvoid dbz(int &amp; x, int cdph) {\n    for(int k = 24; k &gt;= 0 &amp;&amp; cdph; k --) {\n        if((1 &lt;&lt; k) &lt;= cdph) {\n            x = fa[x][k];\n            cdph -= (1 &lt;&lt; k);\n        }\n    }\n}\n\n// void dbz(int &amp; x, int cdph) {\n//  if(cdph == 0) return;\n//  for(int k = 24; k &gt;= 0; k --) {\n//      if((1 &lt;&lt; k) &lt;= cdph) {\n//          x = fa[x][k];\n//          dbz(x, cdph - (1 &lt;&lt; k));\n//          return;\n//      }\n//  }\n// }\n\n// void dbz(int &amp; x, int cdph) {\n//  while(cdph) {\n//      x = fa[x][0];\n//      cdph --;\n//  }\n// }\n\nint LCA(int x, int y, int k) {\n    if(x == y) return x;\n    for(int k = 24; k &gt;= 0; k --) {\n        if(fa[x][k] != fa[y][k]) {\n            x = fa[x][k];\n            y = fa[y][k];\n        }\n    }\n    return fa[x][0];\n}\n\nint main() {\n    int n, m, tp;\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;tp);\n    for(int i = 1, x, y; i &lt;= n - 1; i ++) {\n        scanf(\"%d%d\", &amp;x, &amp;y);\n        g[x].push_back(y);\n        g[y].push_back(x);\n    }\n    dfs(tp, 0, 1);\n    for(int k = 1; k &lt; 25; k ++) {\n        for(int x : order) {\n            fa[x][k] = fa[fa[x][k - 1]][k - 1];\n        }\n    }\n    for(int i = 1, u, v, q; i &lt;= m; i ++) {\n        scanf(\"%d%d\", &amp;u, &amp;v);\n        if(depth[u] &gt; depth[v]) swap(u, v);\n        dbz(v, depth[v] - depth[u]);\n        q = LCA(u, v, 24);\n        printf(\"%d\\n\", q ? q : tp);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"note/templates/%E6%A0%91%E4%B8%8A%E9%97%AE%E9%A2%98/LCA/#tarjan-\u6c42-lca","title":"Tarjan \u6c42 LCA","text":""},{"location":"note/tricks/bitoper/","title":"\u4f4d\u8fd0\u7b97","text":""},{"location":"note/tricks/bitoper/#\u8fd0\u7b97\u7b26","title":"\u8fd0\u7b97\u7b26","text":"\u7b26\u53f7 \u8bed\u6cd5 \u540d\u79f0 \u542b\u4e49 &amp; \\(a\\) &amp; \\(b\\) \u6309\u4f4d\u4e0e \u5747\u4e3a \\(1\\) \u65f6\u624d\u662f \\(1\\)\uff0c\u5426\u5219\u662f \\(0\\)\uff1b\u53ea\u8981\u6709 \\(0\\)\uff0c\u5c31\u662f \\(0\\) \\(\\mid\\) \\(a\\mid b\\) \u6309\u4f4d\u6216 \u5747\u4e3a \\(0\\) \u65f6\u624d\u662f \\(0\\)\uff0c\u5426\u5219\u662f \\(1\\)\uff1b\u53ea\u8981\u6709 \\(1\\)\uff0c\u5c31\u662f \\(1\\) ^ \\(a\\) ^ \\(b\\) \u6309\u4f4d\u5f02\u6216 \u76f8\u540c\u662f \\(0\\) \uff0c\u4e0d\u540c\u662f \\(1\\)\uff1b\\(1\\) ^ \\(1=0\\) ^ \\(0=0\\)\uff0c\\(1\\) ^ \\(0=0\\) ^ \\(1=1\\) ~ ~ \\(x\\) \u53d6\u53cd \u6bcf\u4e00\u4f4d\u90fd\u53d6\u76f8\u53cd\u6570 &lt;&lt; \\(a\\) &lt;&lt; \\(val\\) \u5de6\u79fb \u5411\u5de6\u79fb\uff0c\u4e0d\u8db3\u8865 \\(0\\)\uff0c\u591a\u4f59\u53bb\u9664 &gt;&gt; \\(a\\) &gt;&gt; \\(val\\) \u53f3\u79fb \u5411\u5de6\u79fb\uff0c\u4e0d\u8db3\u8865 \\(0\\)\uff0c\u591a\u4f59\u53bb\u9664 <p>view.jpg | ori.png | ori.svg</p> <p>\u7279\u522b\u5730\uff0c\u5bf9\u4e8e\u8d1f\u6570\u7684\u53f3\u79fb\u8fd0\u7b97\uff1a</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main(){\n    signed a=9,b=-9;\n    printf(\"%d %d %d %d\",a&gt;&gt;1,b&gt;&gt;1,a&gt;&gt;2,b&gt;&gt;2);\n    return 0;\n    // output: 4 -5 2 -3\n}\n</code></pre>"},{"location":"note/tricks/bitoper/#\u5e38\u7528\u6280\u5de7","title":"\u5e38\u7528\u6280\u5de7","text":""},{"location":"note/tricks/bitoper/#\u4e58\u9664\u4ee5-2-\u7684\u5e42\u6b21","title":"\u4e58/\u9664\u4ee5 2 \u7684\u5e42\u6b21","text":"<ul> <li>\u9664\uff1a<code>257&gt;&gt;4</code> \u7b49\u540c\u4e8e <code>257/pow(2,4)</code>\uff1b</li> <li>\u4e58\uff1a<code>3&lt;&lt;4</code> \u7b49\u540c\u4e8e <code>3*pow(2,4)</code>\uff1b</li> <li>\u5e38\u7528 <code>a&lt;&lt;=1</code> \u4ee3\u8868 <code>a*=2</code>\uff1b\u5e38\u7528 <code>a&gt;&gt;=1</code> \u4ee3\u8868 <code>a/=2</code>\u3002</li> </ul> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main(){\n    printf(\"%d %d\",257&gt;&gt;4,3&lt;&lt;4);\n    return 0;\n    // output: 16 48\n}\n</code></pre> <p>\u540c\u6837\u5730\uff0c\u7279\u522b\u6ce8\u610f\u53f3\u79fb\u5bf9\u4e8e\u8d1f\u6570\u7684\u53d6\u6574\u65b9\u5f0f\uff0c\u8d1f\u6570\u7684\u5de6\u79fb\uff1a</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main(){\n    printf(\"%d %d\\n\",(-257)&gt;&gt;4,257&gt;&gt;4);\n    printf(\"%d %d\",(-3)&lt;&lt;4,3&lt;&lt;4);\n    return 0;\n    // warning on line 6 colum 21:\n    // [\u8b66\u544a] left shift of negative value [-Wshift-negative-value]\n    /**\n    * output: \n    * -17 16\n    * -48 48\n    */\n}\n</code></pre>"},{"location":"note/tricks/bitoper/#\u4ea4\u6362\u4e24\u6570","title":"\u4ea4\u6362\u4e24\u6570","text":"<p>\u4ea4\u6362\u4e24\u6570\u5efa\u8bae\u4f7f\u7528 <code>swap()</code> \u51fd\u6570\uff08\u975e\u5e38\u5f3a\u5927\uff09\uff0c\u6216\u8005\u5b9a\u4e49\u7b2c\u4e09\u4e2a\u53d8\u91cf\u4e34\u65f6\u5b58\u50a8\uff0c\u8f83\u4e3a\u5e38\u7528\u3002 \u4f7f\u7528\u548c\u5dee\u4ea4\u6362\u6216\u8005\u4f4d\u8fd0\u7b97\u4ea4\u6362\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6ea2\u51fa\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002</p> <pre><code>a = a ^ b;\nb = a ^ b;\na = a ^ b;\n</code></pre> <pre><code>a ^= b;\nb ^= a;\na ^= b;\n</code></pre> <p>\u8fd9\u91cc\u7528\u5230\u7684\u6309\u4f4d\u5f02\u6216\u6027\u8d28\uff1a</p> <ul> <li>\u76f8\u540c\u7684\u6570\u6309\u4f4d\u5f02\u6216\u4e3a \\(0\\)</li> <li>\u4efb\u4f55\u6570\u6309\u4f4d\u5f02\u6216 \\(0\\) \u90fd\u662f\u5b83\u672c\u8eab</li> <li>\u6309\u4f4d\u5f02\u6216\u7b26\u5408\u4ea4\u6362\u5f8b\u3001\u7ed3\u5408\u5f8b</li> </ul> <p>\u7b2c7\u884c\u5c55\u5f00\u5199\u662f <code>b' = a' ^ b' = (a ^ b) ^ b = a ^ (b ^ b) = a ^ 0 = a</code>\uff1b \u7b2c8\u884c\u5c55\u5f00\u5199\u662f <code>a' = a' ^ b' = (a ^ b) ^ a = b ^ (a ^ a) = b ^ 0 = b</code>\u3002 \uff08\u6ca1\u5e26 <code>'</code> \u7684\u662f\u539f\u59cb\u53d8\u91cf\uff09</p>"},{"location":"note/tricks/bitoper/#\u5e38\u89c1\u5e94\u7528","title":"\u5e38\u89c1\u5e94\u7528","text":"<ul> <li>\u4e8c\u5206\u67e5\u627e\u4e2d\uff0c\u5bf9\u4e8e\u5de6\u8fb9\u754c \\(l\\) \u548c\u53f3\u8fb9\u754c \\(r\\)\uff0c\u4f7f\u7528 <code>(l + r) &gt;&gt; 1</code> \u6216 <code>l + (r - l) &gt;&gt; 1</code>\uff08\u540e\u8005\u51cf\u5c0f\u6ea2\u51fa\u60c5\u51b5\uff09\u6765\u8ba1\u7b97\u4e2d\u95f4\u70b9 \\(m = \\frac{l + r}{2}\\)\uff1b</li> <li>\u6811\u72b6\u6570\u7ec4\u4e2d\uff0c\u4f7f\u7528 <code>x&amp;(-x)</code> \u4ee3\u8868 <code>lowbit(x)</code>\uff1b</li> <li>\u7ebf\u6bb5\u6811\u4e2d\uff0c\u5bf9\u4e8e\u5b58\u50a8\u5728 \\(d_p\\) \u4e2d\u7684\u8282\u70b9\uff0c\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u4e0b\u6807\u5206\u522b\u4e3a <code>p &gt;&gt; 1</code> \u548c <code>p &gt;&gt; 1 | 1</code>\u3002</li> </ul>"},{"location":"note/tricks/bitoper/#\u57fa\u672c\u4f8b\u9898","title":"\u57fa\u672c\u4f8b\u9898","text":""},{"location":"note/tricks/bitoper/#\u5224\u65ad\u662f\u5426\u662f-2-\u7684\u5e42","title":"\u5224\u65ad\u662f\u5426\u662f 2 \u7684\u5e42","text":"<p>\u529b\u6263\u94fe\u63a5\uff1a231. Power of Two</p> <p>\u4e00\u4e2a\u6570\u662f \\(2\\) \u7684\u5e42\uff0c\u5176\u4e8c\u8fdb\u5236\u5fc5\u987b\u662f\u4e00\u4e2a <code>1</code> \u52a0\u4e0a\u82e5\u5e72\u4e2a <code>0</code> \uff0c\u5982 <code>1000</code> \u3002\u6ee1\u8db3\u8fd9\u4e2a\u6570\u51cf\u53bb \\(1\\) \u540e\u6bcf\u4e00\u4f4d\u90fd\u4e0e\u539f\u6570\u4e0d\u540c\u3002\u5982\u5bf9\u4e8e \\(2\\) \u7684 \\(4\\) \u6b21\u65b9 \\(16\\) \uff1a</p> <pre><code>  10000 =&gt; 16\n&amp; 01111 =&gt; 16-1\n-------\n  00000 =&gt; 0\n</code></pre> <p>\u539f\u7406\u53ef\u53c2\u8003 #\u6cd51 - \u6309\u4f4d\u4e0e\u8fd0\u7b97\u3002</p> <pre><code>class Solution {\npublic:\n    bool isPowerOfTwo(int n) {\n        return (n&gt;0) &amp;&amp; (n&amp;(n-1))==0;\n    }\n};\n</code></pre>"},{"location":"note/tricks/bitoper/#\u4e8c\u8fdb\u5236\u4e2d-1-\u7684\u4e2a\u6570","title":"\u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570","text":"<p>\u529b\u6263\u94fe\u63a5\uff1a191. Number of 1 Bits</p>"},{"location":"note/tricks/bitoper/#\u6cd51---\u6309\u4f4d\u4e0e\u8fd0\u7b97","title":"\u6cd51 - \u6309\u4f4d\u4e0e\u8fd0\u7b97","text":"<p>\u4e0e #\u5224\u65ad\u662f\u5426\u662f \\(2\\) \u7684\u5e42 \u7c7b\u4f3c\uff0c\u901a\u8fc7\u8bed\u53e5 <code>a&amp;(a-1)</code> \u53ef\u4ee5\u6d88\u53bb\u8fd9\u4e2a\u6570\u4e8c\u8fdb\u5236\u6700\u4f4e\u4f4d\u7684 <code>1</code> \uff0c\u4ee5 \\(14\\) \u4e3e\u4f8b\uff1a</p> <pre><code>  011 10 =&gt; 14\n&amp; 011 01 =&gt; 14-1\n----- --\n  011 00\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u51cf\u53bb \\(1\\) \u540e\u4e0e\u524d\u9762\u7684\u90e8\u5206\uff08<code>011</code>\uff09\u65e0\u5173\uff08\u4e0a\u4e0b\u6bcf\u4f4d\u90fd\u76f8\u540c\uff09\uff0c\u540e\u9762\u7684\u90e8\u5206\u6bcf\u4f4d\u90fd\u4e0a\u4e0b\u4e0d\u540c\u3002\u6309\u4f4d\u4e0e\u8fd9\u4e24\u4e2a\u6570\u4f1a\u4fdd\u7559\u524d\u9762\u7684\u90e8\u5206\uff0c\u540e\u9762\u7684\u90e8\u5206\u5168\u90e8\u7f6e <code>0</code>\uff0c\u56e0\u6b64\u6d89\u53ca\u5230\u7684\u4e00\u4e2a <code>1</code> \u88ab\u6d88\u4e3a <code>0</code>\u3002</p> <p>\u56e0\u6b64\uff0c\u53ef\u4ee5\u5f97\u51fa\uff1a</p> <ul> <li>\u6d88\u53bb\u4e00\u4e2a\u6570\u4e8c\u8fdb\u5236\u6700\u53f3\u4fa7\u7684 <code>1</code>\uff1a <code>a&amp;(a-1)</code>\uff1b</li> <li>\u83b7\u53d6\u4e00\u4e2a\u6570\u4e8c\u8fdb\u5236\u6700\u53f3\u4fa7\u7684 <code>1</code>\uff1a <code>a&amp;(~a+1)</code> \u6216 <code>a&amp;(-a)</code>\uff08\u5373 <code>lowbit(x)</code>\uff09\u3002</li> </ul> <p><code>-a</code> \u8868\u793a <code>a</code> \u7684\u8865\u7801\u3002</p> <pre><code>class Solution {\npublic:\n    int hammingWeight(int n) {\n        long long int count = 0;\n        while(n) {\n            count++;\n            n&amp;=(n-1);\n        }\n        return count;\n    }\n};\n</code></pre>"},{"location":"note/tricks/bitoper/#\u6cd52---\u6bcf\u4e00\u4f4d\u5224\u65ad","title":"\u6cd52 - \u6bcf\u4e00\u4f4d\u5224\u65ad","text":"<p>\u6bcf\u6b21\u5224\u65ad\u6700\u4f4e\u4f4d\u662f\u5426\u4e3a <code>1</code>\uff0c\u5e76\u53f3\u79fb\u79fb\u6389\u6700\u4f4e\u4f4d\uff0c\u76f4\u5230\u79fb\u4e3a \\(0\\)\u3002</p> <pre><code>class Solution {\npublic:\n    int hammingWeight(int n) {\n        long long int count = 0;\n        while(n) {\n            count += n&amp;1;\n            n&gt;&gt;=1;\n        }\n        return count;\n    }\n};\n</code></pre> <p>\u8f6c\u5316\u6210\u4e0d\u7528\u4f4d\u8fd0\u7b97\u7684\u65b9\u5f0f\uff1a</p> <pre><code>class Solution {\npublic:\n    int hammingWeight(int n) {\n        long long int count = 0;\n        while(n) {\n            count += n%2;\n            n/=2;\n        }\n        return count;\n    }\n};\n</code></pre>"},{"location":"note/tricks/bitoper/#\u4e8c\u8fdb\u5236\u662f\u5426-0-1-\u4ea4\u66ff","title":"\u4e8c\u8fdb\u5236\u662f\u5426 0 1 \u4ea4\u66ff","text":"<p>\u529b\u6263\u94fe\u63a5\uff1a693. Binary Number with Alternating Bits</p> <p>\u6bcf\u6b21\u5224\u65ad\u76f8\u90bb\u7684\u4e24\u4f4d\u662f\u5426\u662f <code>01</code> \u6216\u8005 <code>10</code>\u3002 \u901a\u8fc7\u5bf9\u8be5\u6570\u6309\u4f4d\u4e0e\u8fd0\u7b97 \\(3\\) \u5373\u53ef\uff08 \\(3\\) \u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4e3a <code>11</code>\uff09\u3002\u5982\u679c\u8be5\u6570\u6700\u540e\u4e24\u4f4d\u4e3a <code>10</code>\uff0c\u5219\u6309\u4f4d\u4e0e\u7ed3\u679c\u4e3a <code>10</code>\uff1b\u6700\u540e\u4e24\u4f4d\u4e3a <code>01</code>\uff0c\u5219\u6309\u4f4d\u4e0e\u7ed3\u679c\u4e3a <code>01</code>\u3002\u5426\u5219\u90fd\u4e0d\u6ee1\u8db3\u3002 \u7136\u540e\u628a\u8be5\u6570\u53f3\u79fb \\(1\\) \u4f4d\uff0c\u7ee7\u7eed\u68c0\u67e5\u6700\u540e\u4e24\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u3002</p> <pre><code>class Solution {\npublic:\n    bool hasAlternatingBits(int n) {\n        while(n) {\n            if((n&amp;3)!=2 &amp;&amp; (n&amp;3)!=1)\n                return false;\n            n&gt;&gt;=1;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"note/tricks/bitoper/#\u7ec3\u4e60\u9898","title":"\u7ec3\u4e60\u9898","text":""},{"location":"note/tricks/bitoper/#lcsingle-number-iii","title":"LCsingle-number-iii","text":"<p>\u529b\u6263\u94fe\u63a5\uff1a260. Single Number III</p>"},{"location":"note/tricks/bitoper/#p1226","title":"P1226","text":"<p>\u6d1b\u8c37\u94fe\u63a5\uff1aP1226 \u3010\u6a21\u677f\u3011\u5feb\u901f\u5e42</p> AC code \u5feb\u901f\u5e42\u6a21\u677f<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\n\nint main() {\n    lli a, b, p;\n    scanf(\"%lld%lld%lld\", &amp;a, &amp;b, &amp;p);\n    printf(\"%lld^%lld mod %lld=\", a, b, p);\n    lli res = 1;\n    while(b) {\n        if(b &amp; 1) (res *= a) %= p;\n        (a *= a) %= p;\n        b &gt;&gt;= 1;\n    }\n    printf(\"%lld\", res % p);\n    return 0;\n}\n</code></pre>"},{"location":"note/tricks/bitoper/#p10118","title":"P10118","text":"<p>\u6d1b\u8c37\u94fe\u63a5\uff1aP10118 \u300eSTA - R4\u300fAnd</p> STD \u9898\u89e3 <p>from: \u300eSTA - R4\u300f T1 \u9898\u89e3</p> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c\\(x \\operatorname{AND} y\\) \u5bf9\u5e94\u4e86\u5728\u4e8c\u8fdb\u5236\u52a0\u6cd5\u4e2d\u8fdb\u4f4d\u7684\u4f4d\u7f6e\u96c6\u5408\uff0c\\(x \\operatorname{XOR} y\\) \u5bf9\u5e94\u4e86\u7ed3\u679c\u4e2d\u4e3a \\(1\\) \u4f46\u662f\u6ca1\u6709\u8fdb\u4f4d\u7684\u4f4d\u7f6e\u96c6\u5408\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u7528\u4f4d\u8fd0\u7b97\u6a21\u62df\u52a0\u6cd5\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa</p> \\[x + y = 2 \\times \\left(x \\operatorname{AND} y\\right) + x \\operatorname{XOR} y\\] <p>\u56e0\u4e3a\u5df2\u77e5 \\(x + y\\) \u548c \\(x \\operatorname{AND} y\\)\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230 \\(x \\operatorname{XOR} y\\)\uff0c\u8bbe\u4e3a \\(C\\)\u3002</p> <p>\u90a3\u4e48\u6240\u6709\u53ef\u80fd\u7684\u5408\u6cd5\u6570\u5bf9\u53ef\u4ee5\u901a\u8fc7\u5c06 \\(C\\) \u4e8c\u8fdb\u5236\u4e0b\u7684 \\(1\\) \u5206\u914d\u7ed9 \\(x\\) \u6216 \\(y\\) \u5f97\u5230\u3002\u6ce8\u610f\u5230\u82e5 \\(C \\operatorname{AND} B\\) \u4e0d\u4e3a \\(0\\) \u90a3\u4e48\u4e0d\u5b58\u5728\u5408\u6cd5\u7684\u5206\u914d\u65b9\u6848\uff0c\u6b64\u65f6\u5e94\u6309\u65e0\u89e3\u5904\u7406\u3002</p> <p>\u901a\u8fc7\u4e00\u4e9b\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0 \\(C\\) \u4e8c\u8fdb\u5236\u4e0b\u6700\u9ad8\u4f4d\u7684 \\(1\\) \u4e00\u5b9a\u5206\u914d\u7ed9 \\(y\\)\uff0c\u5426\u5219\u65e0\u6cd5\u4fdd\u8bc1 \\(x \\le y\\)\u3002\u5728\u8fd9\u4e4b\u540e\u7684\u6240\u6709\u60c5\u51b5\u5747\u5408\u6cd5\uff0c\u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u4e00\u79cd\u65b9\u6848\uff0c\u5c06 \\(C\\) \u4e8c\u8fdb\u5236\u4e0b\u9664\u6700\u9ad8\u4f4d\u7684\u5176\u4ed6\u4f4d\u5206\u914d\u65b9\u6848\u53d6\u53cd\uff0c\u5f97\u5230\u7684\u65b9\u6848\u4e5f\u662f\u5408\u6cd5\u7684\uff0c\u4e14\u4e0e\u539f\u65b9\u6848\u4e92\u8865\u3002</p> <p>\u6240\u4ee5\u53ea\u4f1a\u6709 \\(C\\) \u4e8c\u8fdb\u5236\u4e0b\u6700\u9ad8\u4f4d\u7684 \\(1\\) \u4ea7\u751f\u8d21\u732e\uff0c\u8d21\u732e\u7cfb\u6570\u4e3a\u5269\u4f59\u4f4d\u6570\u7684\u65b9\u6848\u6570\uff0c\u5373 \\(2 ^{\\operatorname{popcount}\\left(C\\right) - 1}\\)\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728 \\(\\mathcal{O}\\left(1\\right)\\) \u7684\u65f6\u95f4\u5185\u56de\u7b54\u6bcf\u7ec4\u8be2\u95ee\u3002</p>"},{"location":"note/tricks/pc/","title":"\u6392\u5217\u7ec4\u5408","text":""},{"location":"note/tricks/pc/#\u6392\u5217","title":"\u6392\u5217","text":""},{"location":"note/tricks/pc/#\u6982\u5ff5","title":"\u6982\u5ff5","text":"<p>\u4ece \\(n\\) \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u4e2d\u53d6\u51fa \\(m(m\\le n)\\) \u4e2a\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002</p> \\[ P^m_n = \\prod_{i=0}^{m-1}(n-i) = \\frac{n!}{(n-m)!} \\]"},{"location":"note/tricks/pc/#\u5e38\u7528\u6027\u8d28","title":"\u5e38\u7528\u6027\u8d28","text":"<ul> <li>\\(P^m_m=m!\\)\uff080\u7684\u9636\u4e58\u7b49\u4e8e1\uff09</li> <li>\\(P^m_n=nP^{m-1}_{n-1}\\)</li> <li>\\(P^m_n=mP^{m-1}_{n-1}+P^m_{n-1}\\)</li> </ul>"},{"location":"note/tricks/pc/#\u7ec4\u5408","title":"\u7ec4\u5408","text":""},{"location":"note/tricks/pc/#\u6982\u5ff5_1","title":"\u6982\u5ff5","text":"<p>\u4ece \\(n\\) \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u4e2d\u53d6\u51fa \\(m(m\\le n)\\) \u4e2a\u5143\u7d20\uff0c\u4e0d\u8003\u8651\u6392\u5e8f\u3002</p> \\[C^m_n=\\frac{P^m_n}{P^m_m}=\\frac{P^m_n}{m!}=\\frac{\\prod_{i=0}^{m-1}(n-i)}{m!}=\\frac{n!}{m!(n-m)!}\\]"},{"location":"note/tricks/pc/#\u5e38\u7528\u6027\u8d28_1","title":"\u5e38\u7528\u6027\u8d28","text":"<ul> <li>\\(C^0_n=C^n_n=1\\)</li> <li>\\(C^m_n=C^{n-m}_n\\)</li> <li>\\(C^m_n=\\frac{n}{m}C^{m-1}_{n-1}=\\frac{k+1}{n-k}C^{k+1}_n=\\frac{n}{n-k}C^k_{n-1}\\)</li> <li>\\(C^m_n=C^m_{n-1}+C^{m-1}_{n-1}\\)</li> <li>\\(C^k_nC^m_k=C^m_nC^{k-m}_{n-m}=C^{k-m}_nC^m_{n-k+m}\\) , \\(m \\le k \\le n\\)</li> <li>\\(\\sum_{i=0}^n{C^i_n}=2^n\\)</li> <li>\\(\\sum_{i=0}^{n}{(-1)^{i} C^i_n} = 0\\)</li> <li>\\(\\sum_{i=0}^{r}{C^i_r P^{r-i}_m P^i_n} = P^r_{m+n}\\)</li> <li>\\(C^0_n+C^2_n+C^4_n+\\dots =C^1_n+C^3_n+C^5_n+\\dots =2^{n-1}\\)</li> <li>\\(\\sum_{i=0}^{n}{iC^i_n}=n \\cdot 2^{n-1}\\)</li> </ul> <p>\u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a\\((a+b)^n=\\sum_{i=0}^{n}C^i_na^{n-i}b^i=\\sum_{i=0}^{n}C^i_na^ib^{n-i}\\)</p>"},{"location":"note/tricks/stlusage/","title":"STL \u5bb9\u5668\u7528\u6cd5\u6c47\u603b","text":""},{"location":"note/tricks/stlusage/#stl-\u51fd\u6570","title":"STL \u51fd\u6570","text":"<p>\\({\\color{Green} \\texttt{RET}}\\) <code>min(x,y)</code> <code>min({x1,x2,x3,...})</code> \u6c42\u6240\u6709\u5143\u7d20\u7684\u6700\u5c0f\u503c \\({\\color{Green} \\texttt{RET}}\\) <code>max(x,y)</code> <code>max({x1,x2,x3,...})</code> \u6c42\u6240\u6709\u5143\u7d20\u7684\u6700\u5927\u503c</p> <p>\\({\\color{Orange} \\texttt{CHA}}\\) <code>swap(x,y)</code> \u4ea4\u6362\u4e24\u4e2a\u5143\u7d20</p> <p>\\({\\color{Orange} \\texttt{CHA}}\\) <code>sort(ibegin,iend,fcomp)</code> \u4f7f\u7528\u542b\u5feb\u901f\u6392\u5e8f\u7684\u590d\u5408\u6392\u5e8f\u5bf9\u5e8f\u5217\u6392\u5e8f\uff0c\u9ed8\u8ba4\u5347\u5e8f \\({\\color{Orange} \\texttt{CHA}}\\) <code>stable_sort(ibegin,iend,fcomp)</code> \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u5bf9\u5e8f\u5217\u7a33\u5b9a\u6392\u5e8f\uff0c\u9ed8\u8ba4\u5347\u5e8f</p> <p>\\({\\color{Green} \\texttt{RET}}\\) <code>lower_bound(ibegin,iend,x)</code> \u7528\u4e8c\u5206\u67e5\u627e\uff0c\u8fd4\u56de\u6709\u5e8f\u5e8f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u5143\u7d20\u8fed\u4ee3\u5668 \\({\\color{Green} \\texttt{RET}}\\) <code>upper_bound(ibegin,iend,x)</code> \u7528\u4e8c\u5206\u67e5\u627e\uff0c\u8fd4\u56de\u6709\u5e8f\u5e8f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e \\(x\\) \u7684\u5143\u7d20\u8fed\u4ee3\u5668</p> <p>\\({\\color{Green} \\texttt{RET}}\\) <code>find(ibegin,iend,x)</code> \u8fd4\u56de\u533a\u95f4[ibegin,iend)\u7b2c\u4e00\u4e2a\u4e3a \\(x\\) \u7684\u5143\u7d20\u8fed\u4ee3\u5668\uff0c\u672a\u627e\u5230\u5219\u8fd4\u56de \\(iend\\)</p> <p>\\({\\color{Green} \\texttt{RET}}\\) <code>count(ibegin,iend,x)</code> \u8fd4\u56de\u533a\u95f4[ibegin,iend)\u4e2d\u4e3a \\(x\\) \u7684\u5143\u7d20\u6570\u91cf</p> <p>\\({\\color{Orange} \\texttt{CHA}}\\) <code>reverse(ibegin,iend)</code> \u628a\u5e8f\u5217\u7ffb\u8f6c</p> <p>\\({\\color{Orange} \\texttt{CHA}}\\) <code>fill(ibegin,iend,val)</code> \u5c06\u533a\u95f4[ibegin,iend)\u4e2d\u6240\u6709\u5143\u7d20\u8bbe\u4e3a \\(val\\)</p> <p>\\({\\color{Gray} \\texttt{CHA}}\\) <code>unique(ibegin,iend)</code> \u5c06\u8fde\u7eed\u7684\u76f8\u540c\u5143\u7d20\u5408\u5e76\u4e3a\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de \\(iend\\)</p> <p>\\({\\color{Gray} \\texttt{CHA}}\\) <code>nth_element(ibegin,ibegin+k,iend,fcomp)</code> \u4f7f\u533a\u95f4 \\([begin,end)\\) \u7b2c \\(k\\) \u5c0f\u7684\u5143\u7d20\u5904\u5728\u7b2c \\(k\\) \u4e2a\u4f4d\u7f6e\u4e0a\uff0c\u5de6\u8fb9\u5143\u7d20\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5b83\uff0c\u53f3\u8fb9\u5143\u7d20\u90fd\u5927\u4e8e\u6216\u7b49\u4e8e\u5b83\uff0c\u4f46\u5e76\u4e0d\u4fdd\u8bc1\u5176\u4ed6\u5143\u7d20\u6709\u5e8f</p> <p>\\({\\color{Gray} \\texttt{CHA}}\\) <code>next_permutation(ibegin,iend,fcomp)</code> \u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u5168\u6392\u5217\uff0c\u8fd4\u56de bool \u7c7b\u578b\uff1a\u662f\u5426\u6709\u4e0b\u4e00\u4e2a\u5168\u6392\u5217 \\({\\color{Gray} \\texttt{CHA}}\\) <code>prev_permutation(ibegin,iend,fcomp)</code> \u5e8f\u5217\u7684\u4e0a\u4e00\u4e2a\u5168\u6392\u5217\uff0c\u8fd4\u56de bool \u7c7b\u578b\uff1a\u662f\u5426\u6709\u4e0a\u4e00\u4e2a\u5168\u6392\u5217</p> <p>\\({\\color{Gray} \\texttt{CHA}}\\) <code>random_shuffle(ibegin,iend)</code> \u968f\u673a\u6253\u4e71\u5e8f\u5217</p>"},{"location":"note/tricks/stlusage/#stl-\u5bb9\u5668","title":"STL \u5bb9\u5668","text":""},{"location":"note/tricks/stlusage/#\u666e\u901a\u51fd\u6570","title":"\u666e\u901a\u51fd\u6570","text":"<p>\\({\\color{Green} \\texttt{RET}}\\) <code>stl.begin()</code> \u8fd4\u56de\u5bb9\u5668\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 \\({\\color{Green} \\texttt{RET}}\\) <code>stl.end()</code> \u8fd4\u56de\u5bb9\u5668\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u5668</p> <p>\\({\\color{Green} \\texttt{RET}}\\) <code>stl.front()</code> \u8fd4\u56de\u5bb9\u5668\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u503c \\({\\color{Green} \\texttt{RET}}\\) <code>stl.back()</code> \u8fd4\u56de\u5bb9\u5668\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u503c (1)</p> <ol> <li>\u4ee5\u4e0a \\(4\\) \u79cd\u51fd\u6570\u7684\u533a\u522b\u53c2\u89c1\u4e0b\u6587 #\u8fed\u4ee3\u5668\u3002</li> </ol> <p>\\({\\color{Green} \\texttt{RET}}\\) <code>stl.size()</code> \u8fd4\u56de\u5bb9\u5668\u7684\u957f\u5ea6</p> <p>\\({\\color{Gray} \\texttt{CHA}}\\) <code>stl1.swap(stl2)</code> \u4ea4\u6362\u4e24\u5bb9\u5668</p>"},{"location":"note/tricks/stlusage/#\u5e8f\u5217\u5f0f\u5bb9\u5668","title":"\u5e8f\u5217\u5f0f\u5bb9\u5668","text":""},{"location":"note/tricks/stlusage/#vector-\u5411\u91cf","title":"vector \u5411\u91cf","text":"<p>\u5c3e\u90e8\u53ef\u9ad8\u6548\u589e\u52a0\u5143\u7d20\u7684\u987a\u5e8f\u8868</p>"},{"location":"note/tricks/stlusage/#string-\u5b57\u7b26\u4e32","title":"string \u5b57\u7b26\u4e32","text":"<p><code>str.size()</code>\u8fd8\u6709\u5176\u4ed6 STL \u83b7\u53d6\u957f\u5ea6\u90fd\u662f \\(O(1)\\) \uff0c\u800c <code>strlen(a)</code> \u662f \\(O(N)\\)</p> <p>\u4e0d\u5efa\u8bae\u7528 <code>scanf</code> \u8f93\u5165\uff0c\u8f93\u51fa\u4e3a <code>printf(\"%s\",str.c_str());</code></p>"},{"location":"note/tricks/stlusage/#ul-array-\u6570\u7ec4","title":"[UL] array \u6570\u7ec4","text":"<p>\u5b9a\u957f\u7684\u987a\u5e8f\u8868\uff0cC \u98ce\u683c\u6570\u7ec4\u7684\u7b80\u5355\u5305\u88c5</p>"},{"location":"note/tricks/stlusage/#deque-\u53cc\u7aef\u961f\u5217","title":"deque \u53cc\u7aef\u961f\u5217","text":"<p>double ended queue\uff0c\u53cc\u7aef\u90fd\u53ef\u9ad8\u6548\u589e\u52a0\u5143\u7d20\u7684\u987a\u5e8f\u8868</p>"},{"location":"note/tricks/stlusage/#ul-list-\u5217\u8868","title":"[UL] list \u5217\u8868","text":"<p>\u53ef\u4ee5\u6cbf\u53cc\u5411\u904d\u5386\u7684\u94fe\u8868</p> <p>\u4e0edeque\u7528\u6cd5\u57fa\u672c\u76f8\u540c\uff0c\u4f46\u66f4\u64c5\u957f\u975e\u5934\u5c3e\u7684\u63d2\u5165\u548c\u5220\u9664  </p> <ul> <li> \u4f7f\u7528\u6570\u7ec4\u8868\u793a\u6cd5\u548c\u968f\u673a\u8bbf\u95ee</li> <li> \u8fed\u4ee3\u5668\u53cc\u5411\u8bbf\u95ee</li> <li> \u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\uff0c\u64cd\u4f5c\u901f\u5ea6\u90fd\u5f88\u5feb</li> </ul>"},{"location":"note/tricks/stlusage/#ul-forward_list-\u5355\u5411\u5217\u8868","title":"[UL] forward_list \u5355\u5411\u5217\u8868","text":"<p>\u53ea\u80fd\u6cbf\u4e00\u4e2a\u65b9\u5411\u904d\u5386\u7684\u94fe\u8868</p> <p>\u4e0e list \u7c7b\u4f3c\uff0c\u4f46\u51cf\u5c11\u4e86\u5185\u5b58\u5f00\u9500\u3002\u65e0\u53cc\u5411\u904d\u5386\u8981\u6c42\u5efa\u8bae\u66ff\u6362 list \u4e3a forward_list</p>"},{"location":"note/tricks/stlusage/#\u5173\u8054\u5f0f\u5bb9\u5668","title":"\u5173\u8054\u5f0f\u5bb9\u5668","text":""},{"location":"note/tricks/stlusage/#set-\u96c6\u5408","title":"set \u96c6\u5408","text":"<p>\u7528\u4ee5\u6709\u5e8f\u5730\u5b58\u50a8\u4e92\u5f02\u5143\u7d20\u7684\u5bb9\u5668\u3002\u7531\u8282\u70b9\u7ec4\u6210\u7684\u7ea2\u9ed1\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u7740\u4e00\u4e2a\u5143\u7d20\uff0c\u8282\u70b9\u4e4b\u95f4\u4ee5\u67d0\u79cd\u6bd4\u8f83\u5143\u7d20\u5927\u5c0f\u7684 \u8c13\u8bcd(1)\u8fdb\u884c\u6392\u5217</p> <ol> <li>\u8c13\u8bcd\uff1a\u8fd4\u56de\u503c\u4e3a\u771f\u6216\u8005\u5047\u7684\u51fd\u6570\u3002STL \u5bb9\u5668\u4e2d\u7ecf\u5e38\u4f1a\u4f7f\u7528\u5230\u8c13\u8bcd\uff0c\u7528\u4e8e\u6a21\u677f\u53c2\u6570\u3002</li> </ol>"},{"location":"note/tricks/stlusage/#multiset-\u591a\u91cd\u96c6\u5408","title":"multiset \u591a\u91cd\u96c6\u5408","text":"<p>\u7528\u4ee5\u6709\u5e8f\u5730\u5b58\u50a8\u5143\u7d20\u7684\u5bb9\u5668</p>"},{"location":"note/tricks/stlusage/#map-\u6620\u5c04","title":"map \u6620\u5c04","text":"<p>\u7531 {\u952e\uff0c\u503c} \u5bf9\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u4ee5\u67d0\u79cd\u6bd4\u8f83\u952e\u5927\u5c0f\u5173\u7cfb\u7684\u8c13\u8bcd\u8fdb\u884c\u6392\u5217</p>"},{"location":"note/tricks/stlusage/#ul-multimap-\u591a\u91cd\u6620\u5c04","title":"[UL] multimap \u591a\u91cd\u6620\u5c04","text":"<p>\u7531 {\u952e\uff0c\u503c} \u5bf9\u7ec4\u6210\u7684\u591a\u91cd\u96c6\u5408\uff0c\u4ea6\u5373\u5141\u8bb8\u952e\u6709\u76f8\u7b49\u60c5\u51b5\u7684\u6620\u5c04</p>"},{"location":"note/tricks/stlusage/#\u65e0\u5e8f\u5173\u8054\u5f0f\u5bb9\u5668","title":"\u65e0\u5e8f\u5173\u8054\u5f0f\u5bb9\u5668","text":"<p>\u4f7f\u7528\u54c8\u5e0c\u5b9e\u73b0\u7684\u65e0\u5e8f\u5173\u8054\u5f0f\u5bb9\u5668</p> <p><code>unordered_set</code> <code>unordered_multiset</code> \u5143\u7d20\u65e0\u5e8f\uff0c\u53ea\u5173\u5fc3\u5143\u7d20\u662f\u5426\u5b58\u5728</p> <p>\u5173\u4e8e set \u548c unordered_set</p> <p>\u5982\u679c\u4f7f\u7528 set \u6216 unordered_set \u4f1a\u88ab\u5361\u5e38\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u6362\u6210\u53e6\u4e00\u79cd\u3002</p> <p><code>unordered_map</code> <code>unordered_multimap</code> \u952e (key) \u65e0\u5e8f\uff0c\u53ea\u5173\u5fc3\u952e\u4e0e\u503c\u7684\u5bf9\u5e94\u5173\u7cfb</p> <p>\u5173\u4e8e map \u548c multimap</p> <p>unordered_map \u5e76\u6ca1\u6709\u5bf9 pair \u4f5c\u9002\u914d\uff0c\u56e0\u6b64\u4e0d\u80fd\u65b9\u4fbf\u5730\u4f7f\u7528 unordered_map \u5b58\u653e\u53cc\u54c8\u5e0c\u503c\u3002</p>"},{"location":"note/tricks/stlusage/#\u5bb9\u5668\u9002\u914d\u5668","title":"\u5bb9\u5668\u9002\u914d\u5668","text":"<p>\u5bb9\u5668\u9002\u914d\u5668\u5e76\u4e0d\u662f\u5bb9\u5668\uff0c\u4e0d\u5177\u6709\u5bb9\u5668\u7684\u67d0\u4e9b\u7279\u70b9\uff0c\u5982\uff1a\u8fed\u4ee3\u5668\u3001<code>clear()</code> \u51fd\u6570</p>"},{"location":"note/tricks/stlusage/#ul-stack-\u6808","title":"[UL] stack \u6808","text":"<p>\u540e\u8fdb\u5148\u51fa\uff08LIFO\uff09\u7684\u5bb9\u5668\uff0c\u9ed8\u8ba4\u662f\u5bf9deque\u7684\u5305\u88c5</p> <p>from: \u4e00\u6276\u82cf\u4e00</p> <p>STL \u63d0\u4f9b\u4e86 stack \u4f5c\u4e3a\u5c01\u88c5\u597d\u7684\u6808\uff0c\u4f46\u662f\u5176\u5e95\u5c42\u5185\u5b58\u5206\u914d\u903b\u8f91\u662f deque\uff0c\u5e38\u6570\u6781\u5927\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5982\u679c\u5e0c\u671b\u7528 STL \u5b9e\u73b0 stack\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 vector\u3002</p>"},{"location":"note/tricks/stlusage/#queue-\u961f\u5217","title":"queue \u961f\u5217","text":"<p>\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u7684\u5bb9\u5668\uff0c\u9ed8\u8ba4\u662f\u5bf9deque\u7684\u5305\u88c5</p>"},{"location":"note/tricks/stlusage/#priority_queue-\u4f18\u5148\u961f\u5217","title":"priority_queue \u4f18\u5148\u961f\u5217","text":"<p>\u5143\u7d20\u7684\u6b21\u5e8f\u662f\u7531\u4f5c\u7528\u4e8e\u6240\u5b58\u50a8\u7684\u503c\u5bf9\u4e0a\u7684\u67d0\u79cd\u8c13\u8bcd\u51b3\u5b9a\u7684\u7684\u4e00\u79cd\u961f\u5217\uff0c\u9ed8\u8ba4\u662f\u5bf9\u5411\u91cf vector \u7684\u5305\u88c5</p>"},{"location":"note/tricks/stlusage/#\u8fed\u4ee3\u5668","title":"\u8fed\u4ee3\u5668","text":"<p>jpg file | png file | svg file | picture \u00a9 2024 NailFec</p> <p>\\({\\color{Orange} \\texttt{CHA}}\\) <code>advance(it, x)</code> \\(x\\) \u4e3a\u6b63\u5219\u5411\u540e\u79fb\u52a8\uff0c\\(x\\) \u4e3a\u8d1f\u5219\u5411\u524d\u79fb\u52a8</p> <p>\\({\\color{Green} \\texttt{RET}}\\) <code>next(it)</code> \u8fd4\u56de \\(it\\) \u8fed\u4ee3\u5668\u7684\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f46\u4e0d\u6539\u53d8 \\(it\\) \\({\\color{Green} \\texttt{RET}}\\) <code>prev(it)</code> \u8fd4\u56de \\(it\\) \u8fed\u4ee3\u5668\u7684\u4e0a\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f46\u4e0d\u6539\u53d8 \\(it\\)</p> <p>Warning</p> <p>\u5982\u679c\u8003\u8bd5\u4f7f\u7528\u7684 dev-c++ \u4e0d\u80fd\u4f7f\u7528 C++11\uff0c\u5c31\u7528\u4e0d\u4e86 <code>auto</code>\uff0c\u9700\u8981\u5199\u5b8c\u6574\u7684\u8fed\u4ee3\u5668\u540d\uff0c\u5982 <code>vector&lt;int&gt;::iterator</code>\u3002</p> <p>\u540c\u65f6\uff0c\u5faa\u73af\u4e2d\u7684 <code>:</code> \u8fd0\u7b97\u7b26\u4e5f\u4e0d\u80fd\u5728 dev-c++ \u4e0a\u4f7f\u7528\u3002</p> <p>\u56e0\u6b64\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u904d\u5386\u6574\u4e2a\u5e8f\u5217\u7684\u5faa\u73af\u6b63\u5e38\u7684\u5199\u6cd5\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>for(auto it : d)\n    cerr &lt;&lt; it.first &lt;&lt; \" \" &lt;&lt; it.second &lt;&lt; \"\\n\";\n</code></pre> <p>\u4f46\u662f\u7528\u4e0d\u4e86 C++11 \u7684\u8bdd\u9700\u8981\u8fd9\u4e48\u5199\uff1a</p> <pre><code>for(vector&lt;pair&lt;lli, lli&gt; &gt;::iterator it = d.begin(); it != d.end(); it ++)\n    cerr &lt;&lt; (*it).first &lt;&lt; \" \" &lt;&lt; (*it).second &lt;&lt; \"\\n\";\n</code></pre> <p>\u5f53\u7136\uff0c\u8bc4\u6d4b\u4f7f\u7528\u7684\u7248\u672c\u5927\u4e8e\u7b49\u4e8e C++14\uff0c\u4e00\u822c\u53ef\u4ee5\u5728\u7f16\u8bd1\u6307\u4ee4\u4e2d\u52a0\u5165 <code>-std=c++14</code>\u3002</p>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/","title":"\u6570\u7ec4\u7684\u91cd\u590d\u8d4b\u503c","text":"<p>\u8d4b\u503c\u4e00\u4e2a\u6570\u7ec4\u7684\u6bcf\u4e00\u4f4d\uff0c\u53ef\u4ee5\u4f7f\u7528 3 \u79cd\u65b9\u6cd5\uff1a</p> <ul> <li><code>memset</code></li> <li><code>std::fill</code></li> <li>\u624b\u5199 <code>for</code> \u5faa\u73af</li> </ul> <p>\u672c\u6587\u5c06\u6bd4\u8f83\u4e09\u8005\u7684\u4f18\u52a3\uff0c\u5e76\u7ed9\u51fa\u76f8\u5e94\u7684\u793a\u8303 C++ \u4ee3\u7801\u4ee5\u53ca\u6c47\u7f16\u4ee3\u7801\u3002</p>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u7ed3\u8bba","title":"\u7ed3\u8bba","text":"\u65b9\u6cd5 \u5b9e\u73b0\u539f\u7406 \u65e0\u4f18\u5316\u8d4b\u503c\u4e3a\u5b57\u8282\u503c O2 \u4f18\u5316\u8d4b\u503c\u4e3a\u5b57\u8282\u503c \u8d4b\u503c\u4e3a\u5176\u4ed6\u503c <code>memset</code> \u5c06\u5185\u5b58\u5757\u7684\u6bcf\u4e2a\u5b57\u8282\u8bbe\u7f6e\u4e3a\u7279\u5b9a\u7684\u503c \u5e38\u6570 \u5e38\u6570 \u65e0\u6cd5\u5b8c\u6210 <code>std::fill</code> \u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u5143\u7d20\u8d4b\u503c \u7ebf\u6027 \u5e38\u6570 \u7ebf\u6027 \u624b\u5199 <code>for</code> \u5faa\u73af \u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u5143\u7d20\u8d4b\u503c \u7ebf\u6027 \u5e38\u6570 \u7ebf\u6027 <p>\u5f00\u542f O2 \u4f18\u5316\u540e\uff0c<code>std::fill</code> \u6216\u624b\u5199 <code>for</code> \u5faa\u73af\uff0c\u5c06\u6570\u7ec4\u8d4b\u503c\u4e3a\u5b57\u8282\u503c\uff0c\u90fd\u4f1a\u88ab\u4f18\u5316\u4e3a <code>memset</code>\uff0c\u56e0\u6b64\u662f\u5e38\u6570\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u5bf9\u4e8e <code>int</code> \u578b\u6570\u7ec4\uff0c\u5b57\u8282\u503c\u53ea\u6709 \\(0\\) \u548c \\(-1\\)\u3002</p>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u5177\u4f53\u4ee3\u7801","title":"\u5177\u4f53\u4ee3\u7801","text":""},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#memset","title":"memset","text":""},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u793a\u8303-c-\u4ee3\u7801","title":"\u793a\u8303 C++ \u4ee3\u7801","text":"<pre><code>#include &lt;string.h&gt;\nint d[(int)1e6];\n\nint main() {\n    memset(d, -1, sizeof(d));\n    return 0;\n}\n</code></pre>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u6c47\u7f16\u4ee3\u7801","title":"\u6c47\u7f16\u4ee3\u7801","text":"<pre><code>main:\n.LFB17:\n1:  call    __fentry__\n    subq    $40, %rsp    #,\n    .seh_stackalloc 40\n    .seh_endprologue\n # line 4: int main() {\n    call    _monstartup  #\n    call    __main   #\n # line 5:  memset(d, -1, sizeof(d));\n    movl    $4000000, %r8d   #,\n    movl    $-1, %edx    #,\n    leaq    d(%rip), %rcx    #, tmp84\n    call    memset   #\n # line 7: }\n    xorl    %eax, %eax   #\n    addq    $40, %rsp    #,\n    ret \n    .seh_endproc\n    .globl  d\n    .bss\n    .align 32\nd:\n    .space 4000000\n    .def    memset; .scl    2;  .type   32; .endef\n</code></pre>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#stdfill","title":"std::fill","text":""},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u793a\u8303-c-\u4ee3\u7801_1","title":"\u793a\u8303 C++ \u4ee3\u7801","text":"<pre><code>#include &lt;bits/stl_algobase.h&gt;\nint d[(int)1e6];\n\nint main() {\n    std::fill(d, d + (int)1e6, -1);\n    return 0;\n}\n</code></pre>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u8d4b\u503c\u5b57\u8282\u503c\u6c47\u7f16\u4ee3\u7801","title":"\u8d4b\u503c\u5b57\u8282\u503c\u6c47\u7f16\u4ee3\u7801","text":"<pre><code>main:\n.LFB505:\n1:  call    __fentry__\n    subq    $40, %rsp    #,\n    .seh_stackalloc 40\n    .seh_endprologue\n # line 4: int main() {\n    call    _monstartup  #\n    call    __main   #\n # .../MinGW64/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/bits/stl_algobase.h:924:   *__first = __tmp;\n    movl    $4000000, %r8d   #,\n    movl    $255, %edx   #,\n    leaq    d(%rip), %rcx    #, tmp84\n    call    memset   #\n # line 7: }\n    xorl    %eax, %eax   #\n    addq    $40, %rsp    #,\n    ret \n    .seh_endproc\n    .globl  d\n    .bss\n    .align 32\nd:\n    .space 4000000\n    .def    memset; .scl    2;  .type   32; .endef\n</code></pre>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u8d4b\u503c\u975e\u5b57\u8282\u503c\u6c47\u7f16\u4ee3\u7801","title":"\u8d4b\u503c\u975e\u5b57\u8282\u503c\u6c47\u7f16\u4ee3\u7801","text":"<pre><code>main:\n.LFB505:\n1:  call    __fentry__\n    subq    $40, %rsp    #,\n    .seh_stackalloc 40\n    .seh_endprologue\n # line 4: int main() {\n    call    _monstartup  #\n    call    __main   #\n    leaq    d(%rip), %rax    #, __first\n    leaq    4000000(%rax), %rdx  #, tmp86\n    .p2align 4,,10\n    .p2align 3\n.L2:\n # .../MinGW64/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/bits/stl_algobase.h:924:   *__first = __tmp;\n    movl    $1234, (%rax)    #, MEM[(int *)__first_10]\n # .../MinGW64/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/bits/stl_algobase.h:923:       for (; __first != __last; ++__first)\n    addq    $4, %rax     #, __first\n # .../MinGW64/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/bits/stl_algobase.h:923:       for (; __first != __last; ++__first)\n    cmpq    %rdx, %rax   # tmp86, __first\n    jne .L2  #,\n # line 7: }\n    xorl    %eax, %eax   #\n    addq    $40, %rsp    #,\n    ret \n    .seh_endproc\n    .globl  d\n    .bss\n    .align 32\nd:\n    .space 4000000\n</code></pre>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u624b\u5199-for-\u5faa\u73af","title":"\u624b\u5199 for \u5faa\u73af","text":""},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u793a\u8303-c-\u4ee3\u7801_2","title":"\u793a\u8303 C++ \u4ee3\u7801","text":"<pre><code>int d[(int)1e6];\n\nint main() {\n    for(int i = 0; i &lt; (int)1e6; i ++)\n        d[i] = -1;\n    return 0;\n}\n</code></pre>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u8d4b\u503c\u5b57\u8282\u503c\u6c47\u7f16\u4ee3\u7801_1","title":"\u8d4b\u503c\u5b57\u8282\u503c\u6c47\u7f16\u4ee3\u7801","text":"<pre><code>main:\n.LFB0:\n1:  call    __fentry__\n    subq    $40, %rsp    #,\n    .seh_stackalloc 40\n    .seh_endprologue\n # line 3: int main() {\n    call    _monstartup  #\n    call    __main   #\n # line 5:      d[i] = -1;\n    movl    $4000000, %r8d   #,\n    movl    $255, %edx   #,\n    leaq    d(%rip), %rcx    #, tmp84\n    call    memset   #\n # line 7: }\n    xorl    %eax, %eax   #\n    addq    $40, %rsp    #,\n    ret \n    .seh_endproc\n    .globl  d\n    .bss\n    .align 32\nd:\n    .space 4000000\n    .def    memset; .scl    2;  .type   32; .endef\n</code></pre>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u8d4b\u503c\u975e\u5b57\u8282\u503c\u6c47\u7f16\u4ee3\u7801_1","title":"\u8d4b\u503c\u975e\u5b57\u8282\u503c\u6c47\u7f16\u4ee3\u7801","text":"<pre><code>main:\n.LFB0:\n1:  call    __fentry__\n    subq    $40, %rsp    #,\n    .seh_stackalloc 40\n    .seh_endprologue\n # line 3: int main() {\n    call    _monstartup  #\n    call    __main   #\n    leaq    d(%rip), %rax    #, ivtmp.9\n    leaq    4000000(%rax), %rdx  #, _13\n    .p2align 4,,10\n    .p2align 3\n.L2:\n # line 5:      d[i] = 1234;\n    movl    $1234, (%rax)    #, MEM[(int *)_11]\n # line 4:  for(int i = 0; i &lt; (int)1e6; i ++)\n    addq    $4, %rax     #, ivtmp.9\n    cmpq    %rdx, %rax   # _13, ivtmp.9\n    jne .L2  #,\n # line 7: }\n    xorl    %eax, %eax   #\n    addq    $40, %rsp    #,\n    ret \n    .seh_endproc\n    .globl  d\n    .bss\n    .align 32\nd:\n    .space 4000000\n</code></pre>"},{"location":"note/tricks/%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E8%B5%8B%E5%80%BC/#\u6c47\u7f16\u4ee3\u7801\u751f\u6210\u73af\u5883","title":"\u6c47\u7f16\u4ee3\u7801\u751f\u6210\u73af\u5883","text":"<pre><code>GNU C++23 (x86_64-posix-seh-rev1, Built by MinGW-W64 project) version 11.2.0 (x86_64-w64-mingw32)\n    compiled by GNU C version 11.2.0, GMP version 6.2.1, MPFR version 4.1.0, MPC version 1.2.1, isl version isl-0.24-GMP\n\nGGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072\noptions passed: -m64 -mtune=core2 -march=nocona -O2 -std=c++23 -p\n</code></pre> <p>\u6ce8\uff1a\u4e0a\u8ff0\u6c47\u7f16\u4ee3\u7801\u53ea\u662f\u6458\u53d6\u4e86\u90e8\u5206\u4e3b\u8981\u7684\u4ee3\u7801\u3002</p>"},{"location":"%E5%85%B6%E4%BB%96/NOI%E7%B3%BB%E5%88%97%E6%AF%94%E8%B5%9B%E9%85%8D%E7%BD%AE/","title":"NOI \u7cfb\u5217\u6bd4\u8d5b\u914d\u7f6e","text":""},{"location":"%E5%85%B6%E4%BB%96/NOI%E7%B3%BB%E5%88%97%E6%AF%94%E8%B5%9B%E9%85%8D%E7%BD%AE/#\u80fd\u5426\u4f7f\u7528\u67d0\u5199\u6cd5","title":"\u80fd\u5426\u4f7f\u7528\u67d0\u5199\u6cd5","text":"<ol> <li><code>bits/stdc++.h</code>\uff1a\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u6ce8\u610f\u6807\u8bc6\u7b26\u51b2\u7a81\u95ee\u9898\uff0c\u5982 <code>y1</code> <code>next</code> \u7b49\u3002</li> <li><code>__int128</code>\uff1a\u4e0d\u5efa\u8bae\u4f7f\u7528\uff0c\u4e0d\u80fd\u4f7f\u7528 <code>cin</code> <code>scanf</code> \u8bfb\u5165\uff0c\u4e0d\u80fd\u4f7f\u7528 <code>cout</code> <code>printf</code> \u8f93\u51fa\u3002</li> <li><code>#define int long long</code>\uff1a\u4e0d\u5efa\u8bae\u4f7f\u7528\uff0c\u5bf9\u5173\u952e\u8bcd\u8fdb\u884c\u5b8f\u5b9a\u4e49\u662f\u672a\u5b9a\u4e49\u7684\u64cd\u4f5c\u3002</li> <li><code>ios::sync_with_stdio(false); cin.tie(0);</code>\uff1a\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u9700\u8981\uff1a\u4ec5\u4f7f\u7528 C++ \u98ce\u683c IO\uff1b\u4e14\u5728\u6700\u540e\u5237\u65b0\u7f13\u51b2\u533a\u3002</li> <li><code>fclose(file.in);</code>\uff1a\u4e0d\u5efa\u8bae\u4f7f\u7528\uff0c\u82e5\u8981\u4f7f\u7528\u4e00\u5b9a\u8981\u63d0\u524d\u5237\u65b0\u7f13\u51b2\u533a\u3002</li> <li><code>__gcd()</code>\uff1a\u53ef\u4ee5\u4f7f\u7528\uff1b<code>gcd()</code>\uff1aC++ 14 \u4e0d\u53ef\u4ee5\u4f7f\u7528\u3002</li> <li><code>#pragma GCC optimize(2)</code>\uff1aCCF \u660e\u786e\u89c4\u5b9a\u4e0d\u53ef\u4ee5\u4f7f\u7528\u3002</li> <li><code>exit(0)</code>\uff1a\u53ef\u4ee5\u4f7f\u7528\uff0c\u4e0e <code>return 0;</code> \u6548\u679c\u4e00\u81f4\uff0c\u4e14\u53ef\u4ee5\u5728\u975e\u4e3b\u51fd\u6570\u4e2d\u9000\u51fa\u8fd0\u884c\uff0c\u5e76\u4e14\u7b26\u5408 CCF \u89c4\u5b9a\u201c\u4e3b\u51fd\u6570\u8fd4\u56de\u503c\u4e3a \\(0\\)\u201d\u3002</li> <li><code>register</code> <code>inline</code>\uff1a\u4e0d\u5efa\u8bae\u4f7f\u7528\uff0c\u5728 C++ 14 \u4e2d\u6ca1\u6709\u5b9e\u9645\u6548\u679c\u3002<code>static</code> \u53ef\u4ee5\u4f7f\u7528\u3002</li> <li>C++ 14 \u53ca\u4e4b\u524d\u7684\u65b0\u7279\u6027\uff1a\u53ef\u4ee5\u4f7f\u7528\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u4e3a C++ 14\uff0c\u89c1\u4e0b\u6587\u7ae0\u8282 #\u7f16\u8bd1\u9009\u9879\u3002</li> </ol>"},{"location":"%E5%85%B6%E4%BB%96/NOI%E7%B3%BB%E5%88%97%E6%AF%94%E8%B5%9B%E9%85%8D%E7%BD%AE/#\u7f16\u8bd1\u9009\u9879","title":"\u7f16\u8bd1\u9009\u9879","text":"<p>CCF \u5728 NOIP \u8bc4\u6d4b\u673a\u7684\u7f16\u8bd1\u9009\u9879\uff1a<code>g++ a.cpp -o a -lm</code> \u5efa\u8bae\u7684\u7f16\u8bd1\u9009\u9879\uff1a<code>-std=c++14 -Wall -Wextra -Wl,--stack=268435456 -O</code></p> <ol> <li><code>-std=c++14</code>\uff0c\u4f7f\u7528 C++ 14 \u65b0\u7279\u6027\uff08NOI \u7cfb\u5217\u8bc4\u6d4b\u7cfb\u7edf\u4e3a C++ 14\uff09\u3002    \u5982\u679c\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\uff0c\u4f1a\u5bfc\u81f4\u6b64\u547d\u4ee4\u62a5\u9519\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528 <code>-std=c++11</code>\uff0c\u4e5f\u5305\u542b\u4e86\u5927\u90e8\u5206\u5b9e\u7528\u7684\u7279\u6027\uff0c\u5982 <code>auto</code> <code>for(int x : d)</code> \u7b49\uff0c\u6216\u5b89\u88c5 \u6b64\u7248\u672c \u7684Dev-C++\u3002</li> <li><code>-Wl,--stack=268435456</code>\uff0c\u5c06\u6808\u7a7a\u95f4\u786e\u5b9a\u4e3a 256MB\u3002</li> <li><code>-Wall</code> <code>-Wextra</code>\uff0c\u5f00\u542f\u66f4\u591a\u8b66\u544a\u4fe1\u606f\uff0c\u5982 <code>long long</code> \u53d8\u91cf\u4f7f\u7528 <code>%lld</code> \u8bfb\u5165\u548c\u8f93\u51fa\u3001\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u3001\u903b\u8f91\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u3001\u591a\u4e2a <code>if</code> \u4e0e <code>else</code> \u914d\u5bf9\u95ee\u9898\u3001\u8bed\u53e5 <code>if(a=1)</code> \u7b49\u3002</li> <li><code>-Ox</code>\uff0c\u5f00\u542f Ox \u4f18\u5316\uff0cNOIP \u8bc4\u6d4b\u673a\u4e3a <code>-O</code>\uff0cNOI \u8bc4\u6d4b\u673a\u4e3a <code>-O2</code>\u3002</li> <li><code>-DXXX</code>\uff0c\u81ea\u5b9a\u4e49\u6807\u8bc6\u7b26\uff0c\u4e0e <code>#define XXX</code> \u6548\u679c\u7c7b\u4f3c\u3002</li> <li><code>-g</code>\uff0c\u8981\u624b\u52a8\u8c03\u8bd5\u9700\u8981\u6253\u5f00\u3002</li> </ol> <p>\u6ce8\uff1a<code>-fsanitize=undefined</code>\uff0c\u68c0\u6d4b\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\uff0c\u4f46 NOI \u7cfb\u5217\u6bd4\u8d5b\u5e76\u4e0d\u652f\u6301\uff0c\u4e0d\u8fc7\u8bb8\u591a\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u5728 <code>-Wall</code> <code>-Wextra</code> \u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u3002</p> \u6d4b\u8bd5\u4ee5\u4e0a\u7f16\u8bd1\u9009\u9879 <p>\u914d\u7f6e\u597d\u7f16\u8bd1\u9009\u9879\u4e4b\u540e\uff0c\u590d\u5236\u4ee5\u4e0b\u4ee3\u7801\u5e76\u7f16\u8bd1\u8fd0\u884c\uff1a</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvector&lt;int&gt; d = {0, 1, 2, 3, 4};\n\nbool f(int x) {\n    if(x == 1) return true;\n}\n\nint main() {\n    int a;\n    if(a == 1) printf(\"1\\n\");\n    a = 0;\n    if(a = 1) printf(\"2\\n\");\n    if(a == 2) printf(\"3\\n\");\n    else printf(\"4\\n\");\n    for(auto x : d) printf(\"%d \", x);\n    bool b = f(1);\n    return 0;\n}\n</code></pre> <p>\u5982\u56fe\uff0c\u82e5\u652f\u6301 C++ 11 \u7684\u65b0\u7279\u6027\uff0c\u5e76\u4e14\u76f8\u5173\u8b66\u544a\u4e5f\u90fd\u6b63\u786e\u63d0\u793a\uff0c\u5219\u914d\u7f6e\u6b63\u5e38\u3002</p> <p></p>"},{"location":"%E5%85%B6%E4%BB%96/NOI%E7%B3%BB%E5%88%97%E6%AF%94%E8%B5%9B%E9%85%8D%E7%BD%AE/#\u5173\u4e8e-dev-c","title":"\u5173\u4e8e Dev-C++","text":"<ol> <li>Dev-C++ \u51e0\u4e4e\u6ca1\u6709\u4ee3\u7801\u8865\u5168\uff0c\u56e0\u6b64\u7279\u522b\u9700\u8981\u6ce8\u610f\u7ecf\u5e38\u4f9d\u8d56\u4ee3\u7801\u8865\u5168\u7684\u51fd\u6570\u540d\uff0c\u5982\u4e0d\u540c STL \u7684\u5934\u5c3e\u5143\u7d20\u548c\u653e\u5165\u53d6\u51fa\u64cd\u4f5c\u7684\u51fd\u6570\u540d\uff0c\u4ee5\u53ca\u5f88\u957f\u7684\u51fd\u6570\u540d\uff0c\u5982 <code>next_permutation</code> <code>setprecision</code> \u7b49\u3002</li> <li>\u5982\u679c\u4e0d\u80fd\u8c03\u8bd5\uff0c\u5efa\u8bae\u4e0d\u8c03\u8bd5\uff0c\u68c0\u67e5\u7f16\u8bd1\u9009\u9879\u662f\u5426\u4e3a <code>debug</code> \u800c\u4e0d\u662f <code>release</code>\uff0c\u751f\u6210\u4ee3\u7801\u6027\u80fd\u5206\u6790\u662f\u5426\u4e3a <code>Yes</code>\uff0c\u4ea7\u751f\u8c03\u8bd5\u4fe1\u606f\u662f\u5426\u4e3a <code>Yes</code>\u3002</li> <li>\u5efa\u8bae\u5f00\u542f\u81ea\u52a8\u4fdd\u5b58\uff0c\u4e14\u624b\u52a8\u5907\u4efd\u6587\u4ef6\u5230\u5176\u4ed6\u6587\u4ef6\u5939\uff0c\u9632\u6b62\u7c7b\u4f3c\u7f16\u8bd1\u547d\u4ee4\u6253\u9519\u5bfc\u81f4\u6e90\u7801\u88ab\u8986\u76d6\u7b49\u95ee\u9898\u3002\u7279\u522b\u5730\uff0c\u5927\u6bb5\u6ca1\u7528\u7684\u4ee3\u7801\u5efa\u8bae\u6682\u5b58\u5230\u5176\u4ed6\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5220\u9664\u3002</li> </ol> <p>\u53c2\u8003\u8d44\u6599\u548c\u63a8\u8350\u9605\u8bfb\uff1a</p> <ol> <li>\u547d\u4ee4\u884c - OI wiki</li> <li>OIer \u5fc5\u77e5\u7684\u7f16\u7a0b\u6280\u5de7 - \u6d1b\u8c37\u6587\u7ae0(StudyingFather)</li> <li>OI\u9009\u624b\u5e38\u89c1\u4f5c\u6b7b\u9519\u8bef\u5217\u8868 - \u6d1b\u8c37\u6587\u7ae0(StudyingFather)</li> <li>NOI \u7cfb\u5217\u8d5b\u5e38\u89c1\u6280\u672f\u95ee\u9898\u6574\u7406 - \u6d1b\u8c37\u6587\u7ae0(StudyingFather)</li> <li>\u5173\u4e8e C++ \u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u4e00\u4e9b\u4e8b - \u6d1b\u8c37\u6587\u7ae0(StudyingFather)</li> <li>gcc/g++ \u7f16\u8bd1\u9009\u9879\u8be6\u89e3 - CSDN(moneymyone)</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/","title":"\u8d2a\u5fc3\u7b97\u6cd5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u4f8b\u9898","title":"\u4f8b\u9898","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u6d3b\u52a8\u5b89\u6392","title":"\u6d3b\u52a8\u5b89\u6392","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10000. \u300c\u4e00\u672c\u901a 1.1 \u4f8b 1\u300d\u6d3b\u52a8\u5b89\u6392\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef pair&lt;lli, lli&gt; pii;\nconst int MAXn = 1e3 + 9;\nvector&lt;pii&gt; d;\n\nbool cmp(const pii &amp; x, const pii &amp; y) {\n    if(x.second == y.second) return x.first &lt; y.first;\n    return x.second &lt; y.second;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i ++) {\n        lli ia, ib;\n        scanf(\"%lld%lld\", &amp;ia, &amp;ib);\n        d.push_back({ia, ib});\n    }\n    sort(d.begin(), d.end(), cmp);\n    int ans = 0, last = -1;\n    for(pii x : d)\n        if(x.first &gt;= last) ans ++, last = x.second;\n    printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u79cd\u6811","title":"\u79cd\u6811","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10001. \u300c\u4e00\u672c\u901a 1.1 \u4f8b 2\u300d\u79cd\u6811\n// P1250 \u79cd\u6811\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef tuple&lt;lli, lli, lli&gt; tup;\nconst int MAXn = 3e4 + 9;\nvector&lt;tup&gt; d;\nbool ped[MAXn];\n\nbool cmp(const tup &amp; x, const tup &amp; y) {\n    if(get&lt;1&gt;(x) == get&lt;1&gt;(y)) {\n        if(get&lt;0&gt;(x) == get&lt;0&gt;(y)) return get&lt;2&gt;(x) &gt; get&lt;2&gt;(y);\n        return get&lt;0&gt;(x) &lt; get&lt;0&gt;(y);\n    }\n    return get&lt;1&gt;(x) &lt; get&lt;1&gt;(y);\n}\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= m; i ++) {\n        lli ia, ib, ic;\n        scanf(\"%lld%lld%lld\", &amp;ia, &amp;ib, &amp;ic);\n        d.push_back({ia, ib, ic});\n    }\n    sort(d.begin(), d.end(), cmp);\n    int ans = 0;\n    for(tup x : d) {\n        int nped = 0, need = get&lt;2&gt;(x);\n        for(int i = get&lt;0&gt;(x); i &lt;= get&lt;1&gt;(x); i ++)\n            if(ped[i]) {\n                nped ++;\n                if(nped &gt;= need) break;\n            }\n        if(nped &gt;= need) continue;\n        int last = need - nped;\n        for(int i = get&lt;1&gt;(x); i &gt;= get&lt;0&gt;(x); i --)\n            if(!ped[i]) {\n                ped[i] = true;\n                ans ++;\n                last --;\n                if(!last) break;\n            }\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u55b7\u6c34\u88c5\u7f6e","title":"\u55b7\u6c34\u88c5\u7f6e","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10002. \u300c\u4e00\u672c\u901a 1.1 \u4f8b 3\u300d\u55b7\u6c34\u88c5\u7f6e\n// UVA10382 Watering Grass\n#include &lt;bits/stdc++.h&gt;\n#define ld long double\nusing namespace std;\ntypedef pair&lt;ld, ld&gt; pdd;\nvector&lt;pdd&gt; d;\n\nbool cmp(const pdd &amp; x, const pdd &amp; y) {\n    return x.first &lt; y.first;\n}\n\nint main() {\n    int T;\n    scanf(\"%d\", &amp;T);\n    for(int _ = 1; _ &lt;= T; _ ++) {\n        d.clear();\n        int n = 0, tms, l, w;\n        scanf(\"%d%d%d\", &amp;tms, &amp;l, &amp;w);\n        for(int i = 1, p, r; i &lt;= tms; i ++) {\n            scanf(\"%d%d\", &amp;p, &amp;r);\n            if(2 * r &lt;= w) continue;\n            ld ll = sqrt(r * r - w * w / (ld)4.0);\n            d.push_back({p - ll, p + ll});\n            n ++;\n        }\n        sort(d.begin(), d.end(), cmp);\n        bool flg = false;\n        int ans = 0, x = 0;\n        ld p = 0;\n        while(p &lt; l) {\n            ld fp = -1;\n            for(; x &lt; n &amp;&amp; d[x].first &lt;= p; x ++) {\n                if(d[x].first &lt;= p &amp;&amp; p &lt;= d[x].second)\n                    fp = max(fp, d[x].second);\n            }\n            if(fp == -1) {\n                flg = true;\n                break;\n            }\n            ans ++;\n            p = fp;\n        }\n        if(flg) {\n            printf(\"-1\\n\");\n            continue;\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u52a0\u5de5\u751f\u4ea7\u8c03\u5ea6","title":"\u52a0\u5de5\u751f\u4ea7\u8c03\u5ea6","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10003. \u300c\u4e00\u672c\u901a 1.1 \u4f8b 4\u300d\u52a0\u5de5\u751f\u4ea7\u8c03\u5ea6\n// P1248 \u52a0\u5de5\u751f\u4ea7\u8c03\u5ea6\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int MAXn = 1e3 + 9;\nint d1[MAXn], d2[MAXn];\nvector&lt;int&gt; n1, n2;\n\nbool cmp1(const int &amp; x, const int &amp; y) {\n    return d1[x] &lt; d1[y];\n}\n\nbool cmp2(const int &amp; x, const int &amp; y) {\n    return d2[x] &gt; d2[y];\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d1[i]);\n    for(int i = 1, ib; i &lt;= n; i ++) {\n        scanf(\"%d\", &amp;d2[i]);\n        if(d1[i] &lt; d2[i]) n1.push_back(i);\n        else n2.push_back(i);\n    }\n    sort(n1.begin(), n1.end(), cmp1);\n    sort(n2.begin(), n2.end(), cmp2);\n    lli a = 0, b = 0;\n    for(auto i : n1) {\n        a += d1[i];\n        if(b &lt; a) b = a;\n        b += d2[i];\n    }\n    for(auto i : n2) {\n        a += d1[i];\n        if(b &lt; a) b = a;\n        b += d2[i];\n    }\n    printf(\"%lld\\n\", max(a, b));\n    for(auto i : n1) printf(\"%d \", i);\n    for(int p = 0; p &lt; n2.size() - 1; p ++) printf(\"%d \", n2[p]);\n    printf(\"%d\", n2[n2.size() - 1]);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u667a\u529b\u5927\u51b2\u6d6a","title":"\u667a\u529b\u5927\u51b2\u6d6a","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10004. \u300c\u4e00\u672c\u901a 1.1 \u4f8b 5\u300d\u667a\u529b\u5927\u51b2\u6d6a\n// P1230 \u667a\u529b\u5927\u51b2\u6d6a\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int MAXn = 500 + 9;\nbool ved[MAXn];\nvector&lt;pii&gt; d;    // first: deadline; second: v\n\nbool cmp(const pii &amp; x, const pii &amp; y) {\n    if(x.second == y.second) return x.first &gt; y.first;\n    return x.second &gt; y.second;\n}\n\nint main() {\n    int m, n;\n    scanf(\"%d%d\", &amp;m, &amp;n);\n    for(int i = 0, ia; i &lt; n; i ++) {\n        scanf(\"%d\", &amp;ia);\n        d.push_back({ia, 0});\n    }\n    for(int i = 0; i &lt; n; i ++) {\n        scanf(\"%d\", &amp;d[i].second);\n    }\n    sort(d.begin(), d.end(), cmp);\n    for(int i = 0; i &lt; n; i ++) {\n        int dl = d[i].first;\n        bool can = false;\n        for(int t = dl; t &gt;= 1; t --)\n            if(!ved[t]) {\n                ved[t] = true;\n                can = true;\n                break;\n            }\n        if(!can) {\n            m -= d[i].second;\n        }\n    }\n    printf(\"%d\", m);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u7ec3\u4e60\u9898","title":"\u7ec3\u4e60\u9898","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u6570\u5217\u6781\u5dee","title":"\u6570\u5217\u6781\u5dee","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10005. \u300c\u4e00\u672c\u901a 1.1 \u7ec3\u4e60 1\u300d\u6570\u5217\u6781\u5dee\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 5e4 + 9;\nint d[MAXn];\npriority_queue&lt;int&gt; xgd;\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; dgd;\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    if(n == 0) return 0 * printf(\"0\");\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]),\n        xgd.push(d[i]),\n        dgd.push(d[i]);\n    while(xgd.size() != 1) {\n        int a = xgd.top(); xgd.pop();\n        int b = xgd.top(); xgd.pop();\n        xgd.push(a * b + 1);\n        a = dgd.top(); dgd.pop();\n        b = dgd.top(); dgd.pop();\n        dgd.push(a * b + 1);\n    }\n    printf(\"%d\", dgd.top() - xgd.top());\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u6570\u5217\u5206\u6bb5","title":"\u6570\u5217\u5206\u6bb5","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10006. \u300c\u4e00\u672c\u901a 1.1 \u7ec3\u4e60 2\u300d\u6570\u5217\u5206\u6bb5\n// P1181 \u6570\u5217\u5206\u6bb5 Section I\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\n\nint main() {\n    int n, mx;\n    scanf(\"%d%d\", &amp;n, &amp;mx);\n    lli addi = 0, ans = 0;\n    for(int i = 1, ia; i &lt;= n; i ++) {\n        scanf(\"%d\", &amp;ia);\n        addi += ia;\n        if(addi &gt; mx) {\n            addi = ia;\n            ans ++;\n        }\n    }\n    if(addi) ans ++;\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u7ebf\u6bb5","title":"\u7ebf\u6bb5","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10007. \u300c\u4e00\u672c\u901a 1.1 \u7ec3\u4e60 3\u300d\u7ebf\u6bb5\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nvector&lt;pii&gt; d;\n\nbool cmp(const pii &amp; x, const pii &amp; y) {\n    return x.second &lt; y.second;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia, ib; i &lt;= n; i ++) {\n        scanf(\"%d%d\", &amp;ia, &amp;ib);\n        if(ia &gt; ib) swap(ia, ib);\n        d.push_back({ia, ib});\n    }\n    sort(d.begin(), d.end(), cmp);\n    int last = -1, ans = 0;\n    for(pii x : d) {\n        if(x.first &gt;= last) {\n            last = x.second;\n            ans ++;\n        }\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u5bb6\u5ead\u4f5c\u4e1a","title":"\u5bb6\u5ead\u4f5c\u4e1a","text":"<p>\u6b64\u7c7b\u8d2a\u5fc3\u9898\uff0c\u4e0d\u540c\u65b9\u6cd5\u5206\u6790\uff0c\u89c1 \u9898\u76ee\u5206\u4eab / LOJ10008\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u6cd5-1","title":"\u6cd5 1","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10008. \u300c\u4e00\u672c\u901a 1.1 \u7ec3\u4e60 4\u300d\u5bb6\u5ead\u4f5c\u4e1a\n// 100 AC \u6cd51\uff1a\u679a\u4e3e\u6240\u6709\u65f6\u95f4\uff0c\u5e76\u653e\u5165\u80fd\u653e\u5165\u7684\u5143\u7d20\u4e2d\u5956\u52b1\u6570\u6700\u5927\u7684 [https://loj.ac/s/2134260]\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 1e6 + 9;\nvector&lt;int&gt; d[MAXn];    // d[x]: \u6b7b\u7ebf\u4e3a x \u7684\u6240\u6709\u5956\u52b1\npriority_queue&lt;int&gt; pq;\n\nint main() {\n    int n, maxdl = 1;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia, ib; i &lt;= n; i ++) {\n        scanf(\"%d%d\", &amp;ia, &amp;ib);\n        d[ia].push_back(ib);\n        maxdl = max(maxdl, ia);\n    }\n    lli ans = 0;\n    for(int i = maxdl; i &gt;= 1; i --) {\n        for(int v : d[i]) pq.push(v);\n        if(!pq.empty()) ans += pq.top(), pq.pop();\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u6cd5-2","title":"\u6cd5 2","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10008. \u300c\u4e00\u672c\u901a 1.1 \u7ec3\u4e60 4\u300d\u5bb6\u5ead\u4f5c\u4e1a\n// 80 TLE \u6cd52\uff1a\u6309\u7167\u5956\u52b1\u5927\u5c0f\u6392\u5e8f\uff0c\u4f18\u5148\u5b89\u6392\u5956\u52b1\u6570\u6700\u5927\u7684\uff0c\u4e14\u5c3d\u91cf\u9760\u540e\u5730\u5b89\u6392 [https://loj.ac/s/2134292]\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int MAXn = 1e6 + 9;\nbool ved[MAXn];\nvector&lt;pii&gt; d;    // first: deadline; second: v\n\nbool cmp(const pii &amp; x, const pii &amp; y) {\n    if(x.second == y.second) return x.first &gt; y.first;\n    return x.second &gt; y.second;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia, ib; i &lt;= n; i ++) {\n        scanf(\"%d%d\", &amp;ia, &amp;ib);\n        d.push_back({ia, ib});\n    }\n    sort(d.begin(), d.end(), cmp);\n    lli ans = 0;\n    for(pii x : d) {\n        for(int i = x.first; i &gt;= 1; i --)\n            if(!ved[i]) {\n                ved[i] = true;\n                ans += x.second;\n                break;\n            }\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u6cd5-3","title":"\u6cd5 3","text":"<pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10008. \u300c\u4e00\u672c\u901a 1.1 \u7ec3\u4e60 4\u300d\u5bb6\u5ead\u4f5c\u4e1a\n// 100 AC \u6cd53\uff1a\u4f7f\u7528\u53cd\u6094\u8d2a\u5fc3\uff1a\u6309\u7167\u622a\u6b62\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u653e\u4e0d\u4e0b\u5c1d\u8bd5\u66ff\u6362\u653e\u597d\u7684\u5143\u7d20\u4e2d\u5956\u52b1\u6700\u5c0f\u7684 [https://loj.ac/s/2134430]\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int MAXn = 1e6 + 9;\nconst int MAXdl = 7e5 + 9;\npriority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt; &gt; pq;    // first: v; second: time\nvector&lt;pii&gt; d;    // first: deadline; second: v\n\nbool cmp(const pii &amp; x, const pii &amp; y) {\n    if(x.first == y.first) return x.second &gt; y.second;\n    return x.first &lt; y.first;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia, ib; i &lt;= n; i ++) {\n        scanf(\"%d%d\", &amp;ia, &amp;ib);\n        d.push_back({ia, ib});\n    }\n    sort(d.begin(), d.end(), cmp);\n    lli ans = 0;\n    int t = 1;\n    for(pii x : d) {\n        if(x.first &lt; t) {\n            if(!pq.empty() &amp;&amp; pq.top().first &lt; x.second) {\n                int tt = pq.top().second;\n                ans -= pq.top().first;\n                pq.pop();\n                pq.push({x.second, tt});\n                ans += x.second;\n            }\n            else continue;\n        }\n        else {\n            pq.push({x.second, t});\n            ans += x.second;\n            t ++;\n        }\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u9493\u9c7c","title":"\u9493\u9c7c","text":"<p>\u6b64\u9898\u4ea6\u53ef\u7528 dp \u5b8c\u6210\u3002</p> <pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10009. \u300c\u4e00\u672c\u901a 1.1 \u7ec3\u4e60 5\u300d\u9493\u9c7c\n// P1717 \u9493\u9c7c\n// \u4f7f\u7528\u8d2a\u5fc3\u7684\u505a\u6cd5\u3002\u6b64\u9898\u4ea6\u53ef\u7528 dp \u5b8c\u6210\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef pair&lt;lli, int&gt; pii;\nconst int MAXn = 25 + 9;\nlli d[MAXn], adc[MAXn], js[MAXn];\npriority_queue&lt;pii&gt; pq;\n\nvoid pqclear() {\n    while(!pq.empty()) pq.pop();\n}\n\nvoid pqini(int nd) {\n    for(int i = 1; i &lt;= nd; i ++)\n        pq.push({d[i], i});\n}\n\nint main() {\n    int n; lli h;\n    scanf(\"%d%lld\", &amp;n, &amp;h);\n    h *= 12;\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%lld\", &amp;d[i]);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%lld\", &amp;js[i]);\n    for(int i = 1, c; i &lt;= n - 1; i ++)\n        scanf(\"%d\", &amp;c),\n        adc[i] = adc[i - 1] + c;\n    lli aans = 0;\n    for(int nd = 1; nd &lt;= n; nd ++) {\n        lli nh = h - adc[nd - 1], ans = 0;\n        if(nh &lt;= 0) continue;\n        pqclear(); pqini(nd);\n        for(int t = 1; t &lt;= nh &amp;&amp; pq.top().first &gt;= 0; t ++) {\n            pii now = pq.top();\n            pq.pop();\n            if(now.first &gt;= 0) {\n                ans += now.first;\n                now.first -= js[now.second];\n                pq.push(now);\n            }\n        }\n        aans = max(aans, ans);\n    }\n    printf(\"%lld\", aans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#\u7cd6\u679c\u4f20\u9012","title":"\u7cd6\u679c\u4f20\u9012","text":"<p>\\(n\\) \u8f83\u5c0f\u65f6\uff0c\u4ea6\u53ef\u7528 \u7f51\u7edc\u6d41 \u5b8c\u6210\uff0c\u89c1 \u6d1b\u8c37 P4016 \u8d1f\u8f7d\u5e73\u8861\u95ee\u9898\u3002</p> <pre><code>// \u4e00 \u57fa\u7840\u7b97\u6cd5 | 1 \u8d2a\u5fc3\u7b97\u6cd5\n// #10010. \u300c\u4e00\u672c\u901a 1.1 \u7ec3\u4e60 6\u300d\u7cd6\u679c\u4f20\u9012\n// P2512 [HAOI2008] \u7cd6\u679c\u4f20\u9012\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 1e6 + 9;\nlli a[MAXn];\nvector&lt;lli&gt; v;\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia; i &lt;= n; i ++) {\n        scanf(\"%d\", &amp;ia);\n        a[i] = a[i - 1] + ia;\n    }\n    lli avg = a[n] / n;\n    for(int i = 1; i &lt;= n; i ++)\n        v.push_back(a[i - 1] - avg * (i - 1));\n    sort(v.begin(), v.end());\n    lli x1 = v[n / 2];\n    lli ans = 0;\n    for(lli p : v) ans += abs(x1 - p);\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%B9%82/","title":"\u5feb\u901f\u5e42","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%B9%82/#\u4f8b\u9898","title":"\u4f8b\u9898","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%B9%82/#\u5e8f\u5217\u7684\u7b2c-k-\u4e2a\u6570","title":"\u5e8f\u5217\u7684\u7b2c k \u4e2a\u6570","text":"<pre><code>// \u516d \u6570\u5b66\u57fa\u7840 | 1 \u5feb\u901f\u5e42\n// #10193. \u300c\u4e00\u672c\u901a 6.1 \u4f8b 1\u300d\u5e8f\u5217\u7684\u7b2c k \u4e2a\u6570\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst lli p = 200907;\n\nlli qpow(lli x, lli y) {\n    lli ans = 1;\n    while(y) {\n        if(y &amp; 1) (ans *= x) %= p;\n        (x *= x) %= p;\n        y &gt;&gt;= 1;\n    }\n    return ans;\n}\n\nint main() {\n    int T;\n    scanf(\"%d\", &amp;T);\n    for(int i = 1; i &lt;= T; i ++) {\n        lli a, b, c, n;\n        scanf(\"%lld%lld%lld%lld\", &amp;a, &amp;b, &amp;c, &amp;n);\n        if(a + c == b + b) {\n            lli d = b - a;\n            printf(\"%lld\\n\", a + (n - 1) % p * d % p);\n        } else {\n            lli q = b / a;\n            printf(\"%lld\\n\", a * qpow(q, n - 1) % p);\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%B9%82/#\u7ec3\u4e60\u9898","title":"\u7ec3\u4e60\u9898","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%B9%82/#a-\u7684-b-\u6b21\u65b9","title":"A \u7684 B \u6b21\u65b9","text":"<pre><code>// \u516d \u6570\u5b66\u57fa\u7840 | 1 \u5feb\u901f\u5e42\n// #10194. \u300c\u4e00\u672c\u901a 6.1 \u7ec3\u4e60 1\u300dA \u7684 B \u6b21\u65b9\n// P1226 \u3010\u6a21\u677f\u3011\u5feb\u901f\u5e42\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nlli p;\n\nlli qpow(lli x, lli y) {\n    lli ans = 1;\n    while(y) {\n        if(y &amp; 1) (ans *= x) %= p;\n        (x *= x) %= p;\n        y &gt;&gt;= 1;\n    }\n    return ans;\n}\n\nint main() {\n    lli x, y;\n    scanf(\"%lld%lld%lld\", &amp;x, &amp;y, &amp;p);\n    printf(\"%lld\", qpow(x, y));\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%B9%82/#\u8f6c\u5708\u6e38\u620f","title":"\u8f6c\u5708\u6e38\u620f","text":"<pre><code>// \u516d \u6570\u5b66\u57fa\u7840 | 1 \u5feb\u901f\u5e42\n// #10195. \u300c\u4e00\u672c\u901a 6.1 \u7ec3\u4e60 2\u300d\u8f6c\u5708\u6e38\u620f\n// P1965 [NOIP2013 \u63d0\u9ad8\u7ec4] \u8f6c\u5708\u6e38\u620f\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\n\nlli qpow(int x, int y, int p) {\n    lli ans = 1;\n    while(y) {\n        if(y &amp; 1) (ans *= x) %= p;\n        (x *= x) %= p;\n        y &gt;&gt;= 1;\n    }\n    return ans;\n}\n\nint main() {\n    lli n, m, k, K, x;\n    scanf(\"%lld%lld%lld%lld\", &amp;n, &amp;m, &amp;k, &amp;x);\n    K = qpow(10, k, n);\n    // (x + mK) % n\n    printf(\"%lld\", (x % n + m * K % n) % n);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%B9%82/#\u8d8a\u72f1","title":"\u8d8a\u72f1","text":"<pre><code>// \u516d \u6570\u5b66\u57fa\u7840 | 1 \u5feb\u901f\u5e42\n// #10196. \u300c\u4e00\u672c\u901a 6.1 \u7ec3\u4e60 3\u300d\u8d8a\u72f1\n// P3197 [HNOI2008] \u8d8a\u72f1\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int M = 1e5 + 3;\n\nlli pow2(lli x, lli y) {\n    lli ans = 1;\n    while(y) {\n        if(y &amp; 1) (ans *= x) %= M;\n        (x *= x) %= M;\n        y &gt;&gt;= 1;\n    }\n    return ans % M;\n}\n\nint main() {\n    lli m, n;\n    scanf(\"%lld%lld\", &amp;m, &amp;n);\n    // $m^n - m(m-1)^{n-1}$\n    printf(\"%lld\", (pow2(m, n) - m % M * pow2(m - 1, n - 1) % M + M) % M);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%B4%A8%E6%95%B0/","title":"\u8d28\u6570","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%B4%A8%E6%95%B0/#\u4f8b\u9898","title":"\u4f8b\u9898","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%B4%A8%E6%95%B0/#prime-distance","title":"Prime Distance","text":"<pre><code>// \u516d \u6570\u5b66\u57fa\u7840 | 2 \u8d28\u6570\n// #10197. \u300c\u4e00\u672c\u901a 6.2 \u4f8b 1\u300dPrime Distance\n// Prime Distance\n#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int SMAX = (1 &lt;&lt; 16) + 9;\nbitset&lt;(int)1e6+9&gt; mk;\n\nbitset&lt;SMAX&gt; bmk;\nvector&lt;int&gt; prime;\nvoid xxs() {\n    for(int i = 2; i &lt;= SMAX - 3; i ++) {\n        if(!bmk[i]) prime.push_back(i);\n        for(int p : prime) {\n            if(i * p &gt; SMAX - 3) break;\n            bmk[i * p] = 1;\n            if(i % p == 0) break;\n        }\n    }\n}\n\nsigned main() {\n    xxs();\n    int l, r;\n    while(scanf(\"%lld%lld\", &amp;l, &amp;r) == 2) {\n        mk = 0;\n        if(l == 1) mk[0] = 1;\n        for(int p : prime)\n            for(int i = max((l + p - 1) / p, 2ll); i &lt;= r / p; i ++)\n                mk[1ll * i * p - l] = 1;\n        int beg = -1, now, cj;\n        for(int i = 0; i &lt;= r - l; i ++) if(!mk[i]) {beg = i; break; }\n        if(beg == -1) {printf(\"There are no adjacent primes.\\n\"); continue; }\n        int c1, c2, c = INT_MAX;\n        int d1, d2, d = INT_MIN;\n        for(int i = beg + 1; i &lt;= r - l; i ++) if(!mk[i]) {\n            now = i;\n            cj = now - beg;\n            if(cj &lt; c) {c1 = beg; c2 = now; c = cj; }\n            if(cj &gt; d) {d1 = beg; d2 = now; d = cj; }\n            beg = now;\n        }\n        c == INT_MAX ?\n        printf(\"There are no adjacent primes.\\n\") :\n        printf(\"%lld,%lld are closest, %lld,%lld are most distant.\\n\",\n        c1 + l, c2 + l, d1 + l, d2 + l);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%B4%A8%E6%95%B0/#\u7ec3\u4e60\u9898","title":"\u7ec3\u4e60\u9898","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%B4%A8%E6%95%B0/#\u8d28\u56e0\u6570\u5206\u89e3","title":"\u8d28\u56e0\u6570\u5206\u89e3","text":"<pre><code>// \u516d \u6570\u5b66\u57fa\u7840 | 2 \u8d28\u6570\n// #10198. \u300c\u4e00\u672c\u901a 6.2 \u7ec3\u4e60 1\u300d\u8d28\u56e0\u6570\u5206\u89e3\n// P1075 [NOIP2012 \u666e\u53ca\u7ec4] \u8d28\u56e0\u6570\u5206\u89e3\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 2e9 + 9;\n\nint main() {\n    int n, p;\n    scanf(\"%d\", &amp;n);\n    for(int i = 2; ; i ++)\n        if(n % i == 0) {\n            p = i;\n            break;\n        }\n    printf(\"%d\", n / p);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%B4%A8%E6%95%B0/#\u8f7b\u62cd\u725b\u5934","title":"\u8f7b\u62cd\u725b\u5934","text":"<pre><code>// \u516d \u6570\u5b66\u57fa\u7840 | 2 \u8d28\u6570\n// #10199. \u300c\u4e00\u672c\u901a 6.2 \u7ec3\u4e60 2\u300d\u8f7b\u62cd\u725b\u5934\n// P2926 [USACO08DEC] Patting Heads S\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1e5 + 9;\nconst int MAXv = 1e6 + 9;\nint d[MAXn], cnt[MAXv], ans[MAXv];\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]),\n        cnt[d[i]] ++;\n    for(int i = 1; i &lt;= MAXv - 3; i ++) {\n        if(!cnt[i]) continue;\n        for(int j = 1; j * i &lt;= MAXv - 3; j ++)\n            ans[j * i] += cnt[i];\n    }\n    for(int i = 1; i &lt;= n; i ++)\n        printf(\"%d\\n\", ans[d[i]] - 1);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%B4%A8%E6%95%B0/#goldbachs-conjecture","title":"Goldbach's Conjecture","text":"<pre><code>// \u516d \u6570\u5b66\u57fa\u7840 | 2 \u8d28\u6570\n// #10200. \u300c\u4e00\u672c\u901a 6.2 \u7ec3\u4e60 3\u300dGoldbach's Conjecture\n// Goldbach's Conjecture\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1e6 + 9;\nvector&lt;int&gt; prime;\nbitset&lt;MAXn&gt; ved;\n\nvoid xxs() {\n    for(int i = 2; i &lt;= MAXn - 3; i ++) {\n        if(!ved[i]) prime.push_back(i);\n        for(int p : prime) {\n            if(i * p &gt; MAXn - 3) break;\n            ved[i * p] = 1;\n            if(i % p == 0) break;\n        }\n    }\n    prime.erase(prime.begin());\n    ved[0] = ved[1] = ved[2] = 1;\n}\n\nint main() {\n    xxs();\n    int x;\n    while(scanf(\"%d\", &amp;x) != EOF &amp;&amp; x) {\n        for(int p : prime)\n            if(!ved[x - p]) {\n                printf(\"%d = %d + %d\\n\", x, p, x - p);\n                break;\n            }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%B4%A8%E6%95%B0/#sherlock-and-his-girlfriend","title":"Sherlock and His Girlfriend","text":"<pre><code>// \u516d \u6570\u5b66\u57fa\u7840 | 2 \u8d28\u6570\n// #10201. \u300c\u4e00\u672c\u901a 6.2 \u7ec3\u4e60 4\u300dSherlock and His Girlfriend\n// Sherlock and his girlfriend\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1e5 + 9;\n\nvector&lt;int&gt; prime;\nbitset&lt;MAXn&gt; ved;\nvoid xxs(int mx) {\n    for(int i = 2; i &lt;= mx + 3; i ++) {\n        if(!ved[i]) prime.push_back(i);\n        for(int p : prime) {\n            if(p * i &gt; mx + 3) break;\n            ved[p * i] = 1;\n            if(i % p == 0) break;\n        }\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    n &lt;= 2 ? printf(\"1\\n\") : printf(\"2\\n\");\n    xxs(n + 3);\n    for(int i = 1; i &lt;= n; i ++)\n        ved[i + 1] ? printf(\"2 \") : printf(\"1 \");\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E4%B8%80%E6%9C%AC%E9%80%9A%E6%8F%90%E9%AB%98%E7%AF%87/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%B4%A8%E6%95%B0/#\u6a31\u82b1","title":"\u6a31\u82b1","text":"<pre><code>// \u516d \u6570\u5b66\u57fa\u7840 | 2 \u8d28\u6570\n// #10202. \u300c\u4e00\u672c\u901a 6.2 \u7ec3\u4e60 5\u300d\u6a31\u82b1\n// P1445 [Violet] \u6a31\u82b1\n#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst lli mod = 1e9 + 7;\nconst int MAXn = 1e6 + 9;\nvector&lt;int&gt; prime;\nint zys[MAXn];\nint tms[MAXn];\n\nbitset&lt;MAXn&gt; bs;\nvoid xxs(int mx) {\n    for(int i = 1; i &lt;= mx + 3; i ++) zys[i] = i;\n    for(int i = 2; i &lt;= mx + 3; i ++) {\n        if(!bs[i]) prime.push_back(i);\n        for(int p : prime) {\n            if(p * i &gt; mx + 3) break;\n            bs[p * i] = 1;\n            zys[p * i] = p;\n            if(i % p == 0) break;\n        }\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    xxs(n);\n    lli ans = 1;\n    for(int i = 2; i &lt;= n; i ++) {\n        int now = i;\n        while(now != 1) {\n            tms[zys[now]] ++;\n            now /= zys[now];\n        }\n    }\n    for(int i = 1; i &lt;= n; i ++)\n        (ans *= (tms[i] % mod * 2 % mod + 1) % mod) %= mod;\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98A-%E5%88%86%E6%9E%90/","title":"\u95ee\u9898A - \u5206\u6790","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98A-%E5%88%86%E6%9E%90/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98A-%E5%88%86%E6%9E%90/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570 \\(a, b\\)\uff0c\u5224\u65ad \\(a \\times b\\) \u662f\u5426\u4e3a\u5076\u6570\u3002</p> <p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6d4b\u8bd5\u70b9\uff0c\\(1 \\le a, b \\le 2^{64} - 1\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98A-%E5%88%86%E6%9E%90/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u4e24\u4e2a\u6b63\u6574\u6570 \\(a, b\\)\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98A-%E5%88%86%E6%9E%90/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u5982\u679c \\(a \\times b\\) \u662f\u5076\u6570\uff0c\u8f93\u51fa \\(\\texttt{Yes}\\)\uff0c\u53cd\u4e4b\u8f93\u51fa \\(\\texttt{No}\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98A-%E5%88%86%E6%9E%90/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>1 3\n</code></pre> <pre><code>No\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98A-%E5%88%86%E6%9E%90/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u9002\u7528\u4e8e\u66f4\u5927\u7684\u6570\u636e\u8303\u56f4\uff0c\u68c0\u67e5\u4e24\u6570\u7684\u672b\u5c3e\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u6570\u7684\u672b\u5c3e\u662f\u5076\u6570\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    string a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    (a.back() - '0') % 2 &amp;&amp; (b.back() - '0') % 2\n    ? printf(\"No\") : printf(\"Yes\");\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98B-%E7%A7%8B%E6%B8%B8/","title":"\u95ee\u9898B - \u79cb\u6e38","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98B-%E7%A7%8B%E6%B8%B8/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98B-%E7%A7%8B%E6%B8%B8/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u67d0\u5b66\u6821\u4e94\u5e74\u7ea7\u5171\u6709 \\(n\\) \u4e2a\u73ed\u7ea7\uff0c\u6bcf\u73ed\u4eba\u6570\u4e3a \\(s_1,s_2,\\dots s_n\\)\uff0c\u9884\u5b9a\u8f66\u8f86\u5ea7\u4f4d\u6570\u4e3a \\(36\\) \u5ea7\uff0c\u6bcf\u4eba\u4e00\u5ea7\u3002\u6bcf\u73ed\u6709\u4e24\u4f4d\u6559\u5e08\u540c\u884c\u3002\u5199\u4e00\u4e2a\u7a0b\u5e8f\u8f93\u5165 \\(n\\) \u548c \\(s\\)\uff0c\u8f93\u51fa\u9700\u591a\u5c11\u8f86\u8f66\uff1f</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98B-%E7%A7%8B%E6%B8%B8/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 \\(n\\:(1\\le n\\le 10)\\)\uff0c\u73ed\u7ea7\u4e2a\u6570\u3002</p> <p>\u8f93\u5165\u7b2c\u4e8c\u884c\u5230\u7b2c \\(n + 1\\) \u884c\u4e3a\u6bcf\u73ed\u5b66\u751f\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98B-%E7%A7%8B%E6%B8%B8/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u7684\u552f\u4e00\u7684\u4e00\u4e2a\u6574\u6570\u4e3a\u9700\u8981\u8f66\u8f86\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98B-%E7%A7%8B%E6%B8%B8/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>4\n32\n33\n34\n33\n</code></pre> <pre><code>4\n</code></pre> <p>\\(4\\) \u4e2a\u73ed\u7ea7\u4eba\u6570\u4e3a \\(32+33+34+33=132\\)\uff0c\u52a0 \\(8\\) \u4f4d\u6559\u5e08\uff0c\u5408\u8ba1\u4e3a \\(140\\) \u4eba\uff0c\u9700\u8981 \\(4\\) \u8f86\u65c5\u6e38\u8f66\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98B-%E7%A7%8B%E6%B8%B8/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u8ba1\u7b97\u4eba\u6570\uff0c\u5e76\u5bf9 \\(36\\) \u5411\u4e0a\u53d6\u6574\u5373\u53ef\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\n\nint main() {\n    lli ans = 0;\n    int n;\n    scanf(\"%d\", &amp;n);\n    ans += n * 2;\n    for(int i = 1, ia; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;ia), ans += ia;\n    printf(\"%lld\", (ans - 1) / 36 + 1);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98C-%E5%85%AC%E9%87%8C%E6%95%B0/","title":"\u95ee\u9898C - \u516c\u91cc\u6570","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98C-%E5%85%AC%E9%87%8C%E6%95%B0/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98C-%E5%85%AC%E9%87%8C%E6%95%B0/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u67d0\u8f86\u8f66\u7684\u91cc\u7a0b\u8868\u51fa\u73b0\u4e86\u6545\u969c\uff1a\u5b83\u603b\u662f\u8df3\u8fc7\u6570\u5b57 \\(3\\) \u548c\u6570\u5b57 \\(8\\)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u524d\u663e\u793a\u5df2\u8d70\u8fc7\u4e24\u516c\u91cc\u65f6\uff0c\u5982\u679c\u8f66\u5b50\u518d\u5411\u524d\u8d70\u4e00\u516c\u91cc\uff0c\u90a3\u4e48\u5c06\u663e\u793a \\(4\\) \u516c\u91cc\uff0c\u800c\u4e0d\u662f \\(3\\) \u516c\u91cc\uff08\u6570\u5b57 \\(3\\) \u8df3\u8fc7\u4e86\uff09\u3002 \u518d\u6bd4\u5982\uff0c\u5f53\u524d\u662f \\(15229\\) \u516c\u91cc\uff0c\u8f66\u5b50\u518d\u5411\u524d\u8d70\u4e00\u516c\u91cc\uff0c\u663e\u793a\u7684\u662f \\(15240\\) \u516c\u91cc\uff0c\u800c\u4e0d\u662f \\(15230\\) \u516c\u91cc\u3002\u6570\u5b57 \\(8\\) \u4e5f\u540c\u6837\u8df3\u8fc7\u3002</p> <p>\u8bf7\u4f60\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6839\u636e\u91cc\u7a0b\u8868\u4e0a\u663e\u793a\u7684\u6570\u5b57\uff0c\u8ba1\u7b97\u8f66\u5b50\u771f\u6b63\u8d70\u4e86\u591a\u5c11\u516c\u91cc\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98C-%E5%85%AC%E9%87%8C%E6%95%B0/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6545\u969c\u91cc\u7a0b\u8868\u663e\u793a\u7684\u516c\u91cc\u6570 \\(s\\:(1\\le s\\le 1000000)\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98C-%E5%85%AC%E9%87%8C%E6%95%B0/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6b63\u786e\u7684\u516c\u91cc\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98C-%E5%85%AC%E9%87%8C%E6%95%B0/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>15\n</code></pre> <pre><code>12\n</code></pre> <p>\\(1\\) \u5230 \\(15\\) \u6570\u5b57\u4e2d\uff0c\u5305\u542b\u6570\u5b57 \\(3\\)\u3001\\(8\\)\u3001\\(13\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98C-%E5%85%AC%E9%87%8C%E6%95%B0/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98C-%E5%85%AC%E9%87%8C%E6%95%B0/#\u66b4\u529b\u89e3\u6cd5","title":"\u66b4\u529b\u89e3\u6cd5","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u52a3\u7684\u89e3\u6cd5\u6709\uff1a\u66b4\u529b\u679a\u4e3e\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e\u7ed9\u5b9a\u6570\u7684\u6570\uff0c\u5224\u65ad\u662f\u5426\u5305\u542b\u7279\u6b8a\u6570\u5b57\u3002\u6216\u4f7f\u7528\u751f\u6210\u6cd5\u751f\u6210\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e\u7ed9\u5b9a\u6570\u4e14\u5305\u542b\u7279\u6b8a\u6570\u5b57\u7684\u6570\u7684\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98C-%E5%85%AC%E9%87%8C%E6%95%B0/#\u8fdb\u5236\u8f6c\u6362","title":"\u8fdb\u5236\u8f6c\u6362","text":"<p>\u628a\u539f\u6570\u5316\u4e3a \\(8\\) \u8fdb\u5236\u6570\uff0c\u518d\u8fdb\u884c \\(8\\) \u8fdb\u5236\u8f6c \\(10\\) \u8fdb\u5236\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(\\log{n})\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\n\nint main() {\n    lli ans = 0;\n    char c; int ia;\n    while(scanf(\"%c\", &amp;c) != EOF &amp;&amp; c &lt;= '9' &amp;&amp; c &gt;= '0') {\n        ia = c - '0';\n        if(ia &gt;= 8) ia --;\n        if(ia &gt;= 3) ia --;\n        (ans *= 8) += ia;\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98D-%E8%BD%B4%E5%AF%B9%E7%A7%B0%E6%95%B0/","title":"\u95ee\u9898D - \u8f74\u5bf9\u79f0\u6570","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98D-%E8%BD%B4%E5%AF%B9%E7%A7%B0%E6%95%B0/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98D-%E8%BD%B4%E5%AF%B9%E7%A7%B0%E6%95%B0/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u8f93\u5165\u4e00\u4e2a\u53cc\u4f4d\u6570\u4f4d\u7684\u6574\u6570\uff0c\u5224\u65ad\u662f\u5426\u662f\u8f74\u5bf9\u79f0\u6570\uff08\u56de\u6587\u6570\uff09\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98D-%E8%BD%B4%E5%AF%B9%E7%A7%B0%E6%95%B0/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u4e00\u4e2a\u53cc\u4f4d\u6570\u4f4d\u7684\u6574\u6570 \\(n\\)\u3002\\(n\\) \u7684\u4f4d\u6570\u4e0d\u8d85\u8fc7 \\(20\\) \u4f4d\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98D-%E8%BD%B4%E5%AF%B9%E7%A7%B0%E6%95%B0/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u5982\u679c\u662f\u5728\u8f93\u51fa\u201c\\(\\texttt{YES}\\)\u201d\uff0c\u5426\u5219\u8f93\u51fa\u201c\\(\\texttt{NO}\\)\u201d\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98D-%E8%BD%B4%E5%AF%B9%E7%A7%B0%E6%95%B0/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>1001\n</code></pre> <pre><code>YES\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98D-%E8%BD%B4%E5%AF%B9%E7%A7%B0%E6%95%B0/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u6b64\u5199\u6cd5\u540c\u65f6\u9002\u7528\u4e8e\u975e\u53cc\u4f4d\u6570\u4f4d\u7684\u6570\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    string s;\n    getline(cin, s);\n    for(int i = 0, j = s.size() - 1; i &lt;= j; i ++, j --)\n        if(s[i] != s[j]) return 0 * printf(\"NO\");\n    printf(\"YES\");\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98E-%E6%95%B4%E6%95%B0%E5%8E%BB%E9%87%8D/","title":"\u95ee\u9898E - \u6574\u6570\u53bb\u91cd","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98E-%E6%95%B4%E6%95%B0%E5%8E%BB%E9%87%8D/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98E-%E6%95%B4%E6%95%B0%E5%8E%BB%E9%87%8D/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u7ed9\u5b9a\u542b\u6709 \\(n\\) \u4e2a\u6574\u6570\u7684\u5e8f\u5217\uff0c\u8981\u6c42\u5bf9\u8fd9\u4e2a\u5e8f\u5217\u8fdb\u884c\u53bb\u91cd\u64cd\u4f5c\u3002\u6240\u8c13\u53bb\u91cd\uff0c\u662f\u6307\u5bf9\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u91cd\u590d\u51fa\u73b0\u7684\u6570\uff0c\u53ea\u4fdd\u7559\u8be5\u6570\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5220\u9664\u5176\u4f59\u4f4d\u7f6e\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98E-%E6%95%B4%E6%95%B0%E5%8E%BB%E9%87%8D/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\:(1 \\le n \\le 20000)\\)\uff0c\u8868\u793a\u7b2c\u4e8c\u884c\u5e8f\u5217\u4e2d\u6570\u5b57\u7684\u4e2a\u6570\u3002</p> <p>\u7b2c\u4e8c\u884c\u5305\u542b \\(n\\) \u4e2a\u6574\u6570\uff0c\u6574\u6570\u4e4b\u95f4\u4ee5\u4e00\u4e2a\u7a7a\u683c\u5206\u5f00\u3002\u6bcf\u4e2a\u6574\u6570\u5927\u4e8e\u7b49\u4e8e \\(10\\)\u3001\u5c0f\u4e8e\u7b49\u4e8e \\(5000\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98E-%E6%95%B4%E6%95%B0%E5%8E%BB%E9%87%8D/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u6309\u7167\u8f93\u5165\u7684\u987a\u5e8f\u8f93\u51fa\u5176\u4e2d\u4e0d\u91cd\u590d\u7684\u6570\u5b57\uff0c\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u5f00\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98E-%E6%95%B4%E6%95%B0%E5%8E%BB%E9%87%8D/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>5\n10 12 93 12 75\n</code></pre> <pre><code>10 12 93 75\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98E-%E6%95%B4%E6%95%B0%E5%8E%BB%E9%87%8D/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u4f7f\u7528\u5e03\u5c14\u6570\u7ec4\u8bb0\u5f55\u8be5\u6570\u662f\u5426\u66fe\u7ecf\u51fa\u73b0\u8fc7\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 5e3 + 9;\nbitset&lt;MAXn&gt; bs;\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia; i &lt;= n; i ++) {\n        scanf(\"%d\", &amp;ia);\n        if(!bs[ia]) printf(\"%d \", ia);\n        bs[ia] = 1;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98F-%E7%9B%B4%E6%92%AD%E8%8E%B7%E5%A5%96/","title":"\u95ee\u9898F - \u76f4\u64ad\u83b7\u5956","text":"<p>\u9898\u76ee\u6765\u6e90\uff1aCSP-J 2020 II</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98F-%E7%9B%B4%E6%92%AD%E8%8E%B7%E5%A5%96/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98F-%E7%9B%B4%E6%92%AD%E8%8E%B7%E5%A5%96/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>NOI2130 \u5373\u5c06\u4e3e\u884c\u3002\u4e3a\u4e86\u589e\u52a0\u89c2\u8d4f\u6027\uff0cCCF \u51b3\u5b9a\u9010\u4e00\u8bc4\u51fa\u6bcf\u4e2a\u9009\u624b\u7684\u6210\u7ee9\uff0c\u5e76\u76f4\u64ad\u5373\u65f6\u7684\u83b7\u5956\u5206\u6570\u7ebf\u3002\u672c\u6b21\u7ade\u8d5b\u7684\u83b7\u5956\u7387\u4e3a \\(w\\%\\)\uff0c\u5373\u5f53\u524d\u6392\u540d\u524d \\(w\\%\\) \u7684\u9009\u624b\u7684\u6700\u4f4e\u6210\u7ee9\u5c31\u662f\u5373\u65f6\u7684\u5206\u6570\u7ebf\u3002</p> <p>\u66f4\u5177\u4f53\u5730\uff0c\u82e5\u5f53\u524d\u5df2\u8bc4\u51fa\u4e86 \\(p\\) \u4e2a\u9009\u624b\u7684\u6210\u7ee9\uff0c\u5219\u5f53\u524d\u8ba1\u5212\u83b7\u5956\u4eba\u6570\u4e3a \\(\\max(1, \\lfloor p \\times w \\%\\rfloor)\\)\uff0c\u5176\u4e2d \\(w\\) \u662f\u83b7\u5956\u767e\u5206\u6bd4\uff0c\\(\\lfloor x \\rfloor\\) \u8868\u793a\u5bf9 \\(x\\) \u5411\u4e0b\u53d6\u6574\uff0c\\(\\max(x,y)\\) \u8868\u793a \\(x\\) \u548c \\(y\\) \u4e2d\u8f83\u5927\u7684\u6570\u3002\u5982\u6709\u9009\u624b\u6210\u7ee9\u76f8\u540c\uff0c\u5219\u6240\u6709\u6210\u7ee9\u5e76\u5217\u7684\u9009\u624b\u90fd\u80fd\u83b7\u5956\uff0c\u56e0\u6b64\u5b9e\u9645\u83b7\u5956\u4eba\u6570\u53ef\u80fd\u6bd4\u8ba1\u5212\u4e2d\u591a\u3002</p> <p>\u4f5c\u4e3a\u8bc4\u6d4b\u7ec4\u7684\u6280\u672f\u4eba\u5458\uff0c\u8bf7\u4f60\u5e2e CCF \u5199\u4e00\u4e2a\u76f4\u64ad\u7a0b\u5e8f\u3002</p> <p>\u5bf9\u4e8e\u6240\u6709\u6d4b\u8bd5\u70b9\uff0c\u6bcf\u4e2a\u9009\u624b\u7684\u6210\u7ee9\u5747\u4e3a\u4e0d\u8d85\u8fc7 \\(600\\) \u7684\u975e\u8d1f\u6574\u6570\uff0c\u83b7\u5956\u767e\u5206\u6bd4 \\(w\\) \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u4e14 \\(1 \\le w \\le 99\\)\u3002</p> <p>\u5728\u8ba1\u7b97\u8ba1\u5212\u83b7\u5956\u4eba\u6570\u65f6\uff0c\u5982\u7528\u6d6e\u70b9\u7c7b\u578b\u7684\u53d8\u91cf\uff08\u5982 C/C++ \u4e2d\u7684 <code>float</code> \u3001 <code>double</code>\uff0cPascal \u4e2d\u7684 <code>real</code> \u3001 <code>double</code> \u3001 <code>extended</code> \u7b49\uff09\u5b58\u50a8\u83b7\u5956\u6bd4\u4f8b \\(w\\%\\)\uff0c\u5219\u8ba1\u7b97 \\(5 \\times 60\\%\\) \u65f6\u7684\u7ed3\u679c\u53ef\u80fd\u4e3a \\(3.000001\\)\uff0c\u4e5f\u53ef\u80fd\u4e3a \\(2.999999\\)\uff0c\u5411\u4e0b\u53d6\u6574\u540e\u7684\u7ed3\u679c\u4e0d\u786e\u5b9a\u3002\u56e0\u6b64\uff0c\u5efa\u8bae\u4ec5\u4f7f\u7528\u6574\u578b\u53d8\u91cf\uff0c\u4ee5\u8ba1\u7b97\u51fa\u51c6\u786e\u503c\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98F-%E7%9B%B4%E6%92%AD%E8%8E%B7%E5%A5%96/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570 \\(n, w\\)\u3002\u5206\u522b\u4ee3\u8868\u9009\u624b\u603b\u6570\u4e0e\u83b7\u5956\u7387\u3002</p> <p>\u7b2c\u4e8c\u884c\u6709 \\(n\\) \u4e2a\u6574\u6570\uff0c\u4f9d\u6b21\u4ee3\u8868\u9010\u4e00\u8bc4\u51fa\u7684\u9009\u624b\u6210\u7ee9\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98F-%E7%9B%B4%E6%92%AD%E8%8E%B7%E5%A5%96/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u53ea\u6709\u4e00\u884c\uff0c\u5305\u542b \\(n\\) \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u4f9d\u6b21\u4ee3\u8868\u9009\u624b\u6210\u7ee9\u9010\u4e00\u8bc4\u51fa\u540e\uff0c\u5373\u65f6\u7684\u83b7\u5956\u5206\u6570\u7ebf\u3002\u76f8\u90bb\u4e24\u4e2a\u6574\u6570\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98F-%E7%9B%B4%E6%92%AD%E8%8E%B7%E5%A5%96/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>10 60\n200 300 400 500 600 600 0 300 200 100\n</code></pre> <pre><code>200 300 400 400 400 500 400 400 300 300\n</code></pre> <pre><code>10 30\n100 100 600 100 100 100 100 100 100 100\n</code></pre> <pre><code>100 100 600 600 600 600 100 100 100 100\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98F-%E7%9B%B4%E6%92%AD%E8%8E%B7%E5%A5%96/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98F-%E7%9B%B4%E6%92%AD%E8%8E%B7%E5%A5%96/#\u66b4\u529b","title":"\u66b4\u529b","text":"<p>\u4f7f\u7528\u6876\u5b58\u50a8\uff0c\u6bcf\u6b21\u4ece\u5934\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\u4f46\u80fd\u901a\u8fc7 CSP \u7684\u539f\u9898\uff0c\u8c22\u8c22CCF\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A61/%E9%97%AE%E9%A2%98F-%E7%9B%B4%E6%92%AD%E8%8E%B7%E5%A5%96/#\u5bf9\u9876\u5806","title":"\u5bf9\u9876\u5806","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int MAXn = 1e5 + 9;\nint d[MAXn + 9];\npriority_queue&lt;int&gt; dgd;\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; xgd;\n\nsigned main() {\n    int n, w;\n    scanf(\"%lld%lld\", &amp;n, &amp;w);\n    for(int i = 1; i &lt;= n; i ++) {\n        scanf(\"%lld\", &amp;d[i]);\n        xgd.push(d[i]);\n        int need = max(1ll, i * w / 100);\n        while(xgd.size() &gt; need) {\n            dgd.push(xgd.top());\n            xgd.pop();\n        }\n        printf(\"%lld \", xgd.top());\n        if(!dgd.empty()) {\n            xgd.push(dgd.top());\n            dgd.pop();\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98A-%E8%80%81%E9%B9%B0%E6%8D%89%E5%B0%8F%E9%B8%A1/","title":"\u95ee\u9898A - \u8001\u9e70\u6349\u5c0f\u9e21","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98A-%E8%80%81%E9%B9%B0%E6%8D%89%E5%B0%8F%E9%B8%A1/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98A-%E8%80%81%E9%B9%B0%E6%8D%89%E5%B0%8F%E9%B8%A1/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u8001\u5e08\u548c\u5c0f\u660e\u7b49 \\(n\\:(3\\le n\\le 100)\\) \u4e2a\u5c0f\u670b\u53cb\u73a9\u8001\u9e70\u6349\u5c0f\u9e21\u6e38\u620f\uff0c\u8001\u5e08\u5f53\u8001\u9e70\uff0c\u6392\u5728\u7b2c \\(1\\) \u4f4d\u7684\u5c0f\u670b\u53cb\u5f53\u201c\u6bcd\u9e21\u201d\uff0c\u5176\u4ed6 \\(n-1\\) \u4f4d\u5c0f\u670b\u53cb\u5f53\u201c\u5c0f\u9e21\u201d\u3002\u4f46\u662f\uff0c\u5f53\u201c\u6bcd\u9e21\u201d\u5f88\u8f9b\u82e6\uff0c\u6240\u4ee5\u8fc7\u4e00\u6bb5\u65f6\u95f4\u201c\u6bcd\u9e21\u201d\u9700\u8981\u6392\u5230\u961f\u4f0d\u6700\u540e\u6210\u4e3a\u201c\u5c0f\u9e21\u201d\uff0c\u8ba9\u7b2c2\u4f4d\u5c0f\u670b\u53cb\u5f53\u201c\u6bcd\u9e21\u201d\u2026\u2026</p> <p>\u8bf7\u4f60\u7f16\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6a21\u62df \\(m\\:(1 &lt; m &lt; 100)\\) \u6b21\u4f4d\u7f6e\u53d8\u6362\u7684\u8fc7\u7a0b\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98A-%E8%80%81%E9%B9%B0%E6%8D%89%E5%B0%8F%E9%B8%A1/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u4e00\u884c\u4e24\u4e2a\u6570\uff0c\u5206\u522b\u8868\u793a \\(m\\) \u548c \\(n\\) \u7684\u503c\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98A-%E8%80%81%E9%B9%B0%E6%8D%89%E5%B0%8F%E9%B8%A1/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa \\(m\\) \u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u7b26\u5408\u9898\u610f\u7684\u4f4d\u7f6e\u5e8f\u5217\uff08\u6bcf\u884c\u6570\u5b57\u4e4b\u95f4\uff0c\u7528\u7a7a\u683c\u5206\u9694\uff09\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98A-%E8%80%81%E9%B9%B0%E6%8D%89%E5%B0%8F%E9%B8%A1/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>6 4\n</code></pre> <pre><code>1 2 3 4 5 6\n2 3 4 5 6 1\n3 4 5 6 1 2\n4 5 6 1 2 3\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98A-%E8%80%81%E9%B9%B0%E6%8D%89%E5%B0%8F%E9%B8%A1/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u6839\u636e\u89c4\u5f8b\u76f4\u63a5\u8f93\u51fa\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(1)\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int v, n;\n    scanf(\"%d%d\", &amp;v, &amp;n);\n    int beg = 1;\n    for(int i = 1; i &lt;= n; i ++) {\n        int now = beg;\n        for(int j = 0; j &lt; v; j ++) {\n            printf(\"%d \", now);\n            now ++;\n            if(now &gt; v) now = 1;\n        }\n        printf(\"\\n\");\n        beg ++;\n        if(beg &gt; v) beg = 1;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98B-%E6%9C%89%E8%B6%A3%E7%9A%843721%E6%95%B0/","title":"\u95ee\u9898B - \u6709\u8da3\u7684 3721 \u6570","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98B-%E6%9C%89%E8%B6%A3%E7%9A%843721%E6%95%B0/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98B-%E6%9C%89%E8%B6%A3%E7%9A%843721%E6%95%B0/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u6709\u4e00\u5929\uff0c\u5c0f\u660e\u53d1\u73b0\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u73b0\u8c61\uff0c\\(8\\) \u9664\u4ee5 \\(3\\) \u4f59 \\(2\\)\uff0c\\(8\\) \u9664\u4ee5 \\(7\\) \u4f59 \\(1\\)\uff0c\u4ed6\u628a\u8fd9\u79cd\u9664\u4ee5 \\(3\\) \u4f59 \\(2\\) \u540c\u65f6\u9664\u4ee5 \\(7\\) \u4f59 \\(1\\) \u7684\u6570\u79f0\u4e3a\u201c\\(\\texttt{3721}\\)\u201d\u3002\u8bf7\u7f16\u7a0b\u5b9e\u73b0\uff1a\u8f93\u5165 \\(k\\) \u7684\u503c\uff0c\u8bf7\u8f93\u51fa\u524d \\(k\\) \u4e2a\u548c\u7b2c \\(k\\) \u4e2a\u201c\\(\\texttt{3721}\\)\u201d\u6570\uff08\\(1\\le k\\le 1000\\)\uff09\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98B-%E6%9C%89%E8%B6%A3%E7%9A%843721%E6%95%B0/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a \\(k\\) \u7684\u503c\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98B-%E6%9C%89%E8%B6%A3%E7%9A%843721%E6%95%B0/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u5171\u4e24\u884c\u3002\u7b2c\u4e00\u884c\u8f93\u51fa\u524d \\(k\\) \u4e2a\u201c\\(\\texttt{3721}\\)\u201d\u6570\uff0c\u7b2c\u4e8c\u884c\u8f93\u51fa\u7b2c \\(k\\) \u4e2a\u201c\\(\\texttt{3721}\\)\u201d\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98B-%E6%9C%89%E8%B6%A3%E7%9A%843721%E6%95%B0/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>4\n</code></pre> <pre><code>8 29 50 71\n71\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98B-%E6%9C%89%E8%B6%A3%E7%9A%843721%E6%95%B0/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98B-%E6%9C%89%E8%B6%A3%E7%9A%843721%E6%95%B0/#\u66b4\u529b\u679a\u4e3e\u5e76\u5224\u65ad","title":"\u66b4\u529b\u679a\u4e3e\u5e76\u5224\u65ad","text":"<p>\u901a\u8fc7\u679a\u4e3e\u6bcf\u4e00\u4e2a\u6570\u5e76\u8fdb\u884c\u5224\u65ad\u662f\u5426\u7b26\u5408\u6761\u4ef6\uff0c\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98B-%E6%9C%89%E8%B6%A3%E7%9A%843721%E6%95%B0/#\u6570\u5b66\u65b9\u6cd5","title":"\u6570\u5b66\u65b9\u6cd5","text":"<p>\u5982\u679c\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u901a\u8fc7\u89c2\u5bdf\u7ed9\u5b9a\u7684\u6570\u5217\uff08\u8bb0\u4e3a \\(\\{a_n\\}\\)\uff09\u7684\u524d \\(4\\) \u9879\uff1a\\(8, 29, 50, 71\\)\uff0c\u4e0d\u96be\u53d1\u73b0\u6570\u5217 \\(\\{a_n\\}\\) \u5f88\u53ef\u80fd\u662f\u4e00\u4e2a\u4ee5 \\(8\\) \u4e3a\u9996\u9879\uff0c\\(21\\) \u4e3a\u516c\u5dee\u7684\u7b49\u5dee\u6570\u5217\u3002\u4f7f\u7528\u7b49\u5dee\u6570\u5217\u901a\u9879\u516c\u5f0f\u5373\u53ef \\(O(1)\\) \u5730\u8ba1\u7b97\u7b2c \\(n\\) \u4f4d\u7684\u503c\u3002</p> <p>\u4e25\u8c28\u7684\u6570\u5b66\u8bc1\u660e\u5982\u4e0b\uff1a</p> <p>\u6211\u4eec\u5df2\u77e5\u4ee5\u4e0b\u540c\u4f59\u5173\u7cfb\uff1a</p> \\[ \\left\\{\\begin{matrix} x \\equiv 2 \\pmod{3}  \\\\ x \\equiv 1 \\pmod{7} \\end{matrix}\\right. \\] <p>\u4ee4 $ x = 7k + 1, k \\in \\mathbb{Z} $\uff0c\u5219\u6709\uff1a</p> \\[ \\begin{align*} 7k + 1 \\equiv 2 \\pmod{3}  \\\\ k + 1 \\equiv 2 \\pmod{3}  \\\\ k \\equiv 1 \\pmod{3} \\end{align*} \\] <p>\u4ee4 $ k = 3m + 1, m \\in \\mathbb{Z} $\uff0c\u56e0\u6b64\uff1a</p> \\[ x = 7k + 1 = 7(3m + 1) + 1 = 21m + 8 \\] <p>\u6700\u7ec8\u5f97\u51fa $ x = 21m + 8, m \\in \\mathbb{Z}  $\u3002</p> <p>\u62d3\u5c55</p> <p>\u7c7b\u4f3c\u9898\u76ee\uff1a\u6d1b\u8c37 P11144 \u300cSFMOI Round I\u300dStrange Madoka Game\uff0c \u76f8\u5e94\u89e3\u6cd5\uff1a\u6d1b\u8c37\u5341\u6708\u6708\u8d5b\u5b98\u65b9\u9898\u89e3</p> <p>\u66f4\u591a\u540c\u4f59\u76f8\u5173\u7684\u7b97\u6cd5\u53c2\u8003\uff1a\u6a21\u610f\u4e49\u4e0b\u7684\u8fd0\u7b97\u3001\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\n\nint main() {\n    lli n;\n    scanf(\"%lld\", &amp;n);\n    for(lli i = 1; i &lt;= n; i ++)\n        printf(\"%lld \", 21 * (i - 1) + 8);\n    printf(\"\\n%lld\", 21 * (n - 1) + 8);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98C-%E7%AC%ACn%E5%B0%8F%E8%B4%A8%E6%95%B0/","title":"\u95ee\u9898C - \u7b2c n \u5c0f\u8d28\u6570","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98C-%E7%AC%ACn%E5%B0%8F%E8%B4%A8%E6%95%B0/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\uff0c\u6c42\u51fa\u7b2c \\(n\\) \u5c0f\u7684\u8d28\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98C-%E7%AC%ACn%E5%B0%8F%E8%B4%A8%E6%95%B0/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>10\n</code></pre> <pre><code>29\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98C-%E7%AC%ACn%E5%B0%8F%E8%B4%A8%E6%95%B0/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u5224\u65ad\u7d20\u6570\u548c\u7d20\u6570\u7b5b\u6cd5\u7684\u7b97\u6cd5\u4f17\u591a\uff0c\u6b64\u9898\u6700\u4f18\u7684\u89e3\u6cd5\u4e3a\u6b27\u62c9\u7b5b\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 1e6 + 9;    // 10000: 104729\nbitset&lt;MAXn&gt; ved;\nvector&lt;lli&gt; prime;\n\nint main() {\n    lli n;\n    scanf(\"%lld\", &amp;n);\n    for(int i = 2; i &lt;= MAXn - 3; i ++) {\n        if(!ved[i]) prime.push_back(i);\n        for(lli pj : prime) {\n            if(i * pj &gt; MAXn - 3) break;\n            ved[i * pj] = 1;\n            if(i % pj == 0) break;\n        }\n    }\n    printf(\"%lld\", prime[n - 1]);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98D-%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/","title":"\u95ee\u9898D - \u8d28\u56e0\u6570\u5206\u89e3","text":"<p>\u9898\u76ee\u6765\u6e90\uff1aNOIP 2012 \u666e\u53ca\u7ec4 T1/4</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98D-%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\uff0c\\(n\\) \u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u8d28\u6570\u7684\u4e58\u79ef\uff0c\u8bd5\u6c42\u51fa\u8f83\u5927\u7684\u90a3\u4e2a\u8d28\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98D-%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>21\n</code></pre> <pre><code>7\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98D-%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98D-%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/#\u6b27\u62c9\u7b5b","title":"\u6b27\u62c9\u7b5b","text":"<p>\u6b64\u9898\u7531\u4e8e\u6570\u636e\u5927\u5c0f\uff0c\u6b27\u62c9\u7b5b\u5e76\u4e0d\u80fd\u83b7\u5f97\u5168\u90e8\u5206\u6570\u3002\u4f46\u5bf9\u4e8e\u8f83\u5c0f\u7684\u6570\u636e\u8303\u56f4\u3001\u5927\u91cf\u8be2\u95ee\u7684\u60c5\u51b5\uff0c\u6b27\u62c9\u7b5b\u662f\u6700\u4f18\u89e3\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98D-%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/#\u66b4\u529b\u679a\u4e3e","title":"\u66b4\u529b\u679a\u4e3e","text":"<p>\u4ece\u5c0f\u5230\u5927\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u975e \\(1\\) \u6b63\u6574\u6570\uff0c\u76f4\u5230\u627e\u5230 \\(k\\)\uff0c\u6ee1\u8db3 \\(k \\mid n\\)\uff0c\u7b54\u6848\u5373\u4e3a \\(n / k\\)\u3002</p> <p>\u6ce8\u610f\uff1a\u4e0d\u80fd\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u5982 \\(91 = 7 \\times 13\\)\uff0c\u4ece\u5c0f\u5230\u5927\u679a\u4e3e \\(7\\) \u6b21\uff0c\u800c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e \\(91 - 13 + 1 = 79\\) \u6b21\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 2e7 + 9;\nbitset&lt;MAXn&gt; ved;\nvector&lt;int&gt; prime;\nint mn[MAXn];\n\nint main() {\n    mn[1] = 1;\n    int n;\n    scanf(\"%d\", &amp;n);\n    if(n &lt;= (int)2e7) {\n        for(int i = 2; i &lt;= MAXn - 3; i ++) {\n            if(!ved[i]) prime.push_back(i);\n            for(int pj : prime) {\n                if(i * pj &gt; MAXn - 3) break;\n                ved[i * pj] = 1;\n                mn[i * pj] = pj;\n                if(i % pj == 0) break;\n            }\n        }\n        printf(\"%d\", n / mn[n]);\n        return 0;\n    }\n    for(int i = 2; ; i ++)\n        if(!(n % i)) return 0 * printf(\"%d\", n / i);\n    // TLE:\n    // for(int i = n - 1; ; i --)\n    //  if(!(n % i)) return 0 * printf(\"%d\", i);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98E-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/","title":"\u95ee\u9898E - \u5206\u89e3\u8d28\u56e0\u6570","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98E-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98E-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u7ed9\u51fa\u4e00\u4e2a\u5408\u6570 \\(n\\)\uff0c\u6211\u4eec\u5e0c\u671b\u628a \\(n\\) \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u5373\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u8d28\u6570\u76f8\u4e58\u7684\u5f62\u5f0f\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98E-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\:(1&lt;n\\le 1\\times 10^9)\\)\uff0c\u8f93\u5165\u4fdd\u8bc1 \\(n\\) \u4e3a\u5408\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98E-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u6570\u636e\u5305\u542b\u82e5\u5e72\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 \\(p,a\\)\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u8868\u793a \\(n\\) \u5305\u542b \\(a\\) \u4e2a\u8d28\u56e0\u5b50 \\(p\\)\uff0c\u8981\u6c42\u6309 \\(p\\) \u7684\u503c\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98E-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>120\n</code></pre> <pre><code>2 3\n3 1\n5 1\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98E-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98E-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/#\u6b27\u62c9\u7b5b","title":"\u6b27\u62c9\u7b5b","text":"<p>\u6b27\u62c9\u7b5b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u53ef\u4ee5 \\(O(n)\\) \u5730\u7b5b\u51fa\u6bcf\u4e00\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u6570\u3002\u5bf9\u4e8e\u8f83\u5c0f\u7684\u6570\u636e\u8303\u56f4\u548c\u591a\u6b21\u8be2\u95ee\uff0c\u4f7f\u7528\u6b27\u62c9\u7b5b\u6700\u4f18\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 2e7 + 9;\nbitset&lt;MAXn&gt; ved;\nvector&lt;int&gt; prime;\nint mn[MAXn];\nmap&lt;int, int&gt; ans;\n\nint main() {\n    mn[1] = 1;\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 2; i &lt;= MAXn - 3; i ++) {\n        if(!ved[i]) prime.push_back(i), mn[i] = i;\n        for(int pj : prime) {\n            if(i * pj &gt; MAXn - 3) break;\n            ved[i * pj] = 1;\n            mn[i * pj] = pj;\n            if(i % pj == 0) break;\n        }\n    }\n    while(n != 1) {\n        ans[mn[n]] ++;\n        n /= mn[n];\n    }\n    for(auto it = ans.begin(); it != ans.end(); it ++)\n        printf(\"%d %d\\n\", (*it).first, (*it).second);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98E-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/#\u66b4\u529b\u679a\u4e3e","title":"\u66b4\u529b\u679a\u4e3e","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nmap&lt;int, int&gt; ans;\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 2; n != 1; i ++)\n        while(!(n % i)) n /= i, ans[i] ++;\n    for(auto it = ans.begin(); it != ans.end(); it ++)\n        printf(\"%d %d\\n\", (*it).first, (*it).second);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98F-%E5%8F%97%E6%AC%A2%E8%BF%8E%E5%BA%A6%E8%B0%83%E6%9F%A5/","title":"\u95ee\u9898F - \u53d7\u6b22\u8fce\u5ea6\u8c03\u67e5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98F-%E5%8F%97%E6%AC%A2%E8%BF%8E%E5%BA%A6%E8%B0%83%E6%9F%A5/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98F-%E5%8F%97%E6%AC%A2%E8%BF%8E%E5%BA%A6%E8%B0%83%E6%9F%A5/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u67d0\u5927\u578b\u6e38\u4e50\u56ed\u53d1\u8d77\u56ed\u5185\u5404\u4e2a\u6e38\u73a9\u9879\u76ee\u53d7\u6b22\u8fce\u5ea6\u8c03\u67e5\uff0c\u56ed\u5185\u5171\u6709 \\(n\\) \u4e2a\u9879\u76ee\uff0c\u6bcf\u4e2a\u9879\u76ee\u7684\u7f16\u53f7\u5206\u522b\u4ece \\(1\\) \u5230 \\(n\\)\uff0c\u73b0\u5728\u6536\u96c6\u5230\u4e86 \\(m\\) \u5f20\u6295\u7968\uff0c\u6bcf\u5f20\u7968\u90fd\u5199\u4e86\u4e00\u4e2a\u6700\u559c\u6b22\u7684\u6e38\u4e50\u9879\u76ee\u7684\u7f16\u53f7\u3002\u73b0\u5728\u60f3\u628a\u6536\u96c6\u5230\u7684\u8fd9\u4e9b\u7968\u6309\u7167\u7968\u4e0a\u7684\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4ee5\u53ca \\(m\\) \u5f20\u7968\u4e0a\u7684\u7f16\u53f7\uff0c\u6c42\u51fa\u6392\u5e8f\u540e\u7684\u6295\u7968\u7f16\u53f7\u3002</p> <p>\u5bf9\u4e8e \\(30\\%\\) \u7684\u6570\u636e\u70b9\uff0c \\(1 \\le m \\le 20\\)\uff1b \u5bf9\u4e8e \\(60\\%\\) \u7684\u6570\u636e\u70b9\uff0c \\(1 \\le m \\le 2000\\)\uff1b \u5bf9\u4e8e\u6240\u6709\u6570\u636e\u70b9\uff0c \\(1 \\le n \\le 999,1 \\le m \\le 100000\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98F-%E5%8F%97%E6%AC%A2%E8%BF%8E%E5%BA%A6%E8%B0%83%E6%9F%A5/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570 \\(n\\) \u548c \\(m\\)\uff0c\u5206\u522b\u8868\u793a\u6e38\u4e50\u9879\u76ee\u603b\u6570\u548c\u6536\u5230\u7684\u6295\u7968\u603b\u6570\u3002</p> <p>\u7b2c\u4e8c\u884c\u8f93\u5165 \\(m\\) \u4e2a\u6574\u6570\uff0c\u4f9d\u6b21\u8868\u793a\u6bcf\u5f20\u6295\u7968\u4e0a\u7684\u6e38\u4e50\u9879\u76ee\u7684\u7f16\u53f7\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98F-%E5%8F%97%E6%AC%A2%E8%BF%8E%E5%BA%A6%E8%B0%83%E6%9F%A5/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b \\(m\\) \u4e2a\u6574\u6570\uff0c\u76f8\u90bb\u6574\u6570\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u4f9d\u6b21\u8868\u793a\u6392\u5e8f\u540e\u7684\u6295\u7968\u7f16\u53f7\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98F-%E5%8F%97%E6%AC%A2%E8%BF%8E%E5%BA%A6%E8%B0%83%E6%9F%A5/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>5 10\n2 5 2 2 5 2 2 2 1 2\n</code></pre> <pre><code>1 2 2 2 2 2 2 2 5 5\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98F-%E5%8F%97%E6%AC%A2%E8%BF%8E%E5%BA%A6%E8%B0%83%E6%9F%A5/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u7701\u6d41\uff1a\u6392\u5e8f\u7ed9\u5b9a\u6570\u7ec4\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvector&lt;int&gt; d;\n\nint main() {\n    int n;\n    scanf(\"%d%d\", &amp;n, &amp;n);\n    for(int i = 1, ia; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;ia), d.push_back(ia);\n    sort(d.begin(), d.end());\n    for(int x : d) printf(\"%d \", x);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98G-%E9%9B%86%E8%AE%AD%E9%A2%98%E5%8D%95/","title":"\u95ee\u9898G - \u96c6\u8bad\u9898\u5355","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a\u7b2c\u56db\u5c4a\u4e0a\u6d77\u5e02\u9752\u5c11\u5e74\u7b97\u6cd5\u7ade\u8d5b\uff08\u5c0f\u5b66\u7ec4\uff09T5/5</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98G-%E9%9B%86%E8%AE%AD%E9%A2%98%E5%8D%95/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98G-%E9%9B%86%E8%AE%AD%E9%A2%98%E5%8D%95/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u5c0f\u7231\u8001\u5e08\u6b63\u5728\u51c6\u5907\u672c\u6b21\u4fe1\u606f\u5b66\u96c6\u8bad\u7684\u9009\u9898\uff0c\u4e3a\u6b64\u4ed6\u5df2\u7ecf\u51c6\u5907\u4e86 \\(n\\) \u9053\u5907\u9009\u8bd5\u9898\uff0c\u6bcf\u9898\u90fd\u6709\u4e00\u4e2a\u96be\u5ea6\u503c\uff0c\u5176\u4e2d\u7b2c \\(i\\) \u9053\u9898\u7684\u96be\u5ea6\u503c\u4e3a \\(a_i\\)\u3002</p> <p>\u7531\u4e8e\u96c6\u8bad\u65f6\u957f\u7684\u9650\u5236\uff0c\u5c0f\u7231\u51c6\u5907\u4ece\u8fd9\u4e9b\u5907\u9009\u8bd5\u9898\u4e2d\u9009\u51fa \\(m\\) \u9053\u8bd5\u9898\u7ec4\u6210\u6b63\u5f0f\u7684\u96c6\u8bad\u9898\u5355\u3002\u4e3a\u4e86\u4fdd\u8bc1\u96c6\u8bad\u7684\u8d28\u91cf\u53ca\u96be\u5ea6\uff0c\u9009\u51fa\u7684 \\(m\\) \u9053\u8bd5\u9898\u4e2d\u9700\u4fdd\u8bc1\u81f3\u5c11\u6709 \\(k\\) \u9053\u8bd5\u9898\u7684\u96be\u5ea6\u4e0d\u4f4e\u4e8e\u7ed9\u5b9a\u7684\u96be\u5ea6\u503c \\(X\\)\u3002</p> <p>\u8bf7\u4f60\u5e2e\u52a9\u5c0f\u7231\u8ba1\u7b97\u4e00\u4e0b\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u9009\u9898\u65b9\u5f0f\uff1f\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u8bf7\u8f93\u51fa\u6700\u7ec8\u65b9\u6848\u6570 \\(\\% 998244353\\) \u5373\u53ef\u3002 \uff08\u6ce8\u610f\uff1a\u9009\u51fa\u76f8\u540c\u7684\u8bd5\u9898\u4f46\u524d\u540e\u987a\u5e8f\u4e0d\u540c\uff0c\u5747\u8ba4\u4e3a\u662f\u540c\u4e00\u79cd\u9009\u6cd5\u3002\uff09</p> <ul> <li>\u5bf9\u4e8e \\(50\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\leq n \\leq 20\\)\uff1b</li> <li>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\leq n \\leq 10^3\\) \uff0c\\(1 \\leq k \\leq m \\leq n\\) \uff0c\\(1 \\leq a_i , X \\leq 10^9\\)\u3002</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98G-%E9%9B%86%E8%AE%AD%E9%A2%98%E5%8D%95/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u5171\u4e09\u884c\uff1a \u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6b63\u6574\u6570 \\(n,m\\)\u3002 \u7b2c\u4e8c\u884c\uff0c\\(n\\) \u4e2a\u6b63\u6574\u6570\uff0c\u5206\u522b\u8868\u793a \\(a_1,a_2,...,a_n\\)\u3002 \u7b2c\u4e09\u884c\uff0c\u4e24\u4e2a\u6b63\u6574\u6570 \\(k,X\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98G-%E9%9B%86%E8%AE%AD%E9%A2%98%E5%8D%95/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u65b9\u6848\u6570\u5bf9 \\(998244353\\) \u53d6\u6a21\u540e\u7684\u7ed3\u679c\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98G-%E9%9B%86%E8%AE%AD%E9%A2%98%E5%8D%95/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>3 2\n10 20 30\n1 20\n</code></pre> <pre><code>3\n</code></pre> <p>\u6837\u4f8b 1 \u89e3\u91ca\uff1a\u53ef\u4ee5\u9009 {10,20},{10,30},{20,30} \u5171 3 \u79cd\u9009\u6cd5\u3002</p> <pre><code>4 2\n5 10 15 20\n1 12\n</code></pre> <pre><code>5\n</code></pre> <p>\u6837\u4f8b 1 \u89e3\u91ca\uff1a\u53ef\u4ee5\u9009 {5,15},{5,20},{10,15},{10,20},{15,20} \u5171 5 \u79cd\u9009\u6cd5\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98G-%E9%9B%86%E8%AE%AD%E9%A2%98%E5%8D%95/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u901a\u8fc7\u6392\u5217\u7ec4\u5408\u8ba1\u7b97\u65b9\u6848\u6570\u3002\u5176\u4e2d\u7ec4\u5408\u6570\u7684\u8ba1\u7b97\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u5404\u6709\u5229\u5f0a\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst lli mod = 998244353;\nconst int MAXn = 1e3 + 9;\nlli d[MAXn], C[MAXn][MAXn], fac[MAXn];\nint can, cant;\n\n// C[m][n] = C[m][n - 1] + C[m - 1][n - 1]\n// \u65f6\u95f4\uff1aO(n^2)\uff1b\u7a7a\u95f4\uff1aO(n^2)\n\nlli calC(int m, int n) {\n    if(m &lt; 0 || n &lt; 0 || m &gt; n) return 0;\n    if(C[m][n]) return C[m][n];\n    if(m == 0 || m == n) return C[m][n] = 1;\n    return C[m][n] = (calC(m, n - 1) + calC(m - 1, n - 1)) % mod;\n}\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%lld\", &amp;d[i]);\n    int k; lli x;\n    scanf(\"%d%lld\", &amp;k, &amp;x);\n    for(int i = 1; i &lt;= n; i ++)\n        d[i] &gt;= x ? can ++ : cant ++;\n    lli ans = 0;\n    for(int i = k, j = m - k; i &lt;= min(m, can) &amp;&amp; j &gt;= 0; i ++, j --)\n        (ans += calC(i, can) * calC(j, cant) % mod) %= mod;\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst lli mod = 998244353;\nconst int MAXn = 1e3 + 9;\nlli d[MAXn], fac[MAXn], ifac[MAXn];\nint can, cant;\n\n// C[m][n] = n! / m! / (n - m)!\n// \u65f6\u95f4\uff1aO(n)\uff1b\u7a7a\u95f4\uff1aO(n)\n\nlli modExp(lli base, lli exp, lli mod) {\n    lli res = 1;\n    while (exp &gt; 0) {\n        if (exp % 2 == 1) (res *= base) %= mod;\n        (base *= base) %= mod;\n        exp /= 2;\n    }\n    return res;\n}\n\nvoid calfac(int x) {\n    fac[0] = fac[1] = 1;\n    for (int i = 2; i &lt;= x; i++)\n        fac[i] = fac[i - 1] * i % mod;\n    ifac[x] = modExp(fac[x], mod - 2, mod);\n    for (int i = x - 1; i &gt;= 0; i--)\n        ifac[i] = ifac[i + 1] * (i + 1) % mod;\n}\n\nlli C(int n, int k) {\n    if (k &gt; n || k &lt; 0) return 0;\n    return fac[n] * ifac[k] % mod * ifac[n - k] % mod;\n}\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i ++)\n        scanf(\"%lld\", &amp;d[i]);\n    int k; lli x;\n    scanf(\"%d%lld\", &amp;k, &amp;x);\n    for (int i = 1; i &lt;= n; i ++)\n        d[i] &gt;= x ? can ++ : cant ++;\n    calfac(max(can, cant));\n    lli ans = 0;\n    for (int i = k; i &lt;= min(m, can); i ++) {\n        int j = m - i;\n        if (j &gt;= 0 &amp;&amp; j &lt;= cant)\n            ans = (ans + C(can, i) * C(cant, j) % mod) % mod;\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre> <p>\u4f7f\u7528 \u5362\u5361\u65af\u5b9a\u7406 \u5feb\u901f\u8ba1\u7b97\u7ec4\u5408\u6570\u3002\u8be6\u89c1\uff1a</p> <ul> <li>OIwiki\uff1a\u5362\u5361\u65af\u5b9a\u7406 - OIwiki</li> <li>\u6d1b\u8c37\uff1aP3807 \u3010\u6a21\u677f\u3011\u5362\u5361\u65af\u5b9a\u7406/Lucas \u5b9a\u7406</li> </ul> <p>\u4ee5\u4e0b\u4ee3\u7801\u539f\u7801\u8f6c\u8f7d\u81ea iai.sh.cn\u4e0a\u201c\u5f20\u8001\u5e08\u201d\u7684\u9898\u89e3\u3002</p> \u00a9\u5f20\u8001\u5e08 from iai.sh.cn<pre><code>#include&lt;bits/stdc++.h&gt;\n#define P 998244353\ntypedef long long ll;\nusing namespace std;\nint n,m,k,X;\nint a[1005];\nll f[1005];\nvoid init()\n{\n    f[0]=1;\n    for(int i=1;i&lt;=1005;i++) f[i]=f[i-1]*i%P;\n}\nll pow_mod(ll a, ll x)\n{\n    ll ret=1;\n    while(x)\n    {\n        if(x&amp;1) ret=ret*a%P;\n        a=a*a%P;\n        x&gt;&gt;=1;\n    }\n    return ret;\n}\nll Lucas(int n, int m)\n{\n    ll ans=1;\n    while( n &amp;&amp; m)\n    {\n        ll nn=n%P, mm=m%P;\n        if(nn&lt;mm) return 0;\n        ans=ans*f[nn]*pow_mod(f[mm]*f[nn-mm]%P, P-2)%P;\n        n/=P, m/=P;\n    }\n    return ans;\n}\nint main()\n{\n    ll ans=0;\n    int kk=0;\n    init(); \n    cin&gt;&gt;n&gt;&gt;m;\n    for(int i=0;i&lt;n;i++)\n        cin&gt;&gt;a[i];\n    cin&gt;&gt;k&gt;&gt;X;\n    for(int i=0;i&lt;n;i++)\n        if(a[i]&gt;=X) kk++;\n    for(int i=k;i&lt;=kk &amp;&amp; i&lt;=m;i++)\n        ans=(ans+Lucas(kk,i)*Lucas(n-kk,m-i)%P)%P;\n    cout&lt;&lt;ans&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98H-%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0/","title":"\u95ee\u9898H - \u6570\u7684\u8ba1\u6570","text":"<p>\u9898\u76ee\u6765\u6e90\uff1aNOIP 2001 \u666e\u53ca\u7ec4 T1/4</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98H-%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98H-%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u7ed9\u51fa\u6b63\u6574\u6570 \\(n\\)\uff0c\u8981\u6c42\u6309\u5982\u4e0b\u65b9\u5f0f\u6784\u9020\u6570\u5217\uff1a</p> <ol> <li>\u53ea\u6709\u4e00\u4e2a\u6570 \\(n\\) \u7684\u6570\u5217\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u5217\u3002</li> <li>\u5728\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u5217\u7684\u672b\u5c3e\u52a0\u5165\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4f46\u662f\u8fd9\u4e2a\u6b63\u6574\u6570\u4e0d\u80fd\u8d85\u8fc7\u8be5\u6570\u5217\u6700\u540e\u4e00\u9879\u7684\u4e00\u534a\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5408\u6cd5\u6570\u5217\u3002</li> </ol> <p>\u8bf7\u4f60\u6c42\u51fa\uff0c\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u5408\u6cd5\u7684\u6570\u5217\u3002\u4e24\u4e2a\u5408\u6cd5\u6570\u5217 \\(a, b\\) \u4e0d\u540c\u5f53\u4e14\u4ec5\u5f53\u4e24\u6570\u5217\u957f\u5ea6\u4e0d\u540c\u6216\u5b58\u5728\u4e00\u4e2a\u6b63\u6574\u6570 \\(i \\leq |a|\\)\uff0c\u4f7f\u5f97 \\(a_i \\neq b_i\\)\u3002</p> <p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6d4b\u8bd5\u70b9\uff0c\u4fdd\u8bc1 \\(1 \\leq n \\leq 10^3\\)\u3002</p> <p>Info</p> <p>\u6ce8\u610f\u6b64\u9898\u539f\u9898\u8868\u8fbe\u6709\u6b67\u4e49\u3002\u5982\u5f53 \\(n = 245\\) \u65f6\uff0c\u6709 \\(11|22|245\\) \u548c \\(1|122|245\\) \u8fd9\u6837\u7684\u60c5\u51b5\u3002\u8fd9\u6837\u7684\u60c5\u51b5\u5e94\u7b97\u4f5c \\(2\\) \u79cd\u60c5\u51b5\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98H-%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u53ea\u6709\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a \\(n\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98H-%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5408\u6cd5\u7684\u6570\u5217\u4e2a\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98H-%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>6\n</code></pre> <pre><code>6\n</code></pre> <p>\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5217\u6709\uff1a\\((6)\\)\u3001\\((6, 1)\\)\u3001\\((6, 2)\\)\u3001\\((6, 3)\\)\u3001\\((6, 2, 1)\\)\u3001\\((6, 3, 1)\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98H-%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98H-%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0/#\u8bb0\u5fc6\u5316\u641c\u7d22","title":"\u8bb0\u5fc6\u5316\u641c\u7d22","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 1e3 + 9;\nlli d[MAXn];    // d[i]: \u4ee5 i \u5f00\u59cb\u7684\u6240\u6709\u60c5\u51b5\n\nvoid f(int x) {\n    for(int y = 0; y &lt;= (x &gt;&gt; 1); y ++) {\n        if(!d[y]) f(y);\n        d[x] += d[y];\n    }\n}\n\nint main() {\n    d[0] = 1;\n    int n;\n    scanf(\"%d\", &amp;n);\n    f(n);\n    printf(\"%lld\", d[n]);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E4%B8%8A%E5%AD%A6%E6%9C%9F%E9%A2%98%E5%8D%95/%E6%8F%90%E9%AB%98%E7%A0%94%E5%AD%A62/%E9%97%AE%E9%A2%98H-%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0/#\u52a8\u6001\u89c4\u5212","title":"\u52a8\u6001\u89c4\u5212","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 1e3 + 9;\nlli d[MAXn];    // d[i]: \u4ee5 [1, i] \u5f00\u59cb\u7684\u6240\u6709\u60c5\u51b5\uff0c\u7c7b\u4f3c\u524d\u7f00\u548c\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i ++)\n        d[i] = d[i - 1] + d[i &gt;&gt; 1] + 1;\n    printf(\"%lld\", d[n &gt;&gt; 1] + 1);\n    // printf(\"%lld\", d[n] - d[n - 1]);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98A-%E5%AE%9D%E8%97%8F%E6%8E%A2%E9%99%A9/","title":"\u95ee\u9898 A: \u5b9d\u85cf\u63a2\u9669","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1a2024NOC-\u7ae5\u521bAI \u9ad8\u4e2d\u7ec4 \u590d\u8d5b T1</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98A-%E5%AE%9D%E8%97%8F%E6%8E%A2%E9%99%A9/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98A-%E5%AE%9D%E8%97%8F%E6%8E%A2%E9%99%A9/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u5728\u4e00\u4e2a\u9065\u8fdc\u7684\u7a0b\u5e8f\u5458\u738b\u56fd\u91cc\uff0c\u6709\u4e00\u5ea7\u795e\u79d8\u7684\u5b9d\u85cf\u4e4b\u5730\uff0c\u4f20\u8bf4\u4e2d\u53ea\u6709\u89e3\u5f00\u4e86\u7279\u5b9a\u5bc6\u7801\u624d\u80fd\u83b7\u5f97\u5b9d\u85cf\u3002\u8fd9\u4e2a\u5bc6\u7801\u5e76\u4e0d\u662f\u590d\u6742\u7684\u6570\u5b57\u6216\u7b26\u53f7\u7ec4\u5408\uff0c\u800c\u662f\u7531\u5143\u97f3\u5b57\u6bcd\u6784\u6210\u7684\u795e\u79d8\u5b57\u7b26\u4e32\u3002\u4f20\u8bf4\u4e2d\u53ea\u6709\u90a3\u4e9b\u61c2\u5f97\u7edf\u8ba1\u5143\u97f3\u5b57\u6bcd\u6570\u91cf\u7684\u52c7\u8005\u624d\u6709\u673a\u4f1a\u627e\u5230\u5b9d\u85cf\u3002\u7ae5\u7ae5\u5728\u524d\u5f80\u5b9d\u85cf\u5730\u7684\u8def\u4e0a\uff0c\u6765\u5230\u4e86\u4e00\u4e2a\u795e\u79d8\u7684\u5c94\u9053\uff0c\u8def\u8fb9\u51fa\u73b0\u4e86\u4e00\u5757\u77f3\u7891\uff0c\u4e0a\u9762\u5199\u7740\uff1a\u201c\u53ea\u6709\u8ba1\u7b97\u51fa\u8fd9\u6bb5\u795e\u79d8\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd\u6570\u91cf\uff0c\u624d\u80fd\u9009\u62e9\u6b63\u786e\u7684\u65b9\u5411\u524d\u8fdb\u3002\u201d</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98A-%E5%AE%9D%E8%97%8F%E6%8E%A2%E9%99%A9/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 \\(s\\:(1 \\le |s| \\le 1 \\times 10^4)\\)\uff0c\u8f93\u5165\u53ef\u4ee5\u5305\u542b\u7a7a\u683c\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98A-%E5%AE%9D%E8%97%8F%E6%8E%A2%E9%99%A9/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5b57\u7b26\u4e32\u4e2d\u5143\u97f3\u5b57\u6bcd\u7684\u6570\u91cf\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98A-%E5%AE%9D%E8%97%8F%E6%8E%A2%E9%99%A9/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>hello world\n</code></pre> <pre><code>3\n</code></pre> <pre><code>please enter\n</code></pre> <pre><code>5\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98A-%E5%AE%9D%E8%97%8F%E6%8E%A2%E9%99%A9/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u6ce8\u610f\uff1a\u8f93\u5165\u53ef\u80fd\u5305\u542b\u7a7a\u683c\u3002\u53ef\u4ee5\u901a\u8fc7\u5faa\u73af <code>cin</code> \u5b57\u7b26\u4e32\u5e76\u591a\u6b21\u8ba1\u7b97\uff0c\u6216\u4f7f\u7528 <code>getline()</code> \u8bfb\u53d6\u6574\u884c\uff0c\u6216\u5faa\u73af\u4f7f\u7528 <code>getchar()</code> \u8bfb\u53d6\u6574\u884c\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nchar datum[5]= {'a','e','i','o','u'};\n\nint main() {\n    string instr;\n    getline(cin,instr);\n    lli res=0;\n    for(ulli i=0; i&lt;instr.length(); i++) {\n        for(int j=0; j&lt;=4; j++)\n            if(instr[i]==datum[j])\n                res++;\n    }\n    printf(\"%lld\",res);\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nchar datum[5]= {'a','e','i','o','u'};\n\nint main() {\n    lli res=0;\n    char chr;\n    while(scanf(\"%c\",&amp;chr)!=EOF)\n        for(int i=0; i&lt;=4; i++)\n            if(datum[i]==chr)\n                res++;\n    printf(\"%lld\",res);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98B-%E6%8C%91%E6%88%98%E8%B5%9B/","title":"\u95ee\u9898 B: \u6311\u6218\u8d5b","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1a2024NOC-\u7ae5\u521bAI \u9ad8\u4e2d\u7ec4 \u590d\u8d5b T2</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98B-%E6%8C%91%E6%88%98%E8%B5%9B/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98B-%E6%8C%91%E6%88%98%E8%B5%9B/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u7ae5\u7a0b\u5b66\u9662\u4e3e\u529e\u4e86\u201c\u8ba1\u7b97\u673a\u5e38\u8bc6\u201d\u3001\u201c\u7f16\u7a0b\u9ad8\u624b\u201d\u4e24\u573a\u6311\u6218\u8d5b\uff0c\u5206\u522b\u6709\uff0c\u4e2a\u5b66\u751f\u62a5\u540d\u3002\u62a5\u540d\u201c\u8ba1\u7b97\u673a\u5e38\u8bc6\u201d\u6311\u6218\u8d5b\u7684\u5b66\u751f\u7f16\u53f7\u4e3a \\(x\\)\uff0c\u62a5\u540d\u201c\u7f16\u7a0b\u9ad8\u624b\"\u6311\u6218\u8d5b\u7684\u5b66\u751f\u7f16\u53f7\u4e3a \\(y_m\\)\uff0c\u6c42\u6709\u591a\u5c11\u4e2a\u5b66\u751f\u65e2\u62a5\u540d\u4e86\u201c\u8ba1\u7b97\u673a\u5e38\u8bc6\"\u6311\u6218\u8d5b\uff0c\u53c8\u62a5\u540d\u4e86\u201c\u7f16\u7a0b\u9ad8\u624b\u201d\u6311\u6218\u8d5b\u3002\u5df2\u77e5\u62a5\u540d\u540c\u4e00\u573a\u6bd4\u8d5b\u7684\u5b66\u751f\u7f16\u53f7\u4e0d\u4f1a\u91cd\u590d\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98B-%E6%8C%91%E6%88%98%E8%B5%9B/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u5171\u4e09\u884c\uff1b</p> <p>\u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570 \\(n,\\: m \\: (1 \\le n,m \\le 1000)\\)\uff0c\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff1b</p> <p>\u7b2c\u4e8c\u884c\uff0c\\(n\\) \u4e2a\u6b63\u6574\u6570\\(x_1 \\dots x_n \\: (1 \\le x_i \\le 1000)\\)\uff0c\u8868\u793a\u62a5\u540d\u201c\u8ba1\u7b97\u673a\u5e38\u8bc6\u201d\u6311\u6218\u8d5b\u7684\u5b66\u751f\u7f16\u53f7\uff0c\u7f16\u53f7\u4e4b\u95f4\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e09\u884c\uff0c\\(m\\) \u4e2a\u6b63\u6574\u6570\\(y_1 \\dots y_n \\: (1 \\le y_i \\le 1000)\\)\uff0c\u8868\u793a\u62a5\u540d\u201c\u7f16\u7a0b\u9ad8\u624b\u201d\u6311\u6218\u8d5b\u7684\u5b66\u751f\u7f16\u53f7\uff0c\u7f16\u53f7\u4e4b\u95f4\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u6ce8\u610f\uff1a\u8f93\u5165\u5b66\u751f\u7f16\u53f7\u4e3a\u4e71\u5e8f\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98B-%E6%8C%91%E6%88%98%E8%B5%9B/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u65e2\u62a5\u540d\u4e86\u201c\u8ba1\u7b97\u673a\u5e38\u8bc6\u201d\u6311\u6218\u8d5b\uff0c\u53c8\u62a5\u540d\u4e86\u201c\u7f16\u7a0b\u9ad8\u624b\u201d\u6311\u6218\u8d5b\u7684\u5b66\u751f\u4eba\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98B-%E6%8C%91%E6%88%98%E8%B5%9B/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>6 6\n1 3 5 7 9 10\n1 2 3 5 7 9\n</code></pre> <pre><code>5\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98B-%E6%8C%91%E6%88%98%E8%B5%9B/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98B-%E6%8C%91%E6%88%98%E8%B5%9B/#\u6570\u7ec4","title":"\u6570\u7ec4","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn=1000+9;\nbool datum[MAXn+9];\n\nint main() {\n    int n,m;\n    scanf(\"%d%d\",&amp;n,&amp;m);\n    int ia;\n    for(int i=1; i&lt;=n; i++) {\n        scanf(\"%d\",&amp;ia);\n        datum[ia]=true;\n    }\n\n    int res=0;\n    for(int j=1; j&lt;=m; j++) {\n        scanf(\"%d\",&amp;ia);\n        if(datum[ia])\n            res++;\n    }\n    printf(\"%d\",res);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98B-%E6%8C%91%E6%88%98%E8%B5%9B/#bitset","title":"bitset","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nbitset&lt;1005&gt; A, B, C;\n\nint main() {\n    int a, b, in;\n    scanf(\"%d%d\", &amp;a, &amp;b);\n    for(int i = 1; i &lt;= a; i ++) {\n        scanf(\"%d\", &amp;in);\n        A[in] = 1;\n    }\n    for(int i = 1; i &lt;= b; i ++) {\n        scanf(\"%d\", &amp;in);\n        B[in] = 1;\n    }\n    C = A &amp; B;\n    printf(\"%d\", C.count());\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98C-%E6%9C%80%E9%95%BF%E9%A1%BA%E7%9C%BC%E5%AD%90%E4%B8%B2/","title":"\u95ee\u9898 C: \u6700\u957f\u987a\u773c\u4e32","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1a2024NOC-\u7ae5\u521bAI \u9ad8\u4e2d\u7ec4 \u590d\u8d5b T3</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98C-%E6%9C%80%E9%95%BF%E9%A1%BA%E7%9C%BC%E5%AD%90%E4%B8%B2/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98C-%E6%9C%80%E9%95%BF%E9%A1%BA%E7%9C%BC%E5%AD%90%E4%B8%B2/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u7ae5\u7ae5\u8ba4\u4e3a\u50cf\u201c\\(\\texttt{abcd}\\)\u201d\uff0c\u201c\\(\\texttt{adfz}\\)\u201d\uff0c\u8fd9\u6837\u6309 ASCII \u7f16\u7801\u7531\u5c0f\u5230\u5927\u6392\u5217\uff0c\u4e14\u8fde\u7eed\u7684\u5b57\u7b26\u4e32\u79f0\u4e3a\u987a\u773c\u4e32\uff0c\u50cf\u201c\\(\\texttt{aaa}\\)\u201d\uff0c\u201c\\(\\texttt{ccbbbaaa}\\)\u201d\uff0c\u201c\\(\\texttt{addba}\\)\u201d\uff0c\u8fd9\u79cd\u540e\u9762\u5b57\u7b26\u6bd4\u524d\u9762\u5b57\u7b26\u7f16\u7801\u5c0f\u6216\u8005\u76f8\u7b49\u7684\u90fd\u4e0d\u662f\u987a\u773c\u4e32\uff0c\u73b0\u5728\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u5176\u4e2d\u7684\u6700\u957f\u987a\u773c\u4e32\uff0c\u8f93\u51fa\u5b83\u7684\u957f\u5ea6\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98C-%E6%9C%80%E9%95%BF%E9%A1%BA%E7%9C%BC%E5%AD%90%E4%B8%B2/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u4e00\u4e2a\u4ec5\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(1000\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98C-%E6%9C%80%E9%95%BF%E9%A1%BA%E7%9C%BC%E5%AD%90%E4%B8%B2/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u957f\u987a\u773c\u4e32\u7684\u957f\u5ea6\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98C-%E6%9C%80%E9%95%BF%E9%A1%BA%E7%9C%BC%E5%AD%90%E4%B8%B2/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>abcdefghhhhhahcde\n</code></pre> <pre><code>8\n</code></pre> <pre><code>cdeabcfghjkmnxyzxxxccc\n</code></pre> <pre><code>13\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98C-%E6%9C%80%E9%95%BF%E9%A1%BA%E7%9C%BC%E5%AD%90%E4%B8%B2/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    string str;\n    getline(cin,str);\n    int len=str.length();\n    int res=1;\n    int i=0;\n    while(i&lt;len){\n        int j;\n        for(j=1;i+j&lt;len;j++){\n            if(str[i+j-1]&gt;=str[i+j]) break;\n            res=max(res,j+1);\n        }\n        i+=j;\n    }\n\n    printf(\"%d\",res);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98D-%E8%B6%85%E7%BA%A7%E5%BC%B9%E7%8F%A0/","title":"\u95ee\u9898 D: \u8d85\u7ea7\u5f39\u73e0","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1a2024NOC-\u7ae5\u521bAI \u9ad8\u4e2d\u7ec4 \u590d\u8d5b T4</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98D-%E8%B6%85%E7%BA%A7%E5%BC%B9%E7%8F%A0/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98D-%E8%B6%85%E7%BA%A7%E5%BC%B9%E7%8F%A0/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>MedalPluS \u548c\u4ed6\u7684\u5c0f\u4f19\u4f34 NOIRP \u53d1\u6398\u4e86\u4e00\u4e2a\u9aa8\u7070\u7ea7\u522b\u7684\u6e38\u620f\u2014\u2014\u8d85\u7ea7\u5f39\u73e0\u3002 \u6e38\u620f\u7684\u5185\u5bb9\u662f\uff1a\u5728\u4e00\u4e2a \\(n\\times n\\) \u7684\u77e9\u9635\u91cc\uff0c\u6709\u82e5\u5e72\u4e2a\u654c\u4eba\uff0c\u4f60\u7684\u5f39\u73e0\u53ef\u4ee5\u6467\u6bc1\u654c\u4eba\uff0c\u4f46\u53ea\u80fd\u653b\u51fb\u4f60\u6240\u5728\u7684\u884c\u3001\u5217\u91cc\u7684\u6240\u6709\u654c\u4eba\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u83b7\u5f97\u4ed6\u4eec\u7684\u5206\u6570\u4e4b\u548c\uff0c\u73b0\u5728\u8bf7\u4f60\u9009\u62e9\u4e00\u4e2a\u4f60\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u80fd\u51fb\u6740\u7684\u654c\u4eba\u6700\u591a\uff0c\u6ce8\u610f\uff0c\u4f60\u4e0d\u80fd\u548c\u654c\u4eba\u5728\u4e00\u4e2a\u5730\u65b9\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98D-%E8%B6%85%E7%BA%A7%E5%BC%B9%E7%8F%A0/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u6709\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c \\(n\\) \u5217\uff0c\u5982\u679c\u6709\u654c\u4eba\u5219\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5426\u5219\u4e3a \\(0\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98D-%E8%B6%85%E7%BA%A7%E5%BC%B9%E7%8F%A0/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u5171\u4e00\u884c\uff0c\u6700\u591a\u5206\u6570\uff0c\u5982\u679c\u8fde\u4f60\u7684\u5bb9\u8eab\u4e4b\u5730\u90fd\u6ca1\u6709\uff0c\u8bf7\u8f93\u51fa\u201c\\(\\texttt{Fail}\\)\u201d\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98D-%E8%B6%85%E7%BA%A7%E5%BC%B9%E7%8F%A0/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>4\n1 1 1 0\n1 1 1 1\n1 1 1 1\n0 1 1 1\n</code></pre> <pre><code>6\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98D-%E8%B6%85%E7%BA%A7%E5%BC%B9%E7%8F%A0/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u9884\u5904\u7406\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u7684 \\(1\\) \u7684\u6570\u91cf\uff0c\u6bcf\u6b21\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(1)\\)\u3002</p> <p>\u5c06\u4e00\u884c\u548c\u4e00\u5217\u4e4b\u548c\u76f8\u52a0\uff0c\u9700\u8981\u6ce8\u610f\u4ea4\u70b9\u88ab\u52a0\u4e86\u4e24\u6b21\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn=1000+9;\nint datum[MAXn+9][MAXn+9];\nint L[MAXn+9],H[MAXn+9];\n\nint main() {\n    int n;\n    scanf(\"%d\",&amp;n);\n    bool fail=true;\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=1; j&lt;=n; j++) {\n            scanf(\"%d\",&amp;datum[i][j]);\n            if(datum[i][j]==0) fail=false;\n            H[i]+=datum[i][j];\n            L[j]+=datum[i][j];\n        }\n    }\n\n    if(fail) {\n        printf(\"Fail\");\n        return 0;\n    }\n    int res=0;\n    for(int i=1; i&lt;=n; i++)\n        for(int j=1; j&lt;=n; j++) {\n            if(!datum[i][j]) {\n                res=max(res,H[i]+L[j]);\n            }\n        }\n    printf(\"%d\",res);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98E-%E7%9B%B8%E9%82%BB%E6%95%B0%E4%B9%8B%E5%92%8C/","title":"\u95ee\u9898 E: \u76f8\u90bb\u6570\u4e4b\u548c","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1a2024NOC-\u7ae5\u521bAI \u9ad8\u4e2d\u7ec4 \u590d\u8d5b T5</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98E-%E7%9B%B8%E9%82%BB%E6%95%B0%E4%B9%8B%E5%92%8C/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98E-%E7%9B%B8%E9%82%BB%E6%95%B0%E4%B9%8B%E5%92%8C/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u4e00\u4e2a\u7531 \\(n\\) \u4e2a\u6570\u7ec4\u6210\u7684\u6570\u5217\uff0c\u6240\u6709\u76f8\u90bb \\(m\\) \u4e2a\u6570\u7684\u548c\u6709 \\(n-m+1\\) \u4e2a\uff0c\u6c42\u5176\u4e2d\u7684\u6700\u5927\u503c\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98E-%E7%9B%B8%E9%82%BB%E6%95%B0%E4%B9%8B%E5%92%8C/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u5171\u4e24\u884c\uff1a</p> <p>\u7b2c\u4e00\u884c\uff0c\\(2\\) \u4e2a\u6574\u6570 \\(n,\\: m\\:(1\\le m\\le n\\le 1\\times 10^5)\\)\uff0c\u6570\u4e0e\u6570\u4e4b\u95f4\u4ee5\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e8c\u884c\uff0c\\(n\\) \u4e2a\u6574\u6570 \\(a\\:(1\\le a\\le 500)\\)\uff0c\u6570\u4e0e\u6570\u4e4b\u95f4\u4ee5\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98E-%E7%9B%B8%E9%82%BB%E6%95%B0%E4%B9%8B%E5%92%8C/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98E-%E7%9B%B8%E9%82%BB%E6%95%B0%E4%B9%8B%E5%92%8C/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>6 3\n11 19 9 12 5 20\n</code></pre> <pre><code>40\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98E-%E7%9B%B8%E9%82%BB%E6%95%B0%E4%B9%8B%E5%92%8C/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u4f7f\u7528\u524d\u7f00\u548c\uff0c\u6bcf\u6b21\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(1)\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn=1e5+9;\nlli adatum[MAXn+9];    // adatum[i]=[1,i]\n\nint main() {\n    int n,m;\n    scanf(\"%d%d\",&amp;n,&amp;m);\n    int ina;\n    for(int i=1; i&lt;=n; i++) {\n        scanf(\"%d\",&amp;ina);\n        adatum[i]=adatum[i-1]+ina;\n    }\n    lli res=0;\n    for(int i=1; i&lt;=n-m+1; i++) {\n        res=max(res,adatum[i+m-1]-adatum[i-1]);\n//      printf(\"%lld\\n\",adatum[i+m-1]-adatum[i-1]);\n    }\n    printf(\"%lld\",res);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98F-%E8%9B%8B%E7%B3%95%E8%A3%85%E7%9B%92/","title":"\u95ee\u9898 F: \u86cb\u7cd5\u88c5\u76d2","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1a2024NOC-\u7ae5\u521bAI \u9ad8\u4e2d\u7ec4 \u590d\u8d5b T6</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98F-%E8%9B%8B%E7%B3%95%E8%A3%85%E7%9B%92/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98F-%E8%9B%8B%E7%B3%95%E8%A3%85%E7%9B%92/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u7ae5\u7ae5\u7684\u5988\u5988\u505a\u4e86 \\(x\\) \u4e2a\u86cb\u7cd5\uff0c\u73b0\u6709 \\(y\\) \u4e2a\u86cb\u7cd5\u76d2\u53ef\u4ee5\u5305\u88c5\u3002\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(V\\) \u7684\u86cb\u7cd5\u76d2\u80fd\u88c5\u5165\u4f53\u79ef\u4e0d\u8d85\u8fc7 \\(V\\) \u7684\u86cb\u7cd5\uff0c\u4e00\u4e2a\u86cb\u7cd5\u53ea\u80fd\u7528\u4e00\u4e2a\u86cb\u7cd5\u76d2\u6765\u88c5\uff0c\u4e00\u4e2a\u86cb\u7cd5\u76d2\u4e5f\u53ea\u80fd\u7528\u6765\u88c5\u4e00\u4e2a\u86cb\u7cd5\u3002\u4e70\u4e00\u4e2a\u86cb\u7cd5\u76d2\u7684\u4ef7\u683c\u7531\u86cb\u7cd5\u76d2\u7684\u5bb9\u91cf\u51b3\u5b9a\uff0c\u5bb9\u91cf\u4e3a \\(V\\) \u7684\u86cb\u7cd5\u76d2\u7684\u4ef7\u683c\u4e3a \\(V\\)\u3002</p> <p>\u8bf7\u4f60\u5e2e\u7ae5\u7ae5\u5988\u5988\u7b97\u4e00\u7b97\uff0c\u600e\u6837\u82b1\u6700\u5c11\u7684\u94b1\u628a \\(x\\) \u4e2a\u86cb\u7cd5\u5168\u90e8\u88c5\u76d2\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98F-%E8%9B%8B%E7%B3%95%E8%A3%85%E7%9B%92/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u5171\u4e09\u884c\u3002</p> <p>\u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6b63\u6574\u6570 \\(x, \\: y\\:(1\\le X,y\\le 1\\times 10^5)\\)\uff0c\u5206\u522b\u8868\u793a\u9700\u8981\u5305\u88c5\u7684\u86cb\u7cd5\u4e2a\u6570\u548c\u73b0\u6709\u86cb\u7cd5\u76d2\u7684\u4e2a\u6570\u3002</p> <p>\u7b2c\u4e8c\u884c\uff0c\\(x\\) \u4e2a\u6b63\u6574\u6570\uff0c\u4f9d\u6b21\u8868\u793a\u6bcf\u4e2a\u86cb\u7cd5\u7684\u4f53\u79ef\uff0c\u6570\u5b57\u4e4b\u95f4\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e09\u884c\uff0c\\(y\\) \u4e2a\u6b63\u6574\u6570\uff0c\u4f9d\u6b21\u8868\u793a\u6bcf\u4e2a\u7cd5\u76d2\u7684\u5bb9\u79ef\uff0c\u6570\u5b57\u4e4b\u95f4\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\uff08\\(1\\le \\text{\u86cb\u7cd5\u7684\u4f53\u79ef}\\le 1\\times 10^4,\\: 1\\le \\text{\u86cb\u7cd5\u76d2\u7684\u5bb9\u79ef}\\le 1\\times 10^4\\)\uff09</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98F-%E8%9B%8B%E7%B3%95%E8%A3%85%E7%9B%92/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\u3002\u5982\u679c\u80fd\u5c06\u6240\u6709\u7684\u86cb\u7cd5\u88c5\u5165\u5df2\u6709\u7684\u76d2\u5b50\uff0c\u5219\u8f93\u51fa\u7528\u6389\u7684\u86cb\u7cd5\u76d2\u6240\u82b1\u7684\u6700\u5c11\u94b1\u6570\uff1b\u5982\u679c\u65e0\u6cd5\u5c06\u6240\u6709\u7684\u86cb\u7cd5\u88c5\u5165 \\(y\\) \u4e2a\u76d2\u5b50\uff0c\u5219\u8f93\u51fa \\(-1\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98F-%E8%9B%8B%E7%B3%95%E8%A3%85%E7%9B%92/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>3 4\n10 1 5\n1 8 11 5\n</code></pre> <pre><code>17\n</code></pre> <pre><code>3 4\n5 10 15\n1 5 8 11\n</code></pre> <pre><code>-1\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98F-%E8%9B%8B%E7%B3%95%E8%A3%85%E7%9B%92/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u7b80\u5355\u8d2a\u5fc3\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn=1e5+9;\nint datum[MAXn+9];\nmultiset&lt;int&gt; boxs;\n\nint main() {\n    int x,y;\n    scanf(\"%d %d\",&amp;x,&amp;y);\n    int maxb=-1,maxd=-1;\n    for(int i=1; i&lt;=x; i++) {\n        scanf(\"%d\",&amp;datum[i]);\n        maxd=max(maxd,datum[i]);\n    }\n    int ina;\n    for(int i=1; i&lt;=y; i++) {\n        scanf(\"%d\",&amp;ina);\n        maxb=max(maxb,ina);\n        boxs.insert(ina);    // O(log(size))\n    }\n    if(maxd&gt;maxb||x&gt;y) {\n        printf(\"-1\");\n        return 0;\n    }\n\n    sort(datum+1,datum+x+1);\n    lli res=0;\n    for(int i=1; i&lt;=x; i++) {\n        auto it=boxs.lower_bound(datum[i]);    // O(log(size))\uff0c\u4e0d\u5c0f\u4e8e\u7ed9\u5b9a\u503c\u7684\u7b2c1\u4e2a\u5143\u7d20\n        if(it==boxs.end()){\n            printf(\"-1\");\n            return 0;\n        }\n        res+=*it;\n        boxs.erase(it);    // O(1)\n    }\n    printf(\"%lld\",res);\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\n\nint main() {\n    int x,y;\n    scanf(\"%d %d\",&amp;x,&amp;y);\n    vector&lt;int&gt; vcake(x), vbox(y);\n    for(int i=0;i&lt;x;i++)\n        scanf(\"%d\",&amp;vcake[i]);\n    for(int i=0;i&lt;y;i++)\n        scanf(\"%d\",&amp;vbox[i]);\n\n    sort(vcake.begin(),vcake.end());\n    sort(vbox.begin(),vbox.end());\n    if(x&gt;y||vcake.back()&gt;vbox.back()){\n        printf(\"-1\");\n        return 0;\n    }\n    multiset&lt;int&gt; sbox(vbox.begin(),vbox.end());\n    lli res=0;\n    for(int i=0; i&lt;x; i++) {\n        auto it=sbox.lower_bound(vcake[i]);    // O(log(size))\uff0c\u4e0d\u5c0f\u4e8e\u7ed9\u5b9a\u503c\u7684\u7b2c1\u4e2a\u5143\u7d20\n        if(it==sbox.end()){\n            printf(\"-1\");\n            return 0;\n        }\n        res+=*it;\n        sbox.erase(it);    // O(1)\n    }\n\n    printf(\"%lld\",res);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98G-%E5%AE%87%E5%AE%99%E8%88%AA%E8%A1%8C/","title":"\u95ee\u9898 G: \u5b87\u5b99\u822a\u884c","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1a2024NOC-\u7ae5\u521bAI \u9ad8\u4e2d\u7ec4 \u590d\u8d5b T7</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98G-%E5%AE%87%E5%AE%99%E8%88%AA%E8%A1%8C/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98G-%E5%AE%87%E5%AE%99%E8%88%AA%E8%A1%8C/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u5c0f\u7a0b\u4f5c\u4e3a\u822a\u5929\u5c40\u7684\u4e00\u540d\u4fa6\u6d4b\u5458\uff0c\u4e00\u76f4\u975e\u5e38\u7ec6\u5fc3\u7684\u5de5\u4f5c\u3002</p> <p>\u67d0\u4e00\u5929\u63a2\u6d4b\u5668\u63a5\u6536\u5230\u4e00\u6761\u795e\u79d8\u7684\u5b87\u5b99\u4fe1\u53f7\uff0c\u5206\u6790\u4e86\u5f88\u4e45\u90fd\u65e0\u6cd5\u7834\u8bd1\uff0c\u822a\u5929\u5c40\u6d3e\u9063\u5c0f\u7a0b\u524d\u5f80\u63a2\u7d22\u3002</p> <p>\u5c0f\u7a0b\u9a7e\u9a76\u98de\u8239\u4f9d\u6b21\u901a\u8fc7\u82e5\u5e72\u9ed1\u6d1e\u5b8c\u6210\u7a7a\u95f4\u8df3\u8dc3\uff0c\u4f46\u9ed1\u6d1e\u4e0e\u9ed1\u6d1e\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u4e00\u5b9a\u8ddd\u79bb\uff0c\u8fd9\u6bb5\u8ddd\u79bb\u9700\u8981\u98de\u8239\u822a\u884c\u3002\u98de\u8239\u5728\u6bcf\u6b21\u8fdb\u5165\u9ed1\u6d1e\u524d\uff0c\u5c0f\u7a0b\u90fd\u4f1a\u628a\u8fd9\u6bb5\u822a\u884c\u7684\u901f\u5ea6\u4e0e\u822a\u884c\u65f6\u95f4\u53d1\u9001\u7ed9\u4f60\uff0c\u8bf7\u4f60\u7f16\u5199\u7a0b\u5e8f\u4f9d\u6b21\u8ba1\u7b97\u6bcf\u6bb5\u7684\u8ddd\u79bb\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98G-%E5%AE%87%E5%AE%99%E8%88%AA%E8%A1%8C/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\:(1\\le n \\le 10)\\)\uff0c\u8868\u793a\u6709\u51e0\u6bb5\u8ddd\u79bb\u3002</p> <p>\u63a5\u4e0b\u6765\u6709 \\(2n\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002\uff08\\(1\\le \\text{\u8be5\u6574\u6570\u7684\u6570\u4f4d} \\le 1000\\)\uff09</p> <p>\u6bcf\u4e24\u884c\u8868\u793a\u4e00\u7ec4\u6570\u636e\uff0c\u4f9d\u6b21\u8868\u793a\u901f\u5ea6\uff08\\(\\text{m/s}\\)\uff09\u548c\u65f6\u95f4\uff08\\(\\text{s}\\)\uff09\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98G-%E5%AE%87%E5%AE%99%E8%88%AA%E8%A1%8C/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa \\(n\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u6bb5\u8ddd\u79bb\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98G-%E5%AE%87%E5%AE%99%E8%88%AA%E8%A1%8C/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>4\n0\n0\n12120\n111\n10020546\n180\n1280\n5000\n</code></pre> <pre><code>0\n1345320\n1803698280\n6400000\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98G-%E5%AE%87%E5%AE%99%E8%88%AA%E8%A1%8C/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u9898\u610f\u7701\u6d41\uff1a\u7ed9\u51fa \\(T\\:(1\\le T\\le 10)\\) \u7ec4\u6570\u636e\uff0c\u4f7f\u7528\u9ad8\u7cbe\u5ea6\u7b97\u6cd5\u6c42\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98G-%E5%AE%87%E5%AE%99%E8%88%AA%E8%A1%8C/#\u9ad8\u7cbe\u5ea6\u4e58\u6cd5","title":"\u9ad8\u7cbe\u5ea6\u4e58\u6cd5","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n//const int MAXl=10;\nconst int MAXl=1000+9;\nint a[MAXl+9], b[MAXl+9], c[2*MAXl+9];\n\nint main(){\n    int n;\n    scanf(\"%d\",&amp;n);\n    string stra,strb;\n    for(int iout=1;iout&lt;=n;iout++){\n        cin &gt;&gt; stra &gt;&gt; strb;\n        if(stra==\"0\"||strb==\"0\"){\n            printf(\"0\\n\");\n            continue;\n        }\n        int lena=stra.length(), lenb=strb.length();\n        for(int i=1;i&lt;=lena+lenb+9;i++)\n            c[i]=0;\n        for(int i=1;i&lt;=lena;i++) a[i]=stra[lena-i]-'0';\n        for(int i=1;i&lt;=lenb;i++) b[i]=strb[lenb-i]-'0';\n        for(int i=1;i&lt;=lenb;i++)\n            for(int j=1;j&lt;=lena;j++)\n                c[i+j-1]+=a[j]*b[i];\n        for(int i=1;i&lt;=lena+lenb;i++)\n            if(c[i]&gt;9){\n                c[i+1]+=c[i]/10;\n                c[i]%=10;\n            }\n        int endc=lena+lenb;\n        while(c[endc]==0&amp;&amp;endc&gt;1)\n            endc--;\n        for(int i=endc;i&gt;=1;i--)\n            printf(\"%d\",c[i]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95A/%E9%97%AE%E9%A2%98G-%E5%AE%87%E5%AE%99%E8%88%AA%E8%A1%8C/#\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","title":"\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362","text":"<p>\u4ee3\u7801\u4fee\u6539\u81ea \u00a9Trilarflagz\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define ld long double\n#define mem0(x) memset((x),0,sizeof(x))\n#define fill0(x) fill((x), (x)+MAXn, cp(0,0))\nusing namespace std;\ntypedef complex&lt;ld&gt; cp;\nconst int MAXn=1e4+9;\nconst ld PI = acos(-1);\ncp a[MAXn+9], b[MAXn+9];\nint rev[MAXn+9], ans[MAXn+9];\nchar s1[MAXn+9], s2[MAXn+9];\n\nvoid fft(cp *a, int n, int inv) {    // a: \u8981\u64cd\u4f5c\u7684\u7cfb\u6570, n: \u5e8f\u5217\u957f\u5ea6\n    for(int i=0; i&lt;n; i++) {\n        if(i&lt;rev[i])    // \u9632\u6b62\u540c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4e24\u6b21\uff0c\u56de\u5230\u5b83\u539f\u6765\u7684\u4f4d\u7f6e\n            swap(a[i], a[rev[i]]);\n    }\n    for(int h=1; h&lt;n; h*=2) {    // h: \u51c6\u5907\u5408\u5e76\u5e8f\u5217\u7684\u957f\u5ea6\u7684\u4e8c\u5206\u4e4b\u4e00\n        cp wn = exp(cp(0, inv*PI/h));    // \u6c42\u5355\u4f4d\u6839w_n^1\n        for(int j=0; j&lt;n; j+=h*2) {    // j: \u5408\u5e76\u5230\u4e86\u54ea\u4f4d\n            cp w(1, 0);\n            for(int k=j; k&lt;j+h; k++) {    // \u5de6\u534a\n                cp x=a[k];\n                cp y=w*a[k+h];\n                a[k]=x+y;    // \u8774\u8776\u53d8\u6362\n                a[k+h]=x-y;\n                w*=wn;    // \u6c42w_n^k\n            }\n        }\n    }\n    if(inv==-1)    // IFFT\u6c42\u5012\u6570\n        for(int i=0; i&lt;n; i++)\n            a[i]/=n;\n    return;\n}\n\nint main() {\n    int t;\n    scanf(\"%d\",&amp;t);\n    for(int iout=1; iout&lt;=t; iout++){\n        mem0(s1); mem0(s2); mem0(rev); mem0(ans);\n        fill0(a); fill0(b);\n        scanf(\"%s%s\", s1, s2);\n        int len1=strlen(s1), len2=strlen(s2);\n        int n=max(len1, len2);\n        // \u5b58\u653e\u5728\u5b9e\u90e8\n        for(int i=0; i&lt;len1; i++)\n            a[i]=(ld)(s1[len1-i-1]-'0');\n        for(int i=0; i&lt;len2; i++)\n            b[i]=(ld)(s2[len2-i-1]-'0');\n        int k=1, s=2;    // k: \u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u7684\u4f4d\u6570\n        while((1&lt;&lt;k)&lt;2*n-1){\n            k++;\n            s&lt;&lt;=1;\n        }\n        // \u521d\u59cb\u5316\u6bcf\u4e2a\u4f4d\u7f6e\u6700\u7ec8\u5230\u8fbe\u7684\u4f4d\u7f6e\uff08\u4f4d\u53cd\u8f6c\u4f18\u5316\uff09\n        int len=1&lt;&lt;k;\n        for(int i=0; i&lt;len; i++)\n            rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(k-1));\n\n        fft(a, s, 1);\n        fft(b, s, 1);\n        for(int i=0; i&lt;s; i++)\n            a[i]*=b[i]; \n        fft(a, s, -1);\n\n        // \u8fdb\u4f4d\u4fdd\u5b58\u7b54\u6848\u7684\u6bcf\u4e00\u4f4d\n        for(int i=0; i&lt;s; i++) {\n            // \u5b9e\u90e8\u56db\u820d\u4e94\u5165\uff08\u865a\u90e8\u5e94\u7ea6\u4e3a0\uff09\n            ans[i]+=(int)(a[i].real()+0.5);\n            ans[i+1]+=ans[i]/10;\n            ans[i]%=10;\n        }\n        while(!ans[s]&amp;&amp;s&gt;-1) s--;\n        if(s==-1)\n            printf(\"0\\n\");\n        else{\n            for(int i=s; i&gt;=0; i--)\n                printf(\"%d\", ans[i]);\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/","title":"\u95ee\u9898 A: \u559d\u6c7d\u6c34","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1a\u7b2c\u5341\u4e5d\u5c4a\u5168\u56fd\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u8054\u8d5b\u201c\u897f\u5357\u4f4d\u80b2\u676f\u201d\u4e0a\u6d77\u8d5b\u533a\u5c0f\u5b66\u7ec4\u590d\u8d5b T2</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u6c42\u77e5\u5c0f\u5b66\u7684 \\(n\\) \u4e2a\u5b66\u751f\u5230\u4e1c\u65b9\u7eff\u6d32\u79cb\u6e38\uff0c\u4f11\u606f\u65f6\u559d\u6c7d\u6c34\u3002\u5728\u7eff\u6d32\u5546\u5e97\u5546\u54c1\u724c\u4e0a\u5199\u7740\uff1a</p> <ol> <li>\u4e70 \\(1\\) \u74f6\u6c7d\u6c34\u5b9a\u4ef7 \\(1.40\\) \u5143\uff0c\u559d \\(1\\) \u74f6\u6c7d\u6c34\uff08\u74f6\u4e0d\u5e26\u8d70\uff09\\(1\\) \u5143\uff1b</li> <li>\u4e3a\u8282\u7ea6\u8d44\u6e90\uff0c\u89c4\u5b9a \\(3\\) \u4e2a\u7a7a\u74f6\u53ef\u6362\u56de \\(1\\) \u74f6\u6c7d\u6c34\uff0c\u6216 \\(20\\) \u4e2a\u7a7a\u74f6\u53ef\u6362\u56de7\u74f6\u6c7d\u6c34\uff1b</li> <li>\u4e3a\u65b9\u4fbf\u987e\u5ba2\uff0c\u53ef\u5148\u501f\u540e\u8fd8\u3002\u4f8b\u5982\u501f \\(1\\) \u74f6\u6c7d\u6c34\uff0c\u8fd8 \\(3\\) \u4e2a\u7a7a\u74f6\uff1b\u6216\u501f \\(7\\) \u74f6\u6c7d\u6c34\uff0c\u8fd8 \\(20\\) \u4e2a\u7a7a\u74f6\u3002</li> </ol> <p>\u95ee \\(n\\) \u4e2a\u5b66\u751f\u6bcf\u4eba\u559d \\(1\\) \u74f6\u6c7d\u6c34\uff0c\u81f3\u5c11\u9700\u591a\u5c11\u5143\uff1f</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u6b63\u6574\u6570 \\(n\\) \u7684\u503c\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u81f3\u5c11\u9700\u4ed8\u6b3e\u591a\u5c11\u5143\uff08\u56db\u820d\u4e94\u5165\u4fdd\u7559\u5c0f\u6570 \\(2\\) \u4f4d\uff09\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>11\n</code></pre> <pre><code>10.40\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u6cd51\uff1a\u52a8\u6001\u89c4\u5212 \\(O(n)\\) , \\(O(m+n)\\) </li> <li>\u6cd52\uff1a\u8d2a\u5fc3 \\(O(\\frac{n}{20})\\) , \\(O(\\frac{mn}{20})\\) </li> <li>\u6cd53\uff1a\u5b8c\u5168\u8d2a\u5fc3 \\(O(1)\\) , \\(O(m)\\) </li> </ul> <p>\u7b2c\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u672c\u9898\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u5982\u679c\u6709 \\(m\\) \u6b21\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/#\u9898\u76ee\u5206\u6790","title":"\u9898\u76ee\u5206\u6790","text":"<p>\u76f8\u5f53\u4e8e\u4ee5\u4e0b \\(3\\) \u79cd\u65b9\u6848\uff1a</p> <ul> <li>20\u4eba\uff0c18.2\u5143</li> <li>3\u4eba\uff0c2.8\u5143</li> <li>1\u4eba\uff0c1.0\u5143</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/#\u6cd51\u52a8\u6001\u89c4\u5212","title":"\u6cd51\uff1a\u52a8\u6001\u89c4\u5212","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int MAXn = 1e7 + 9;\nint d[MAXn];\n\nsigned main() {\n    int n;\n    scanf(\"%lld\", &amp;n);\n    fill(d, d + n + 1, LLONG_MAX);\n    d[0] = 0;\n    for(int i = 1; i &lt;= n; i ++) {\n        if(i -  1 &gt;= 0) d[i] = min(d[i], d[i -  1] +  10);\n        if(i -  3 &gt;= 0) d[i] = min(d[i], d[i -  3] +  28);\n        if(i - 20 &gt;= 0) d[i] = min(d[i], d[i - 20] + 182);\n    }\n    printf(\"%lld.%lld0\\n\", d[n]/10, d[n]%10);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/#\u6cd52\u8d2a\u5fc3","title":"\u6cd52\uff1a\u8d2a\u5fc3","text":"<p>from: \u5f20\u8001\u5e08</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int n, t, x, y;\n    double p, m;\n    cin &gt;&gt; n;\n    p = 1.4;\n    m = 2 * n;\n    for(x = 0; x &lt;= n/20; x ++) {\n        t = n - 20 * x;\n        y = t / 3;\n        t = n - 20 * x - 3 * y;\n        if((13 * x + 2 * y) * p + t &lt; m)\n            m = (13 * x + 2 * y) * p + t;\n    }\n    cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; m &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98A-%E5%96%9D%E6%B1%BD%E6%B0%B4/#\u6cd53\u5b8c\u5168\u8d2a\u5fc3","title":"\u6cd53\uff1a\u5b8c\u5168\u8d2a\u5fc3","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\n\nsigned main() {\n    int n;\n    scanf(\"%lld\", &amp;n);\n    int ans = 0;\n    ans += (n / 20) * 182; n %= 20;\n    ans += (n /  3) *  28; n %=  3;\n    ans += n * 10;\n    printf(\"%lld.%lld0\\n\", ans/10, ans%10);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98B-%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/","title":"\u95ee\u9898 B: \u9012\u589e\u5e8f\u5217","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 P1062 (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1aNOIP 2006 \u666e\u53ca\u7ec4 T4</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98B-%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98B-%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 \\(k\\)\uff08\\(3\\leq k\\leq 15\\)\uff09\uff0c\u628a\u6240\u6709 \\(k\\) \u7684\u65b9\u5e42\u53ca\u6240\u6709\u6709\u9650\u4e2a\u4e92\u4e0d\u76f8\u7b49\u7684 \\(k\\) \u7684\u65b9\u5e42\u4e4b\u548c\u6784\u6210\u4e00\u4e2a\u9012\u589e\u7684\u5e8f\u5217\uff0c\u4f8b\u5982\uff0c\u5f53 \\(k = 3\\) \u65f6\uff0c\u8fd9\u4e2a\u5e8f\u5217\u662f\uff1a</p> <p>\\(1, 3, 4, 9, 10, 12, 13, \\ldots\\)</p> <p>\uff08\u8be5\u5e8f\u5217\u5b9e\u9645\u4e0a\u5c31\u662f\uff1a\\(3^0,3^1,3^0+3^1,3^2,3^0+3^2,3^1+3^2,3^0+3^1+3^2,\u2026\\)\uff09</p> <p>\u8bf7\u4f60\u6c42\u51fa\u8fd9\u4e2a\u5e8f\u5217\u7684\u7b2c \\(N\\) \u9879\u7684\u503c\uff0c\u7528 \\(10\\) \u8fdb\u5236\u6570\u8868\u793a\u3002</p> <p>\u4f8b\u5982\uff0c\u5bf9\u4e8e \\(k = 3\\)\uff0c\\(N = 100\\)\uff0c\u6b63\u786e\u7b54\u6848\u5e94\u8be5\u662f \\(981\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98B-%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u4e24\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570 \\(k, N\\)\uff08\\(3\\leq k\\leq 15\\)\uff0c\\(10\\leq N\\leq 1000\\)\uff09\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98B-%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u4e2a\u6b63\u6574\u6570\u3002\u6574\u6570\u524d\u4e0d\u8981\u6709\u7a7a\u683c\u548c\u5176\u4ed6\u7b26\u53f7\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98B-%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>3 100\n</code></pre> <pre><code>981\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98B-%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u6cd51\uff1a\u8fdb\u5236\u8f6c\u6362 \\(O(\\log n)\\)</li> <li>\u6cd52\uff1a\u751f\u6210\u6cd5 \\(O(n)\\)</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98B-%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/#\u6cd51\u8fdb\u5236\u8f6c\u6362","title":"\u6cd51\uff1a\u8fdb\u5236\u8f6c\u6362","text":"<p>\u7c7b\u4f3c\u5feb\u901f\u5e42\u7b97\u6cd5\u3002</p> \u5feb\u901f\u5e42\u6a21\u677f <p>\u5728 \\(O(\\log n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6c42\u51fa \\(y^x\\)\uff1a</p> <pre><code>while(x) {\n    if(x &amp; 1) ans *= y;\n    y *= y;\n    x &gt;&gt;= 1;\n}\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\n\nsigned main() {\n    int k, n;\n    scanf(\"%lld%lld\", &amp;k, &amp;n);\n    int ans = 0, x = 1;\n    while(n) {\n        if(n &amp; 1) ans += x;\n        x *= k;\n        n &gt;&gt;= 1;\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98B-%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/#\u6cd52\u751f\u6210\u6cd5","title":"\u6cd52\uff1a\u751f\u6210\u6cd5","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int MAXn = 1e3 + 9;\nint d[MAXn];\n\nsigned main() {\n    int k, n;\n    scanf(\"%lld%lld\", &amp;k, &amp;n);\n    d[1] = 1;\n    int p1 = 1, p2 = 1;\n    for(int i = 2; i &lt;= n; i ++) {\n        int r1 = d[p1] * k, r2 = d[p2] * k + 1;\n        d[i] = min(r1, r2);\n        if(d[i] == r1) p1 ++;\n        if(d[i] == r2) p2 ++;\n    }\n    printf(\"%lld\", d[n]);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98C-%E5%87%A0%E4%B9%8E%E6%98%AF%E7%B4%A0%E6%95%B0/","title":"\u95ee\u9898 C: \u51e0\u4e4e\u662f\u7d20\u6570","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 UVA10539 | UVA 10539</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98C-%E5%87%A0%E4%B9%8E%E6%98%AF%E7%B4%A0%E6%95%B0/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98C-%E5%87%A0%E4%B9%8E%E6%98%AF%E7%B4%A0%E6%95%B0/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>Almost prime numbers are the non-prime numbers which are divisible by only a single prime number.</p> <p>In this problem your job is to write a program which finds out the number of almost prime numbers within a certain range.</p> <p>Info</p> <p>Wikipedia \u5173\u4e8e\u201c\u51e0\u4e4e\u662f\u7d20\u6570\u6570\u201d\u7684\u4ecb\u7ecd\uff1aAlmost prime - Wikipedia</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98C-%E5%87%A0%E4%B9%8E%E6%98%AF%E7%B4%A0%E6%95%B0/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>First line of the input file contains an integer \\(N (N \\le 600)\\) which indicates how many sets of inputs are there. Each of the next N lines make a single set of input. Each set contains two integer numbers low and high \\((0 &lt; low \\ge high &lt; 1012)\\).</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98C-%E5%87%A0%E4%B9%8E%E6%98%AF%E7%B4%A0%E6%95%B0/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>For each line of input except the first line you should produce one line of output. This line contains a single integer, which indicates how many almost prime numbers are within the range (inclusive) low . . . high.</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98C-%E5%87%A0%E4%B9%8E%E6%98%AF%E7%B4%A0%E6%95%B0/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>3\n1 10\n1 20\n1 5\n</code></pre> <pre><code>3\n4\n1\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98C-%E5%87%A0%E4%B9%8E%E6%98%AF%E7%B4%A0%E6%95%B0/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u57c3\u5f0f\u7b5b + \u4e8c\u5206\u67e5\u627e \\(O(n\\log n)\\)</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98C-%E5%87%A0%E4%B9%8E%E6%98%AF%E7%B4%A0%E6%95%B0/#\u57c3\u5f0f\u7b5b--\u4e8c\u5206\u67e5\u627e","title":"\u57c3\u5f0f\u7b5b + \u4e8c\u5206\u67e5\u627e","text":"<p>Warning</p> <p>\u6ce8\u610f\u4e8c\u5206\u67e5\u627e\u4e2d <code>lower_bound()</code> \u548c <code>upper_bound()</code>\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int MAXn = 1e6 + 9, MAX = 1e12 + 9;\nvector&lt;int&gt; prime;\nbool notp[MAXn + 9];\n\nsigned main() {\n    for(int i = 2; i &lt;= MAXn; i ++) {\n        if(!notp[i]) {\n            for(int j = i * i; j &lt;= MAXn; j += i) notp[j] = true;\n            for(int j = i * i; j &lt;= MAX; j *= i) prime.push_back(j);\n        }\n    }\n    sort(prime.begin(), prime.end());\n    int l, r;\n    scanf(\"%lld%lld\", &amp;l, &amp;r);\n    auto pl = lower_bound(prime.begin(), prime.end(), l);\n    auto pr = upper_bound(prime.begin(), prime.end(), r);\n    printf(\"%lld\\n\", pr - pl);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98D-%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%92%8C/","title":"\u95ee\u9898 D: \u6700\u5c0f\u516c\u500d\u6570\u7684\u6700\u5c0f\u548c","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 UVA10791 | UVA 10791</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98D-%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%92%8C/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98D-%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%92%8C/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>LCM (Least Common Multiple) of a set of integers is defined as the minimum number, which is a multiple of all integers of that set. It is interesting to note that any positive integer can be expressed as the LCM of a set of positive integers. For example \\(12\\) can be expressed as the LCM of \\(1\\), \\(12\\) or \\(12\\), \\(12\\) or \\(3\\), \\(4\\) or \\(4\\), \\(6\\) or \\(1\\), \\(2\\), \\(3\\), \\(4\\) etc.</p> <p>In this problem, you will be given a positive integer \\(N\\). You have to find out a set of at least two positive integers whose LCM is \\(N\\). As infinite such sequences are possible, you have to pick the sequence whose summation of elements is minimum. We will be quite happy if you just print the summation of the elements of this set. So, for \\(N = 12\\), you should print \\(4+3 = 7\\) as LCM of \\(4\\) and \\(3\\) is \\(12\\) and \\(7\\) is the minimum possible summation.</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98D-%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%92%8C/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>The input file contains at most 100 test cases. Each test case consists of a positive integer \\(N (1 \\le N \\le 2^{31} \u2212 1)\\).</p> <p>Input is terminated by a case where \\(N = 0\\). This case should not be processed. There can be at most \\(100\\) test cases.</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98D-%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%92%8C/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>Output of each test case should consist of a line starting with \u2018\\(\\texttt{Case #: }\\)\u2019 where \\(\\texttt{#}\\) is the test case number. It should be followed by the summation as specified in the problem statement. Look at the output for sample input for details.</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98D-%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%92%8C/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>12\n10\n5\n0\n</code></pre> <pre><code>Case 1: 7\nCase 2: 7\nCase 3: 6\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98D-%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%92%8C/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u6570\u5b66 \\(O(\\sqrt n)\\)</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98D-%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%92%8C/#\u6570\u5b66","title":"\u6570\u5b66","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long int\n\nsigned main() {\n    int n, T = 0;\n    while(scanf(\"%lld\", &amp;n) != EOF &amp;&amp; n != 0) {\n        T ++;\n        if(n == 1) {printf(\"Case %lld: 2\\n\", T); continue; }\n        int m = n, ans = 0, now = 0, k = 0;\n        for(int i = 2; i * i &lt;= n &amp;&amp; m != 1; i ++) {\n            now = 1;\n            while(m % i == 0 &amp;&amp; m != 1) {\n                now *= i;\n                m /= i;\n            }\n            if(now != 1) k ++, ans += now;\n        }\n        if(m != 1) {\n            ans += m;\n            k ++;\n        }\n        if(k == 1) printf(\"Case %lld: %lld\\n\", T, n + 1);\n        else printf(\"Case %lld: %lld\\n\", T, ans);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98E-%E6%B5%B7%E5%85%8B%E6%96%AF/","title":"\u95ee\u9898 E: \u6d77\u514b\u65af","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1a\u201c\u79d1\u5927\u56fd\u521b\u676f\u201d2023\u5e74\u5b89\u5fbd\u7701\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u79d1\u666e\u65e5\u6d3b\u52a8\u5c0f\u5b66\u7ec4 T4</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98E-%E6%B5%B7%E5%85%8B%E6%96%AF/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98E-%E6%B5%B7%E5%85%8B%E6%96%AF/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u4e3a\u4e86\u5199\u4f5c\u4e1a\uff0c\u5c0f\u53ef\u53ef\u548c\u5c0f\u591a\u5728\u4e0b\u4e00\u79cd\u5947\u602a\u7684\u68cb\u2014\u2014hex \u68cb\u3002</p> <p>\u5982\u4e0b\u662f\u4e00\u4e2a\u8fd9\u79cd\u68cb\u7684\u68cb\u76d8\uff0c\u5b83\u53ef\u80fd\u53ef\u4ee5\u5e2e\u52a9\u4f60\u7406\u89e3\u4e0b\u9762\u7684\u9898\u610f\uff1a</p> <p></p> <p>\u8fd9\u79cd\u68cb\u7684\u89c4\u5219\u5982\u4e0b\uff1a\u68cb\u76d8\u7531 \\(N \\times N\\) \u4e2a\u516d\u8fb9\u5f62\u683c\u5b50\u6784\u6210\u3002</p> <p>\u79f0\u4e24\u4e2a\u683c\u5b50\u76f8\u8fde\u901a\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u683c\u5b50\u5bf9\u5e94\u7684\u516d\u8fb9\u5f62\u5171\u8fb9\u3002\u5c06\u4ece\u4e0a\u5f80\u4e0b\u7b2c \\(i\\) \u884c\u4ece\u5de6\u5230\u53f3\u7b2c \\(j\\) \u4e2a\u683c\u5b50\u79f0\u4e3a \\((i, j)\\)\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4e0d\u5728\u8fb9\u754c\u4e0a\u7684\u683c\u5b50 \\((i, j)\\)\uff0c\u5b83\u548c \\((i, j + 1)\\)\u3001\\((i, j \u2212 1)\\)\u3001\\((i + 1, j)\\)\u3001\\((i + 1, j \u2212 1)\\)\u3001\\((i \u2212 1, j)\\)\u3001\\((i \u2212 1, j + 1)\\) \u8fd9\u4e9b\u683c\u5b50\u76f8\u8fde\u901a\uff0c\u800c\u8fb9\u754c\u4e0a\u7684\u683c\u5b50\u53ea\u4e0e\u4e0a\u8ff0\u683c\u5b50\u4e2d\u5b58\u5728\u7684\u683c\u5b50\u76f8\u8fde\u901a\u3002</p> <p>\u4e24\u4eba\u8f6e\u6d41\u4e0b\u68cb\uff0c\u5c0f\u53ef\u53ef\u5148\u624b\uff0c\u5c0f\u53ef\u53ef\u6bcf\u6b21\u9009\u4e00\u4e2a\u7a7a\u7684\u683c\u5b50\u4e0b\u4e00\u4e2a\u7ea2\u8272\u68cb\u5b50\uff0c\u5c0f\u591a\u6bcf\u6b21\u9009\u4e00\u4e2a\u7a7a\u7684\u683c\u5b50\u4e0b\u4e00\u4e2a\u84dd\u8272\u68cb\u5b50\uff0c\u5982\u679c\u5c0f\u53ef\u53ef\u5c06\u4e0a\u4e0b\u4e24\u6761\u8fb9\u754c\u7528\u7ea2\u8272\u68cb\u5b50\u8fde\u901a\u4e86\uff0c\u90a3\u4e48\u5c0f\u53ef\u53ef\u80dc\uff1b\u5982\u679c\u5c0f\u591a\u5c06\u5de6\u53f3\u4e24\u6761\u8fb9\u754c\u7528\u84dd\u8272\u68cb\u5b50\u8fde\u901a\u4e86\uff0c\u90a3\u4e48\u5c0f\u591a\u80dc\u3002</p> <p>\u63a5\u4e0b\u6765\u7ed9\u51fa\u82e5\u5e72\u4e2a\u5c40\u9762\uff0c\u8bf7\u4f60\u5224\u65ad\u6bcf\u4e00\u5c40\u662f\u5c0f\u53ef\u53ef\u80dc\uff0c\u8fd8\u662f\u5c0f\u591a\u80dc\uff0c\u8fd8\u662f\u76ee\u524d\u6ca1\u6709\u4eba\u83b7\u5f97\u80dc\u5229\uff08\u5bb9\u6613\u8bc1\u660e\uff0c\u4e0d\u53ef\u80fd\u4e24\u4eba\u90fd\u8fbe\u5230\u83b7\u80dc\u6761\u4ef6\uff09\u3002</p> <p>\u5bf9\u4e8e \\(20 \\%\\) \u7684\u6570\u636e\uff0c\u6ee1\u8db3 \\(1 \\le N \\le 3\\)\u3002 \u5bf9\u4e8e\u53e6\u5916 \\(40 \\%\\) \u7684\u6570\u636e\uff0c\u6ee1\u8db3\u7ed9\u51fa\u7684\u68cb\u5c40\u5df2\u7ecf\u5206\u51fa\u80dc\u8d1f\u3002 \u5bf9\u4e8e \\(100 \\%\\) \u7684\u6570\u636e\uff0c\u6ee1\u8db3 \\(1 \\le T \\le 10, 1 \\le N \\le 100\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98E-%E6%B5%B7%E5%85%8B%E6%96%AF/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(T\\)\uff0c\u4ee3\u8868\u4ed6\u4eec\u4e0b\u4e86 \\(T\\) \u76d8\u68cb\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e00\u76d8\u68cb\uff1a</p> <p>\u8f93\u5165\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(N\\)\uff0c\u4ee3\u8868\u76ee\u524d\u8fd9\u76d8\u68cb\u7684\u68cb\u76d8\u7684\u5927\u5c0f\u3002</p> <p>\u4e4b\u540e \\(N\\) \u884c\uff0c\u6bcf\u884c \\(N\\) \u4e2a \\(\u22121, 0, 1\\) \u4e2d\u7684\u6574\u6570\uff0c\u7b2c \\(i\\) \u884c\u7684\u7b2c \\(j\\) \u4e2a\u6574\u6570\u4ee3\u8868\u683c\u5b50 \\((i, j)\\) \u7684\u72b6\u6001\uff0c\u5982\u679c\u4e3a \\(\u22121\\) \u5219\u8be5\u683c\u5b50\u4e2d\u4e3a\u84dd\u8272\u68cb\u5b50\uff0c\u5982\u679c\u4e3a \\(0\\) \u5219\u8be5\u683c\u5b50\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a \\(1\\) \u5219\u8be5\u683c\u5b50\u4e2d\u4e3a\u7ea2\u8272\u68cb\u5b50\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98E-%E6%B5%B7%E5%85%8B%E6%96%AF/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u5171 \\(T\\) \u884c\uff0c\u8bf7\u5bf9\u4e8e\u6bcf\u4e2a\u5c40\u9762\uff0c\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a\u5982\u679c\u5c0f\u53ef\u53ef\u80dc\uff0c\u5219\u8f93\u51fa \\(\\texttt{ke}\\)\uff1b\u5982\u679c\u5c0f\u591a\u80dc\uff0c\u5219\u8f93\u51fa \\(\\texttt{do}\\)\uff1b\u5982\u679c\u76ee\u524d\u4e24\u4eba\u90fd\u8fd8\u672a\u83b7\u80dc\uff0c\u5219\u8f93\u51fa \\(\\texttt{yet}\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98E-%E6%B5%B7%E5%85%8B%E6%96%AF/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>3\n4\n0 1 0 -1\n0 -1 1 0\n-1 -1 1 0\n0 0 1 0\n4\n0 1 1 -1\n0 -1 1 0\n-1 -1 1 0\n0 0 1 0\n4\n0 1 -1 -1\n0 -1 1 1\n-1 -1 1 0\n0 0 1 0\n</code></pre> <pre><code>yet\nke\ndo\n</code></pre> <p>\u5728\u7b2c\u4e00\u4e2a\u68cb\u76d8\u4e2d\uff0c\u4e0d\u5b58\u5728\u5c06\u4e0a\u4e0b\u8fb9\u754c\u8fde\u901a\u7684\u7ea2\u8272\u68cb\u5b50\u5e8f\u5217\uff0c\u4e5f\u4e0d\u5b58\u5728\u5c06\u5de6\u53f3\u8fb9\u754c\u8fde\u901a\u7684\u84dd\u8272\u68cb\u5b50\u5e8f\u5217\uff0c\u6545\u76ee\u524d\u672a\u5206\u51fa\u80dc\u8d1f\u3002</p> <p>\u5728\u7b2c\u4e8c\u4e2a\u68cb\u76d8\u4e2d\uff0c\u4e0a\u4e0b\u4e24\u4e2a\u8fb9\u754c\u7531 \\((1, 3)\\)\u3001\\((2, 3)\\)\u3001\\((3, 3)\\)\u3001\\((4, 3)\\) \u8fd9\u4e9b\u7ea2\u8272\u68cb\u5b50\u8fde\u901a\u4e86\uff0c\u6240\u4ee5\u5c0f\u53ef\u53ef\u83b7\u80dc\u4e86\u3002</p> <p>\u5728\u7b2c\u4e09\u4e2a\u68cb\u76d8\u4e2d\uff0c\u5de6\u53f3\u4e24\u4e2a\u8fb9\u754c\u7531 \\((3, 1)\\)\u3001\\((2, 2)\\)\u3001\\((1, 3)\\)\u3001\\((1, 4)\\) \u8fd9\u4e9b\u84dd\u8272\u68cb\u5b50\u8fde\u901a\u4e86\uff0c\u6240\u4ee5\u5c0f\u591a\u83b7\u80dc\u4e86\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98E-%E6%B5%B7%E5%85%8B%E6%96%AF/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u66b4\u641c - \u6df1\u641c / \u5e7f\u641c \\(O(n)\\)</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98E-%E6%B5%B7%E5%85%8B%E6%96%AF/#\u66b4\u641c---\u6df1\u641c--\u5e7f\u641c","title":"\u66b4\u641c - \u6df1\u641c / \u5e7f\u641c","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 100 + 9;\n// -1: blue; 1: red; 0: blank\nint d[MAXn][MAXn];\nbool ved[MAXn][MAXn];\nint n;\nint px[] = {0,  0, 1,  1, -1, -1};\nint py[] = {1, -1, 0, -1,  0,  1};\n\nbool dfsf1(int i, int j) {\n    if(i &lt; 1 || j &lt; 1 || i &gt; n || j &gt; n) return false;\n    if(d[i][j] != -1) return false;\n    if(j == n) return true;\n    if(ved[i][j]) return false;\n    ved[i][j] = true;\n    for(int a = 0; a &lt;= 5; a ++)\n        if(dfsf1(i + px[a], j + py[a])) return true;\n    return false;\n}\n\nbool dfs1(int i, int j) {\n    if(i &lt; 1 || j &lt; 1 || i &gt; n || j &gt; n) return false;\n    if(d[i][j] != 1) return false;\n    if(i == n) return true;\n    if(ved[i][j]) return false;\n    ved[i][j] = true;\n    for(int a = 0; a &lt;= 5; a ++)\n        if(dfs1(i + px[a], j + py[a])) return true;\n    return false;\n}\n\nint main() {\n    int T;\n    scanf(\"%d\", &amp;T);\n    for(int _ = 1; _ &lt;= T; _ ++) {\n        scanf(\"%d\", &amp;n);\n        memset(d, 0, sizeof(d));\n        for(int i = 1; i &lt;= n; i ++)\n            for(int j = 1; j &lt;= n; j ++)\n                scanf(\"%d\", &amp;d[i][j]);\n        memset(ved, 0, sizeof(ved));\n        bool can = false;\n        for(int i = 1; i &lt;= n; i ++)\n            if(dfsf1(i, 1)) {\n                printf(\"do\\n\");\n                can = true;\n                break;\n            }\n        if(can) continue;\n        memset(ved, 0, sizeof(ved));\n        for(int j = 1; j &lt;= n; j ++)\n            if(dfs1(1, j)) {\n                printf(\"ke\\n\");\n                can = true;\n                break;\n            }\n        if(!can) printf(\"yet\\n\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98F-%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF2/","title":"\u95ee\u9898 F: \u5947\u602a\u7684\u7535\u68af2","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 P1135</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98F-%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF2/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98F-%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF2/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u5475\u5475\uff0c\u6709\u4e00\u5929\u6211\u505a\u4e86\u4e00\u4e2a\u68a6\uff0c\u68a6\u89c1\u4e86\u4e00\u79cd\u5f88\u5947\u602a\u7684\u7535\u68af\u3002\u5927\u697c\u7684\u6bcf\u4e00\u5c42\u697c\u90fd\u53ef\u4ee5\u505c\u7535\u68af\uff0c\u800c\u4e14\u7b2c \\(i\\) \u5c42\u697c\uff08\\(1 \\le i \\le N\\)\uff09\u4e0a\u6709\u4e00\u4e2a\u6570\u5b57 \\(K_i\\)\uff08\\(0 \\le K_i \\le N\\)\uff09\u3002\u7535\u68af\u53ea\u6709\u56db\u4e2a\u6309\u94ae\uff1a\u5f00\uff0c\u5173\uff0c\u4e0a\uff0c\u4e0b\u3002\u4e0a\u4e0b\u7684\u5c42\u6570\u7b49\u4e8e\u5f53\u524d\u697c\u5c42\u4e0a\u7684\u90a3\u4e2a\u6570\u5b57\u3002\u5f53\u7136\uff0c\u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u76f8\u5e94\u7684\u6309\u94ae\u5c31\u4f1a\u5931\u7075\u3002\u4f8b\u5982\uff1a \\(3, 3, 1, 2, 5\\) \u4ee3\u8868\u4e86 \\(K_i\\)\uff08\\(K_1=3\\)\uff0c\\(K_2=3\\)\uff0c\u2026\u2026\uff09\uff0c\u4ece \\(1\\) \u697c\u5f00\u59cb\u3002\u5728 \\(1\\) \u697c\uff0c\u6309\u201c\u4e0a\u201d\u53ef\u4ee5\u5230 \\(4\\) \u697c\uff0c\u6309\u201c\u4e0b\u201d\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709 \\(-2\\) \u697c\u3002\u90a3\u4e48\uff0c\u4ece \\(A\\) \u697c\u5230 \\(B\\) \u697c\u81f3\u5c11\u8981\u6309\u51e0\u6b21\u6309\u94ae\u5462\uff1f</p> <p>\u5bf9\u4e8e \\(100 \\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le N \\le 200\\)\uff0c\\(1 \\le A, B \\le N\\)\uff0c\\(0 \\le K_i \\le N\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98F-%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF2/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u5171\u4e8c\u884c\u3002</p> <p>\u7b2c\u4e00\u884c\u4e3a\u4e09\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570\uff0c\u8868\u793a \\(N, A, B\\)\uff08\\(1 \\le N \\le 200\\)\uff0c\\(1 \\le A, B \\le N\\)\uff09\u3002</p> <p>\u7b2c\u4e8c\u884c\u4e3a \\(N\\) \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u975e\u8d1f\u6574\u6570\uff0c\u8868\u793a \\(K_i\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98F-%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF2/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u5373\u6700\u5c11\u6309\u952e\u6b21\u6570\uff0c\u82e5\u65e0\u6cd5\u5230\u8fbe\uff0c\u5219\u8f93\u51fa \\(-1\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98F-%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF2/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>5 1 5\n3 3 1 2 5\n</code></pre> <pre><code>3\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98F-%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF2/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u6cd51\uff1a\u641c\u7d22 - \u6df1\u641c + \u5f53\u524d\u526a\u679d + \u7b54\u6848\u526a\u679d \\(O(n)\\)</li> <li>\u6cd52\uff1a\u641c\u7d22 - \u5e7f\u641c + \u961f\u5217 \\(O(n)\\)</li> <li>\u6cd53\uff1a\u6700\u77ed\u8def - Floyd \u7b97\u6cd5 \\(O(n^3)\\)</li> <li>\u6cd54\uff1a\u6700\u77ed\u8def - Bellman-Ford \u7b97\u6cd5 \\(O(n^2)\\)</li> <li>\u6cd55\uff1a\u6700\u77ed\u8def - SPFA \u7b97\u6cd5 \\(O(n)\\)</li> <li>\u6cd56\uff1a\u6700\u77ed\u8def - Dijkstra \u7b97\u6cd5 \\(O(n\\log n)\\)</li> <li>\u6cd57\uff1a\u6700\u77ed\u8def - Johnson \u7b97\u6cd5 \\(O(n\\log n)\\)</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98F-%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF2/#\u6cd51\u641c\u7d22---\u6df1\u641c--\u5f53\u524d\u526a\u679d--\u7b54\u6848\u526a\u679d","title":"\u6cd51\uff1a\u641c\u7d22 - \u6df1\u641c + \u5f53\u524d\u526a\u679d + \u7b54\u6848\u526a\u679d","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 200 + 9;\nint d[MAXn];\nint n, a, b;\nlli step[MAXn];\n\nvoid dfs(int x, int s) {\n    if(s &gt; step[b]) return;\n    if(x &lt; 1 || x &gt; n) return;\n    if(step[x] &lt;= s) return;\n    step[x] = s;\n    dfs(x + d[x], s + 1);\n    dfs(x - d[x], s + 1);\n    return;\n}\n\nint main() {\n    for(int i = 0; i &lt;= MAXn - 3; i ++)\n        step[i] = LLONG_MAX;\n    scanf(\"%d%d%d\", &amp;n, &amp;a, &amp;b);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]);\n    dfs(a, 0);\n    step[b] == LLONG_MAX ? printf(\"-1\") : printf(\"%lld\", step[b]);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98F-%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF2/#\u6cd52\u641c\u7d22---\u5e7f\u641c--\u961f\u5217","title":"\u6cd52\uff1a\u641c\u7d22 - \u5e7f\u641c + \u961f\u5217","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef pair&lt;int, lli&gt; pil;\nconst int MAXn = 200 + 9;\nint d[MAXn];\nint n, a, b;\nlli ans = LLONG_MAX;\nqueue&lt;pil&gt; que;\nbool ved[MAXn];\n\nint main() {\n    scanf(\"%d%d%d\", &amp;n, &amp;a, &amp;b);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]);\n    que.push({a, 0});\n    while(!que.empty()) {\n        int p = que.front().first;\n        lli s = que.front().second;\n        que.pop();\n        if(p == b) {ans = s; break; }\n        if(p &lt; 1 || p &gt; n || ved[p]) continue;\n        ved[p] = true;\n        que.push({p + d[p], s + 1});\n        que.push({p - d[p], s + 1});\n    }\n    ans == LLONG_MAX ? printf(\"-1\") : printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98F-%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF2/#\u6cd537\u6700\u77ed\u8def","title":"\u6cd53~7\uff1a\u6700\u77ed\u8def","text":"<p>\u6b64\u5904\u6700\u77ed\u8def\u7b97\u6cd5\u4ee5 Dijkstra \u7b97\u6cd5\u4e3a\u4f8b\uff1a</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int MAXn = 200 + 9;\nvector&lt;int&gt; g[MAXn];\nint dis[MAXn];\npriority_queue&lt;pii&gt; pq;    // first: dis; second: p\n\nsigned main() {\n    for(int i = 0; i &lt;= MAXn - 3; i ++) dis[i] = LLONG_MAX;\n    int n, a, b;\n    scanf(\"%lld%lld%lld\", &amp;n, &amp;a, &amp;b);\n    for(int i = 1, ia; i &lt;= n; i ++) {\n        scanf(\"%lld\", &amp;ia);\n        if(i + ia &gt;= 1 &amp;&amp; i + ia &lt;= n) g[i].push_back(i + ia);\n        if(i - ia &gt;= 1 &amp;&amp; i - ia &lt;= n) g[i].push_back(i - ia);\n    }\n    dis[a] = 0;\n    pq.push({0, a});\n    while(!pq.empty()) {\n        int now = pq.top().second, befdis = pq.top().first;\n        pq.pop();\n        for(int nxt : g[now]) {\n            if(befdis + 1 &lt; dis[nxt]) {\n                dis[nxt] = befdis + 1;\n                pq.push({befdis + 1, nxt});\n            }\n        }\n    }\n    dis[b] == LLONG_MAX ? printf(\"-1\") : printf(\"%lld\", dis[b]);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/","title":"\u95ee\u9898 G: \u6700\u957f\u56de\u6587\u5b50\u4e32B","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 P3805 \u3010\u6a21\u677f\u3011manacher | \u5b57\u7b26\u4e32 Ad-Hoc</p> <p>\u6c42\u300c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u300d\u662f\u4e00\u9053\u7ecf\u5178\u7684\u5b57\u7b26\u4e32\u7b97\u6cd5\u95ee\u9898\uff0c\u6b64\u6587\u4e5f\u5217\u4e8e\u677f\u5757 \u9898\u76ee\u5206\u4eab - \u6700\u957f\u56de\u6587\u5b50\u4e32\u95ee\u9898\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\)\uff0c\u6c42 \\(S\\) \u4e2d\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a \\(n\\:(1\\le n\\le 1000)\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>PATZJUJZTACCBCC\n</code></pre> <pre><code>9\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u6cd51\uff1a\u679a\u4e3e\u6240\u6709\u5b50\u4e32 \\(O(n^3)\\)</li> <li>\u6cd52\uff1a\u679a\u4e3e\u4e2d\u5fc3\u70b9 \\(O(n^2)\\)</li> <li>\u6cd53\uff1a\u679a\u4e3e\u4e2d\u5fc3\u70b9 + \u4e8c\u5206 \\(O(n\\log n)\\)</li> <li>\u6cd54\uff1a\u4e8c\u7ef4\u52a8\u6001\u89c4\u5212 \\(O(n^2)\\)</li> <li>\u6cd55\uff1a\u4e00\u7ef4\u52a8\u6001\u89c4\u5212 \\(O(n^2)\\)</li> <li>\u6cd56\uff1aManacher \u7b97\u6cd5 \\(O(n)\\)</li> <li>\u6cd57\uff1a\u56de\u6587\u81ea\u52a8\u673a \\(O(n)\\)</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u6cd51\u679a\u4e3e\u6240\u6709\u5b50\u4e32","title":"\u6cd51\uff1a\u679a\u4e3e\u6240\u6709\u5b50\u4e32","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    string s;\n    getline(cin, s);\n    int len = s.length();\n    int ans = 1;\n    for(int i = 0; i &lt; len - 1; i ++)\n        for(int j = i + 1; j &lt; len; j ++) {\n            bool can = true;\n            int a = i - 1, b = j + 1;\n            while((++ a) &lt; (-- b))\n                if(s[a] != s[b]) {\n                    can = false;\n                    break;\n                }\n            if(can) ans = max(ans, j - i + 1);\n        }\n    printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u6cd52\u679a\u4e3e\u4e2d\u5fc3\u70b9","title":"\u6cd52\uff1a\u679a\u4e3e\u4e2d\u5fc3\u70b9","text":"<p>\u7565\uff0c\u89c1\u6cd53\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u6cd53\u679a\u4e3e\u4e2d\u5fc3\u70b9--\u4e8c\u5206","title":"\u6cd53\uff1a\u679a\u4e3e\u4e2d\u5fc3\u70b9 + \u4e8c\u5206","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1.1e7 + 9;\nconst int BASE = 13131, MOD = 1e9 + 9;\nint h1[2 * MAXn], h2[2 * MAXn], p[2 * MAXn];\n\nint fsha1(int l, int r) {\n    l ++; r ++;\n    return (h1[r] - 1ll * h1[l - 1] * p[r - l + 1] % MOD + MOD) % MOD;\n}\nint fsha2(int l, int r) {\n    l ++; r ++;\n    return (h2[r] - 1ll * h2[l - 1] * p[r - l + 1] % MOD + MOD) % MOD;\n}\n\nint main() {\n    string s1 = \"#\";\n    char c;\n    while(scanf(\"%c\", &amp;c) != EOF) {\n        s1.push_back(c);\n        s1.push_back('#');\n    }\n    string s2(s1.rbegin(), s1.rend());\n    int len = s1.length();\n    h1[0] = h2[0] = p[0] = 1;\n    for(int i = 1; i &lt;= len; i ++) {\n        p[i] = (1ll * p[i - 1] * BASE) % MOD;\n        h1[i] = (1ll * h1[i - 1] * BASE + s1[i - 1]) % MOD;\n        h2[i] = (1ll * h2[i - 1] * BASE + s2[i - 1]) % MOD;\n    }\n    int ans = 0;\n    for(int i = 1, j = len - 2; i &lt;= len - 2; i ++, j --) {\n        // i: \u6b63\u5411\u4e2d\u5fc3\u70b9; j: \u9006\u5411\u4e2d\u5fc3\u70b9\n        int a = 0, b = min({len / 2, i, j});\n        while(a &lt; b) {\n            int m = (a + b + 1) &gt;&gt; 1;\n            if(fsha1(i - m, i - 1) == fsha2(j - m, j - 1)) a = m;\n            else b = m - 1;\n        }\n        if(ans &lt; a) ans = a;\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u6cd54\u4e8c\u7ef4\u52a8\u6001\u89c4\u5212","title":"\u6cd54\uff1a\u4e8c\u7ef4\u52a8\u6001\u89c4\u5212","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1000 + 9;\nbool dp[MAXn][MAXn];\n\nint main() {\n    string s;\n    getline(cin, s);\n    int len = s.length();\n    for(int i = 0; i &lt; len; i ++)\n        dp[i][i] = true;\n    int ans = 1;\n    for(int j = 1; j &lt; len; j ++)\n        for(int i = 0; i &lt; j; i ++) {\n            dp[i][j] = (s[i] == s[j] &amp;&amp; (dp[i + 1][j - 1] || j - i + 1 &lt;= 3));\n            if(dp[i][j] &amp;&amp; ans &lt; (j - i + 1))\n                ans = j - i + 1;\n        }\n    printf(\"%d\", ans);\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u6cd55\u4e00\u7ef4\u52a8\u6001\u89c4\u5212","title":"\u6cd55\uff1a\u4e00\u7ef4\u52a8\u6001\u89c4\u5212","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1000 + 9;\nint dp[MAXn];\n\nint main() {\n    string s;\n    getline(cin, s);\n    int len = s.length();\n    s = \"#\" + s;\n    int ans = 1;\n    dp[1] = 1;\n    for(int j = 2; j &lt;= len; j ++) {\n        if(s[j] == s[j - dp[j - 1] - 1]) dp[j] = dp[j - 1] + 2;\n        else for(int i = j - dp[j - 1]; i &lt;= j; i ++) {\n            int l = i, r = j;\n            bool can = true;\n            while(l &lt;= r &amp;&amp; can) {\n                can = s[l] == s[r];\n                l ++;\n                r --;\n            }\n            if(can) {\n                dp[j] = j - i + 1;\n                break;\n            }\n        }\n        ans = max(ans, dp[j]);\n    }\n    printf(\"%d\", ans);\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u6cd56manacher-\u7b97\u6cd5","title":"\u6cd56\uff1aManacher \u7b97\u6cd5","text":"\u3010\u6a21\u677f\u3011Manacher \u7b97\u6cd5<pre><code>#include&lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int MAXn = 1.1e7 + 9;\nstring os, s;\nint d[(MAXn &lt;&lt; 1) + 9];\n\nsigned main() {\n    getline(cin, os);\n    s = \"@\";\n    for(char c : os)\n        s.push_back('#'),\n        s.push_back(c);\n    s.push_back('#');\n    int len = s.length() - 1, ans = 1;\n    for(int t = 1, r = 0, m = 0; t &lt;= len; t ++) {\n        if(t &lt;= r) d[t] = min(d[(m &lt;&lt; 1) - t], r - t + 1);\n        while(s[t - d[t]] == s[t + d[t]]) d[t] ++;\n        if(d[t] + t &gt; r) r = d[t] + t - 1, m = t;\n        ans = max(ans, d[t] - 1);\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98G-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2B/#\u6cd57\u56de\u6587\u81ea\u52a8\u673a","title":"\u6cd57\uff1a\u56de\u6587\u81ea\u52a8\u673a","text":"<p>\u6ce8\uff1a\u6b64\u90e8\u5206\u4ee3\u7801\u501f\u9274\u81ea OI wiki\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 4e3 + 9;\nint sz, tot, last;\nint cnt[MAXn], ch[MAXn][128], len[MAXn], fail[MAXn];\nchar s[MAXn], d[MAXn];\n\n// \u5efa\u7acb\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u957f\u5ea6\u4e3a l\nint node(int l) {\n    sz ++;\n    memset(ch[sz], 0, sizeof(ch[sz]));\n    len[sz] = l;\n    fail[sz] = cnt[sz] = 0;\n    return sz;\n}\n\n// \u521d\u59cb\u5316\nvoid clear() {\n    sz = -1;\n    last = 0;\n    s[tot = 0] = '$';\n    node(0);\n    node(-1);\n    fail[0] = 1;\n}\n\n// \u627e\u540e\u7f00\u56de\u6587\nint getfail(int x) {\n    while (s[tot - len[x] - 1] != s[tot]) x = fail[x];\n    return x;\n}\n\n// \u5efa\u6811\nvoid insert(char c) {\n    s[++tot] = c;\n    int now = getfail(last);\n    if(!ch[now][c - 'a']) {\n        int x = node(len[now] + 2);\n        fail[x] = ch[getfail(fail[now])][c - 'a'];\n        ch[now][c - 'a'] = x;\n    }\n    last = ch[now][c - 'a'];\n    cnt[last] ++;\n}\n\nlli solve() {\n    lli ans = 0;\n    for(int i = sz; i &gt;= 0; i--)\n        cnt[fail[i]] += cnt[i];\n    for(int i = 1; i &lt;= sz; i++)\n        ans = max(ans, 1ll * len[i]);\n    return ans;\n}\n\nint main() {\n    clear();\n    scanf(\"%s\", d + 1);\n    for(int i = 1; d[i]; i++) {\n        insert(d[i]);\n    }\n    printf(\"%lld\", solve());\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98H-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"\u95ee\u9898 H: \u4ea4\u9519\u5b57\u7b26\u4e32","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u5b57\u7b26\u4e32 Ad-Hoc</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98H-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98H-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u7ed9\u5b9a\u4e09\u4e2a\u5b57\u7b26\u4e32 \\(s_1\\)\u3001\\(s_2\\)\u3001\\(s_3\\)\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u9a8c\u8bc1 \\(s_3\\) \u662f\u5426\u662f\u7531 \\(s_1\\) \u548c \\(s_2\\) \u4ea4\u9519\u7ec4\u6210\u7684\u3002</p> <p>\u4e24\u4e2a\u5b57\u7b26\u4e32 \\(s\\) \u548c \\(t\\) \u4ea4\u9519\u7684\u5b9a\u4e49\u4e0e\u8fc7\u7a0b\u5982\u4e0b\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u4f1a\u88ab\u5206\u5272\u6210\u82e5\u5e72\u975e\u7a7a\u5b50\u5b57\u7b26\u4e32\uff1a</p> <ul> <li>\\(s = s_1 + s_2 + \\dots + s_n\\)</li> <li>\\(t = t_1 + t_2 + \\dots + t_m\\)</li> <li>\\(|n - m| \\le 1\\)</li> </ul> <p>\u4ea4\u9519\u662f \\(s_1 + t_1 + s_2 + t_2 + s_3 + t_3 + \\dots\\) \u6216\u8005 \\(t_1 + s_1 + t_2 + s_2 + t_3 + s_3 + \\dots\\)</p> <p>\u6ce8\u610f\uff1a\\(a + b\\) \u610f\u5473\u7740\u5b57\u7b26\u4e32 \\(a\\) \u548c \\(b\\) \u8fde\u63a5\u3002</p> <p></p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98H-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\uff0c\u8f93\u5165\u5b57\u7b26\u4e32\\(s_1\\) \\((1 \\le |s_1| \\le 1 \\times 10^3)\\)\u3002</p> <p>\u7b2c\u4e8c\u884c\uff0c\u8f93\u5165\u5b57\u7b26\u4e32\\(s_2\\) \\((1 \\le |s_2| \\le 1 \\times 10^3)\\)\u3002</p> <p>\u7b2c\u4e09\u884c\uff0c\u8f93\u5165\u5b57\u7b26\u4e32\\(s_3\\) \\((1 \\le |s_3| \\le 1 \\times 10^3)\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98H-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u5982\u679c\u662f\u4ea4\u9519\u5b57\u7b26\u4e32\uff0c\u8f93\u51fa\u201c\\(\\texttt{yes}\\)\u201d\uff0c\u5426\u5219\u8f93\u51fa\u201c\\(\\texttt{no}\\)\u201d\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98H-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>aabcc\ndbbca\naadbbcbcac\n</code></pre> <pre><code>yes\n</code></pre> <pre><code>aabcc\ndbbca\naadbbbaccc\n</code></pre> <pre><code>no\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98H-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u52a8\u6001\u89c4\u5212 \\(O(mn)\\)</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98H-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u52a8\u6001\u89c4\u5212","title":"\u52a8\u6001\u89c4\u5212","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1000 + 9;\nbool dp[MAXn][MAXn];\n\nint main() {\n    string s1, s2, s3;\n    cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3;\n    int l1 = s1.length(), l2 = s2.length(), l3 = s3.length();\n    if(l1 + l2 != l3) return 0 * printf(\"no\");\n    if(l1 == 0) return 0 * (s2 == s3 ? printf(\"yes\") : printf(\"no\"));\n    if(l2 == 0) return 0 * (s1 == s3 ? printf(\"yes\") : printf(\"no\"));\n    s1 = \"#\" + s1; s2 = \"#\" + s2; s3 = \"#\" + s3;\n    dp[0][0] = true;\n    for(int i = 0; i &lt;= l1; i ++)\n        for(int j = 0; j &lt;= l2; j ++) {\n            if(i != 0 &amp;&amp; dp[i - 1][j] &amp;&amp; s1[i] == s3[i + j]) dp[i][j] = true;\n            if(j != 0 &amp;&amp; dp[i][j - 1] &amp;&amp; s2[j] == s3[i + j]) dp[i][j] = true;\n        }\n    dp[l1][l2] ? printf(\"yes\") : printf(\"no\");\n    return 0;\n}\n</code></pre> <p>\u6b64\u9898\u53ef\u4ee5\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u4ee3\u7801\u7565\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98I-%E4%B8%89%E5%80%BC%E9%80%BB%E8%BE%91/","title":"\u95ee\u9898 I: \u4e09\u503c\u903b\u8f91","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 P9869 (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1aNOIP 2023 \u63d0\u9ad8\u7ec4 T2</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98I-%E4%B8%89%E5%80%BC%E9%80%BB%E8%BE%91/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98I-%E4%B8%89%E5%80%BC%E9%80%BB%E8%BE%91/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u5c0f L \u4eca\u5929\u5b66\u4e60\u4e86 Kleene \u4e09\u503c\u903b\u8f91\u3002</p> <p>\u5728\u4e09\u503c\u903b\u8f91\u4e2d\uff0c\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u53ef\u80fd\u4e3a\uff1a\u771f\uff08\\(\\mathit{True}\\)\uff0c\u7b80\u5199\u4f5c \\(\\mathit{T}\\)\uff09\u3001\u5047\uff08\\(\\mathit{False}\\)\uff0c\u7b80\u5199\u4f5c \\(\\mathit{F}\\)\uff09\u6216\u672a\u786e\u5b9a\uff08\\(\\mathit{Unknown}\\)\uff0c\u7b80\u5199\u4f5c \\(\\mathit{U}\\)\uff09\u3002</p> <p>\u5728\u4e09\u503c\u903b\u8f91\u4e0a\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u903b\u8f91\u8fd0\u7b97\u3002\u7531\u4e8e\u5c0f L \u5b66\u4e60\u8fdb\u5ea6\u5f88\u6162\uff0c\u53ea\u638c\u63e1\u4e86\u903b\u8f91\u975e\u8fd0\u7b97 \\(\\lnot\\)\uff0c\u5176\u8fd0\u7b97\u6cd5\u5219\u4e3a\uff1a \\(\\lnot \\mathit{T} = \\mathit{F}, \\lnot \\mathit{F} = \\mathit{T}, \\lnot\\mathit{U} = \\mathit{U}.\\)</p> <p>\u73b0\u5728\u5c0f L \u6709 \\(n\\) \u4e2a\u4e09\u503c\u903b\u8f91\u53d8\u91cf \\(x_1,\\cdots, x_n\\)\u3002\u5c0f L \u60f3\u8fdb\u884c\u4e00\u4e9b\u6709\u8da3\u7684\u5c1d\u8bd5\uff0c\u4e8e\u662f\u4ed6\u5199\u4e0b\u4e86 \\(m\\) \u6761\u8bed\u53e5\u3002\u8bed\u53e5\u6709\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\uff0c\u5176\u4e2d \\(\\leftarrow\\) \u8868\u793a\u8d4b\u503c\uff1a</p> <ol> <li>\\(x_i \\leftarrow v\\)\uff0c\u5176\u4e2d \\(v\\) \u4e3a \\(\\mathit{T}, \\mathit{F}, \\mathit{U}\\) \u7684\u4e00\u79cd\uff1b</li> <li>\\(x_i \\leftarrow x_j\\)\uff1b</li> <li>\\(x_i \\leftarrow \\lnot x_j\\)\u3002</li> </ol> <p>\u4e00\u5f00\u59cb\uff0c\u5c0f L \u4f1a\u7ed9\u8fd9\u4e9b\u53d8\u91cf\u8d4b\u521d\u503c\uff0c\u7136\u540e\u6309\u987a\u5e8f\u8fd0\u884c\u8fd9 \\(m\\) \u6761\u8bed\u53e5\u3002</p> <p>\u5c0f L \u5e0c\u671b\u6267\u884c\u4e86\u6240\u6709\u8bed\u53e5\u540e\uff0c\u6240\u6709\u53d8\u91cf\u7684\u6700\u7ec8\u503c\u4e0e\u521d\u503c\u90fd\u76f8\u7b49\u3002\u5728\u6b64\u524d\u63d0\u4e0b\uff0c\u5c0f L \u5e0c\u671b\u521d\u503c\u4e2d \\(\\mathit{Unknown}\\) \u7684\u53d8\u91cf\u5c3d\u53ef\u80fd\u5c11\u3002</p> <p>\u5728\u672c\u9898\u4e2d\uff0c\u4f60\u9700\u8981\u5e2e\u52a9\u5c0f L \u627e\u5230 \\(\\mathit{Unknown}\\) \u53d8\u91cf\u4e2a\u6570\u6700\u5c11\u7684\u8d4b\u521d\u503c\u65b9\u6848\uff0c\u4f7f\u5f97\u6267\u884c\u4e86\u6240\u6709\u8bed\u53e5\u540e\u6240\u6709\u53d8\u91cf\u7684\u6700\u7ec8\u503c\u548c\u521d\u59cb\u503c\u76f8\u7b49\u3002\u5c0f L \u4fdd\u8bc1\uff0c\u81f3\u5c11\u5bf9\u4e8e\u672c\u9898\u7684\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8fd9\u6837\u7684\u8d4b\u521d\u503c\u65b9\u6848\u90fd\u5fc5\u7136\u662f\u5b58\u5728\u7684\u3002</p> <p>\u5bf9\u4e8e\u6240\u6709\u6d4b\u8bd5\u6570\u636e\uff0c\u4fdd\u8bc1\uff1a (1)</p> <ol> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u7684\u6570\u636e\u8303\u56f4\u548c\u7279\u6b8a\u9650\u5236\uff0c\u89c1 \u6d1b\u8c37 P9869</li> </ol> <ul> <li>\\(1 \\le t \\le 6\\)\uff0c\\(1 \\le n,m \\le 10 ^ 5\\)\uff1b</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\uff0c\\(v\\) \u4e3a <code>TFU+-</code> \u4e2d\u7684\u67d0\u4e2a\u5b57\u7b26\uff0c\\(1 \\le i,j \\le n\\)\u3002</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98I-%E4%B8%89%E5%80%BC%E9%80%BB%E8%BE%91/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u672c\u9898\u7684\u6d4b\u8bd5\u70b9\u5305\u542b\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(c\\) \u548c \\(t\\)\uff0c\u5206\u522b\u8868\u793a\u6d4b\u8bd5\u70b9\u7f16\u53f7\u548c\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\u3002\u5bf9\u4e8e\u6837\u4f8b\uff0c\\(c\\) \u8868\u793a\u8be5\u6837\u4f8b\u4e0e\u6d4b\u8bd5\u70b9 \\(c\\) \u62e5\u6709\u76f8\u540c\u7684\u9650\u5236\u6761\u4ef6\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a</p> <ul> <li>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(n\\) \u548c \\(m\\)\uff0c\u5206\u522b\u8868\u793a\u53d8\u91cf\u4e2a\u6570\u548c\u8bed\u53e5\u6761\u6570\u3002</li> <li>\u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6309\u8fd0\u884c\u987a\u5e8f\u7ed9\u51fa\u6bcf\u6761\u8bed\u53e5\u3002</li> <li>\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 \\(v\\) \u63cf\u8ff0\u8fd9\u6761\u8bed\u53e5\u7684\u7c7b\u578b\u3002\u4fdd\u8bc1 \\(v\\) \u4e3a <code>TFU+-</code> \u7684\u5176\u4e2d\u4e00\u79cd\u3002</li> <li>\u82e5 \\(v\\) \u4e3a <code>TFU</code> \u7684\u67d0\u4e00\u79cd\u65f6\uff0c\u63a5\u4e0b\u6765\u7ed9\u51fa\u4e00\u4e2a\u6574\u6570 \\(i\\)\uff0c\u8868\u793a\u8be5\u8bed\u53e5\u4e3a \\(x_i \\leftarrow v\\)\uff1b</li> <li>\u82e5 \\(v\\) \u4e3a <code>+</code>\uff0c\u63a5\u4e0b\u6765\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 \\(i,j\\)\uff0c\u8868\u793a\u8be5\u8bed\u53e5\u4e3a \\(x_i \\leftarrow x_j\\)\uff1b</li> <li>\u82e5 \\(v\\) \u4e3a <code>-</code>\uff0c\u63a5\u4e0b\u6765\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 \\(i,j\\)\uff0c\u8868\u793a\u8be5\u8bed\u53e5\u4e3a \\(x_i \\leftarrow \\lnot x_j\\)\u3002</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98I-%E4%B8%89%E5%80%BC%E9%80%BB%E8%BE%91/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u8d4b\u521d\u503c\u65b9\u6848\u4e2d\uff0c\\(\\mathit{Unknown}\\) \u53d8\u91cf\u4e2a\u6570\u7684\u6700\u5c0f\u503c\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98I-%E4%B8%89%E5%80%BC%E9%80%BB%E8%BE%91/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>1 3\n3 3\n- 2 1\n- 3 2\n+ 1 3\n3 3\n- 2 1\n- 3 2\n- 1 3\n2 2\nT 2\nU 2\n</code></pre> <pre><code>0\n3\n1\n</code></pre> <p>\u5bf9\u4e8e\u4e0a\u8ff0\u6837\u4f8b (1) \uff1a\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e2d\uff0c\\(m\\) \u884c\u8bed\u53e5\u4f9d\u6b21\u4e3a</p> <ol> <li>\u5bf9\u4e8e\u5176\u4f59 \\(3\\) \u4e2a\u6837\u4f8b\u70b9\uff0c\u89c1 \u6d1b\u8c37 P9869</li> </ol> <ul> <li>\\(x_2 \\leftarrow \\lnot x_1\\)\uff1b</li> <li>\\(x_3 \\leftarrow \\lnot x_2\\)\uff1b</li> <li>\\(x_1 \\leftarrow x_3\\)\u3002</li> </ul> <p>\u4e00\u7ec4\u5408\u6cd5\u7684\u8d4b\u521d\u503c\u65b9\u6848\u4e3a \\(x_1 = \\mathit{T}, x_2 = \\mathit{F}, x_3 = \\mathit{T}\\)\uff0c\u5171\u6709 \\(0\\) \u4e2a\\(\\mathit{Unknown}\\) \u53d8\u91cf\u3002\u56e0\u4e3a\u4e0d\u5b58\u5728\u8d4b\u521d\u503c\u65b9\u6848\u4e2d\u6709\u5c0f\u4e8e \\(0\\) \u4e2a\\(\\mathit{Unknown}\\) \u53d8\u91cf\uff0c\u6545\u8f93\u51fa\u4e3a \\(0\\)\u3002</p> <p>\u7b2c\u4e8c\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e2d\uff0c\\(m\\) \u884c\u8bed\u53e5\u4f9d\u6b21\u4e3a</p> <ul> <li>\\(x_2 \\leftarrow \\lnot x_1\\)\uff1b</li> <li>\\(x_3 \\leftarrow \\lnot x_2\\)\uff1b</li> <li>\\(x_1 \\leftarrow \\lnot x_3\\)\u3002</li> </ul> <p>\u552f\u4e00\u7684\u8d4b\u521d\u503c\u65b9\u6848\u4e3a \\(x_1 = x_2 = x_3 = \\mathit{U}\\)\uff0c\u5171\u6709 \\(3\\) \u4e2a\\(\\mathit{Unknown}\\) \u53d8\u91cf\uff0c\u6545\u8f93\u51fa\u4e3a \\(3\\)\u3002</p> <p>\u7b2c\u4e09\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e2d\uff0c\\(m\\) \u884c\u8bed\u53e5\u4f9d\u6b21\u4e3a</p> <ul> <li>\\(x_2 \\leftarrow \\mathit{T}\\)\uff1b</li> <li>\\(x_2 \\leftarrow \\mathit{U}\\)\uff1b</li> </ul> <p>\u4e00\u4e2a\u6700\u5c0f\u5316 \\(\\mathit{Unknown}\\) \u53d8\u91cf\u4e2a\u6570\u7684\u8d4b\u521d\u503c\u65b9\u6848\u4e3a \\(x_1 = \\mathit{T}, x_2 = \\mathit{U}\\)\u3002\\(x_1 = x_2 = \\mathit{U}\\) \u4e5f\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848\uff0c\u4f46\u5b83\u6ca1\u6709\u6700\u5c0f\u5316 \\(\\mathit{Unknown}\\) \u53d8\u91cf\u7684\u4e2a\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98I-%E4%B8%89%E5%80%BC%E9%80%BB%E8%BE%91/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u641c\u7d22 \\(O(n)\\)</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98I-%E4%B8%89%E5%80%BC%E9%80%BB%E8%BE%91/#\u641c\u7d22","title":"\u641c\u7d22","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 1e5 + 9;\nint n, m;\nstruct table{\n    int p2;\n    bool b;    // 0: same;  1: reverse\n} tmpT;\nvector&lt;table&gt; graph[MAXn + 9];\nstruct ori{\n    bool m;    // 0: TFU;  1: +-\n    int val0;    // TFU -&gt; 012\n    int val1;    // +- -&gt; +inc -inc\n} tmpO;\nori datum[MAXn + 9];\n\nint retTFU(char in) {\n    if(in == 'T') return 0;\n    if(in == 'F') return 1;\n    if(in == 'U') return 2;\n    else cerr &lt;&lt; \"retTFU error\\n\";\n    return 2;\n}\n\nint revTFU(int in) {\n    if(in == 0) return 1;\n    if(in == 1) return 0;\n    if(in == 2) return 2;\n    else cerr &lt;&lt; \"revTFU error\\n\";\n    return 2;\n}\n\nbool visited[MAXn + 9];\nbool haveU = false;\nlli gsize = 0;\nvoid dfssize(int p) {\n    gsize ++;\n    visited[p] = true;\n    if(datum[p].m == 0 &amp;&amp; datum[p].val0 == 2)\n        haveU = true;\n    for(table i : graph[p])\n        if(!visited[i.p2]) dfssize(i.p2);\n}\n\nbool can = true;\nint dfsval[MAXn+9];\nvoid dfscan(int p) {\n    gsize++;\n    visited[p] = true;\n    for(table i : graph[p]) {\n        if(!visited[i.p2]) {\n            if(i.b) dfsval[i.p2] = (dfsval[p] == 0) ? 1 : 0;    // reverse\n            else dfsval[i.p2] = (dfsval[p] == 0) ? 0 : 1;    // same\n            dfscan(i.p2);\n        }\n        else{    // visited[i.p2]\n            int should;\n            if(i.b) should = (dfsval[p] == 0) ? 1 : 0;    // reverse\n            else should = (dfsval[p] == 0) ? 0 : 1;    // same\n            if(dfsval[i.p2] != should) can = false;\n        }\n    }\n}\n\nint main() {\n    int non, T;\n    scanf(\"%d %d\", &amp;non, &amp;T);\n    for(int _ = 1; _ &lt;= T; _++) {\n        scanf(\"%d %d\", &amp;n, &amp;m);\n        lli res = 0;\n        for(int i = 1; i &lt;= MAXn+3; i++) {\n            datum[i].m = 1;\n            datum[i].val1 = i;\n        }\n        for(int i = 1; i &lt;= MAXn+3; i++)\n            graph[i].clear();\n        memset(visited, 0, sizeof(visited));\n\n        char ina;\n        int inb, inc;\n        string instr;\n        for(int iout = 1; iout &lt;= m; iout++) {\n            getline(cin, instr);\n            ina = getchar();\n            scanf(\"%d\", &amp;inb);\n            if(ina == '+' || ina == '-') {\n                scanf(\"%d\", &amp;inc);\n                if(ina == '+')\n                    datum[inb] = datum[inc];\n                else{    // ina == '-'\n                    if(datum[inc].m) {    // +-\n                        datum[inb].m = 1;\n                        datum[inb].val1 = -datum[inc].val1;\n                    }\n                    else{    // TFU\n                        datum[inb].m = 0;\n                        datum[inb].val0 = revTFU(datum[inc].val0);\n                    }\n                }\n            }\n            else{    // ina == TFU\n                datum[inb].m = 0;\n                datum[inb].val0 = retTFU(ina);\n            }\n        }\n\n        for(int i = 1; i &lt;= n; i++)\n            if(datum[i].m) {    // +-\n                tmpT.p2 = abs(datum[i].val1);\n                tmpT.b = (datum[i].val1&lt;0);\n                graph[i].push_back(tmpT);\n                tmpT.p2 = i;\n                graph[abs(datum[i].val1)].push_back(tmpT);\n            }\n        for(int i = 1; i &lt;= n; i++)\n            if(!visited[i] &amp;&amp; !datum[i].m) {    // TFU\n                gsize = 0;\n                haveU = false;\n                dfssize(i);\n                if(haveU) res += gsize;\n            }\n        for(int i = 1; i &lt;= n; i++)\n            if(!visited[i]) {\n                gsize = 0;\n                can = true;\n                dfsval[i] = 0;\n                dfscan(i);\n                if(!can) res += gsize;\n            }\n        printf(\"%lld\\n\", res);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98J-%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/","title":"\u95ee\u9898 J: \u6700\u957f\u8def\u5f84","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | eolymp's basecamp 11452</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98J-%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98J-%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>There is a directed graph \\(G\\) with \\(n\\) vertices and \\(m\\) edges. The vertices are numbered \\(1, 2, ..., n\\), and for each \\(i\\:(1 \\le i \\le m)\\), the \\(i\\)-th directed edge goes from vertex \\(x_i\\) to vertex \\(y_i\\).</p> <p>\\(G\\:\\) does not contain directed cycles.</p> <p>Find the length of the longest directed path in \\(G\\). Here, the length of a directed path is the number of edges in it.</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98J-%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>The first line contains two integers: number of vertices \\(n\\:(2 \\le n \\le 10^5)\\) and number of edges \\(m\\:(1 \\le m \\le 10^5)\\). Each of the next \\(m\\) lines contains two integer \\(x_i, y_i\\:(1 \\le x_i, y_i \\le n)\\) that describe the edge of the graph.</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98J-%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>Print the length of the longest directed path in \\(G\\).</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98J-%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n</code></pre> <pre><code>3\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98J-%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u6cd51\uff1a\u62d3\u6251\u6392\u5e8f + \u52a8\u6001\u89c4\u5212 \\(O(n)\\)</li> <li>\u6cd52\uff1a\u6700\u77ed\u8def - SPFA \u7b97\u6cd5 \\(O(mn^2)\\)</li> </ul>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98J-%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/#\u6cd51\u62d3\u6251\u6392\u5e8f--\u52a8\u6001\u89c4\u5212","title":"\u6cd51\uff1a\u62d3\u6251\u6392\u5e8f + \u52a8\u6001\u89c4\u5212","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int MAXn = 2e5 + 9;\nvector&lt;int&gt; g[MAXn];\nint rd[MAXn], dp[MAXn];\nqueue&lt;int&gt; q;\n\nsigned main() {\n    int n, m;\n    scanf(\"%lld%lld\", &amp;n, &amp;m);\n    for(int i = 1, u, v; i &lt;= m; i ++) {\n        scanf(\"%lld%lld\", &amp;u, &amp;v);\n        u ++; v ++;\n        g[u].push_back(v);\n        rd[v] ++;\n    }\n    for(int i = 1; i &lt;= n; i ++)\n        if(!rd[i]) q.push(i);\n    int ans = 1;\n    while(!q.empty()) {\n        int now = q.front();\n        q.pop();\n        for(int next : g[now]) {\n            rd[next] --;\n            if(!rd[next]) q.push(next);\n            dp[next] = max(dp[next], dp[now] + 1);\n            ans = max(ans, dp[next]);\n        }\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95D/%E9%97%AE%E9%A2%98J-%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/#\u6cd52\u6700\u77ed\u8def---spfa-\u7b97\u6cd5","title":"\u6cd52\uff1a\u6700\u77ed\u8def - SPFA \u7b97\u6cd5","text":"<p>\u8bfb\u5165\u6bcf\u6761\u8fb9\u7684\u503c\uff0c\u5e76\u8bb0\u4e3a\u5176\u8d1f\u503c\u3002\u4f7f\u7528 SPFA \u7b49\u53ef\u4ee5\u5728\u8d1f\u6743\u56fe\u4e2d\u5bfb\u627e\u6700\u77ed\u8def\u7684\u7b97\u6cd5\u627e\u5230\u56fe\u4e2d\u6700\u77ed\u8def\uff0c\u5e76\u8f93\u51fa\u8def\u5f84\u957f\u5ea6\u7684\u8d1f\u503c\u3002</p> <p>\u7531\u4e8e SPFA \u7b49\u7b97\u6cd5\u53ea\u80fd\u5bfb\u627e\u5355\u6e90\u6700\u77ed\u8def\uff0c\u56e0\u6b64\u9700\u8981\u518d\u4ece\u6bcf\u4e2a\u70b9\u51fa\u53d1\uff0c\u8dd1\u4e00\u904d SPFA \u7b49\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4e0d\u80fd\u901a\u8fc7\u3002</p> <p>\u4ee5\u4e0b\u63d0\u4f9b\u7c7b\u4f3c\u9898\u76ee P1807 \u6700\u957f\u8def\uff0c\u53ea\u9700\u8981\u6c42\u51fa\u67d0\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e2d\u6700\u957f\u7684\u8def\u5f84\uff0c\u4f7f\u7528 SPFA \u7b97\u6cd5\uff0c\u6309\u7167\u4e0a\u8ff0\u601d\u8def\u7684\u5b9e\u73b0\u3002\uff08\u8be5\u9898\u4ea6\u53ef\u4f7f\u7528 \u62d3\u6251\u6392\u5e8f + \u52a8\u6001\u89c4\u5212 \u7684\u65b9\u5f0f\u5b9e\u73b0\uff09</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int MAXn = 1000 + 9;\nvector&lt;pii&gt; g[MAXn];\nint dis[MAXn];\nbool ved[MAXn];\nqueue&lt;int&gt; q;\n\nsigned main() {\n    for(int i = 0; i &lt;= MAXn - 3; i ++) dis[i] = LLONG_MAX;\n    int n, m;\n    scanf(\"%lld%lld\", &amp;n, &amp;m);\n    for(int i = 1, u, v, w; i &lt;= m; i ++) {\n        scanf(\"%lld%lld%lld\", &amp;u, &amp;v, &amp;w);\n        g[u].push_back({v, -w});\n    }\n    dis[1] = 0;\n    q.push(1);\n    ved[1] = true;\n    while(!q.empty()) {\n        int now = q.front();\n        q.pop();\n        ved[now] = false;\n        for(pii x : g[now]) {\n            int nxt = x.first;\n            if (dis[nxt] &gt; dis[now] + x.second) {\n                dis[nxt] = dis[now] + x.second;\n                if (!ved[nxt]) {\n                    q.push(nxt);\n                    ved[nxt] = true;\n                }\n            }\n        }\n\n    }\n    dis[n] == LLONG_MAX ? printf(\"-1\") : printf(\"%lld\", -dis[n]);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98A-%E8%AF%84%E5%88%86/","title":"\u95ee\u9898 A: \u8bc4\u5206","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1a\u201c\u79d1\u5927\u56fd\u521b\u676f\u201d2023\u5e74\u5b89\u5fbd\u7701\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u79d1\u666e\u65e5\u6d3b\u52a8\u521d\u4e2d\u7ec4 T1</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98A-%E8%AF%84%E5%88%86/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98A-%E8%AF%84%E5%88%86/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u5c0f\u53ef\u53ef\u5728\u89c2\u770b\u8df3\u6c34\u6bd4\u8d5b\u3002</p> <p>\u6709 \\(n\\) \u540d\u9009\u624b\u6765\u53c2\u52a0\u8df3\u6c34\u6bd4\u8d5b\uff0c\u6709 \\(m\\) \u540d\u8bc4\u59d4\u3002\u5728\u6bcf\u4f4d\u9009\u624b\u8df3\u6c34\u4e4b\u540e\uff0c\u6bcf\u4f4d\u8bc4\u59d4\u4f1a\u7ed9\u51fa\u4ed6\u7684\u5206\u6570\u3002\u4e3a\u4e86\u4fdd\u8bc1\u5c3d\u91cf\u516c\u6b63\u5ba2\u89c2\uff0c\u6bcf\u4f4d\u9009\u624b\u7684\u5f97\u5206\u662f\u6240\u6709\u8bc4\u59d4\u7ed9\u51fa\u7684\u5206\u6570\u4e2d\u53bb\u6389\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff08\u5982\u679c\u6709\u591a\u4e2a\u6700\u5927\u503c/\u6700\u5c0f\u503c\uff0c\u53ea\u53bb\u6389\u4e00\u4e2a\uff09\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u5206\u6570\u7684\u5e73\u5747\u503c\u3002</p> <p>\u6700\u540e\u5f97\u5206\u6700\u5927\u7684\u9009\u624b\u83b7\u5f97\u7b2c\u4e00\u540d\uff0c\u5f97\u5206\u7b2c\u4e8c\u5927\u7684\u9009\u624b\u83b7\u5f97\u7b2c\u4e8c\u540d\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u4f46\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0\u540c\u5206\u7684\u60c5\u51b5\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c0f\u53ef\u53ef\u4f1a\u9ed8\u8ba4\u7f16\u53f7\u8f83\u5c0f\u7684\u9009\u624b\u6392\u540d\u66f4\u9760\u524d\u3002\u5373\uff0c\u5982\u679c \\(3\\) \u53f7\u9009\u624b\u548c \\(5\\) \u53f7\u9009\u624b\u7684\u5f97\u5206\u90fd\u662f \\(70\\)\uff0c\u90a3\u4e48\u5c0f\u53ef\u53ef\u4f1a\u8ba4\u4e3a \\(3\\) \u53f7\u9009\u624b\u7684\u6392\u540d\u6bd4 \\(5\\) \u53f7\u9009\u624b\u66f4\u9760\u524d\u3002</p> <p>\u73b0\u5728\u5c0f\u53ef\u53ef\u5df2\u7ecf\u77e5\u9053\u4e86\u6240\u6709\u9009\u624b\u5f97\u5230\u6240\u6709\u8bc4\u59d4\u7684\u5206\u6570\uff0c\u4ed6\u60f3\u8ba9\u4f60\u5e2e\u4ed6\u7b97\u51fa\u6765\u9009\u624b\u7684\u6392\u540d\u8868\uff0c\u5373\u5bf9\u4e8e \\(1 \\le i \\le n\\)\uff0c\u7b97\u51fa\u6392\u540d\u7b2c \\(i\\) \u7684\u9009\u624b\u7684\u7f16\u53f7\u662f\u4ec0\u4e48\u3002</p> <p>\u5bf9\u4e8e \\(30\\%\\) \u7684\u6570\u636e\uff0c\u6ee1\u8db3 \\(n, m \\le 3\\)\uff1b \u5bf9\u4e8e \\(60\\%\\) \u7684\u6570\u636e\uff0c\u6ee1\u8db3 \\(n, m \\le 10\\)\uff1b \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\u6ee1\u8db3 \\(2 \\le n \\le 100, 3 \\le m \\le 100, 0 \\le a_{i,j} \\le 100\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98A-%E8%AF%84%E5%88%86/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(n, m\\)\uff0c\u5206\u522b\u8868\u793a\u9009\u624b\u4e2a\u6570\u548c\u8bc4\u59d4\u4e2a\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(n\\) \u884c\u6bcf\u884c \\(m\\) \u4e2a\u6574\u6570\uff0c\u7b2c \\(i\\) \u884c\u7b2c j \u4e2a\u6574\u6570 \\(a_{i,j}\\) \u8868\u793a\u5728\u7b2c \\(i\\) \u4e2a\u9009\u624b\u8df3\u6c34\u4e4b\u540e\uff0c\u7b2c \\(j\\) \u4e2a\u8bc4\u59d4\u7ed9\u51fa\u7684\u5206\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98A-%E8%AF%84%E5%88%86/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u4e00\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6574\u6570\u8868\u793a\u6392\u540d\u4e3a \\(i\\) \u7684\u9009\u624b\u7684\u7f16\u53f7\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98A-%E8%AF%84%E5%88%86/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>4 4\n4 70 69 34\n18 43 85 71\n100 50 69 80\n67 82 90 43\n</code></pre> <pre><code>3 4 2 1\n</code></pre> <p>\u56db\u4f4d\u9009\u624b\u7684\u53bb\u6389\u6700\u5927\u3001\u6700\u5c0f\u503c\u4e4b\u540e\u7684\u5e73\u5747\u5206\u5206\u522b\u662f\uff1a\\(51.5\\), \\(57\\), \\(74.5\\), \\(74.5\\)\uff0c\u4f46\u7531\u4e8e\u4e09\u53f7\u9009\u624b\u7f16\u53f7\u6bd4\u56db\u53f7\u9009\u624b\u5c0f\uff0c\u6240\u4ee5\u6392\u540d\u4ece \\(1\\) \u5230 \\(4\\) \u7684\u9009\u624b\u5206\u522b\u4e3a\uff1a\\(3\\), \\(4\\), \\(2\\), \\(1\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98A-%E8%AF%84%E5%88%86/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u6bcf\u4f4d\u9009\u624b\u90fd\u662f\u7531 \\(m\\) \u4f4d\u8bc4\u59d4\u8bc4\u5206\u7684\uff0c\u56e0\u6b64\u6c42\u5e73\u5747\u503c\u6b65\u9aa4\u53ef\u4ee5\u7701\u53bb\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef pair&lt;lli, int&gt; pii;\nvector&lt;pii&gt; d;    // first: v; second: num\n\nbool cmp(const pii &amp; x, const pii &amp; y) {\n    if(x.first == y.first) return x.second &lt; y.second;\n    return x.first &gt; y.first;\n}\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i ++) {\n        lli sum = 0;\n        int mx = INT_MIN, mn = INT_MAX;\n        for(int j = 1, ia; j &lt;= m; j ++) {\n            scanf(\"%d\", &amp;ia);\n            sum += ia;\n            mx = max(mx, ia);\n            mn = min(mn, ia);\n        }\n        sum -= mx + mn;\n        d.push_back({sum, i});\n    }\n    sort(d.begin(), d.end(), cmp);\n    for(pii x : d) printf(\"%d \", x.second);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98B-%E6%B6%88%E6%B6%88%E4%B9%90/","title":"\u95ee\u9898 B: \u6d88\u6d88\u4e50","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 P9753 [CSP-S 2023] \u6d88\u6d88\u4e50 (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1aCSP-S 2023 \u7b2c\u4e8c\u8f6e T2</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98B-%E6%B6%88%E6%B6%88%E4%B9%90/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98B-%E6%B6%88%E6%B6%88%E4%B9%90/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u5c0f L \u73b0\u5728\u5728\u73a9\u4e00\u4e2a\u4f4e\u914d\u7248\u672c\u7684\u6d88\u6d88\u4e50\uff0c\u8be5\u7248\u672c\u7684\u6e38\u620f\u662f\u4e00\u7ef4\u7684\uff0c\u4e00\u6b21\u4e5f\u53ea\u80fd\u6d88\u9664\u4e24\u4e2a\u76f8\u90bb\u7684\u5143\u7d20\u3002</p> <p>\u73b0\u5728\uff0c\u4ed6\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u4e14\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u7684\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u79f0\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u53ef\u6d88\u9664\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\uff0c\u4f7f\u4e4b\u6210\u4e3a\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u3002</p> <p>\u5176\u4e2d\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\u4e24\u4e2a\u76f8\u90bb\u7684\u76f8\u540c\u5b57\u7b26\uff0c\u64cd\u4f5c\u540e\u5269\u4f59\u5b57\u7b26\u4e32\u4f1a\u62fc\u63a5\u5728\u4e00\u8d77\u3002</p> <p>\u5c0f L \u60f3\u77e5\u9053\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u975e\u7a7a\u8fde\u7eed\u5b50\u4e32\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u662f\u53ef\u6d88\u9664\u7684\u3002</p> <p>\u5bf9\u4e8e\u6240\u6709\u6d4b\u8bd5\u6570\u636e\u6709\uff1a\\(1 \\le n \\le 2 \\times 10^6\\)\uff0c\u4e14\u8be2\u95ee\u7684\u5b57\u7b26\u4e32\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98B-%E6%B6%88%E6%B6%88%E4%B9%90/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u8f93\u5165\u7684\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u4e14\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u7684\u7684\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u9898\u76ee\u4e2d\u8be2\u95ee\u7684\u5b57\u7b26\u4e32\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98B-%E6%B6%88%E6%B6%88%E4%B9%90/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u9898\u76ee\u8be2\u95ee\u7684\u7b54\u6848\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98B-%E6%B6%88%E6%B6%88%E4%B9%90/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>8\naccabccb\n</code></pre> <pre><code>5\n</code></pre> <p>\u4e00\u5171\u6709 \\(5\\) \u4e2a\u53ef\u6d88\u9664\u7684\u8fde\u7eed\u5b50\u4e32\uff0c\u5206\u522b\u662f <code>cc</code>\u3001<code>acca</code>\u3001<code>cc</code>\u3001<code>bccb</code>\u3001<code>accabccb</code>\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98B-%E6%B6%88%E6%B6%88%E4%B9%90/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u6b64\u9898\u89e3\u6cd5\u4f17\u591a\uff0c\u4ee5\u4e0b\u65b9\u6cd5\u4e0d\u662f\u6700\u4f18\u89e3\u3002\u7c7b\u4f3c\u9898\u76ee\uff1a\u6d1b\u8c37 P5658 [CSP-S2019] \u62ec\u53f7\u6811</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 2e6 + 9;\nlli dp[MAXn], match[MAXn], pre[MAXn][26];\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    string s;\n    getline(cin, s);\n    getline(cin, s);\n    s = \"#\" + s;\n    for(int i = 2; i &lt;= n; i++) {\n        if(s[i] == s[i - 1]) match[i] = i - 1;\n        else match[i] = pre[i - 1][s[i] - 'a'];\n        if(match[i] &gt; 1) {\n            for(int j = 0; j &lt; 26; j ++)\n                pre[i][j] = pre[match[i] - 1][j];\n            pre[i][s[match[i] - 1] - 'a'] = match[i] - 1;\n        }\n    }\n    lli ans = 0;\n    for(int i = 1; i &lt;= n; i++) {\n        if(match[i]) dp[i] = dp[match[i] - 1] + 1;\n        ans += dp[i];\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98C-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/","title":"\u95ee\u9898 C: \u673a\u5668\u7ffb\u8bd1","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 P1540 [NOIP2010 \u63d0\u9ad8\u7ec4] \u673a\u5668\u7ffb\u8bd1 (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1aNOIP2010 \u63d0\u9ad8\u7ec4 T1</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98C-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98C-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u5c0f\u6668\u7684\u7535\u8111\u4e0a\u5b89\u88c5\u4e86\u4e00\u4e2a\u673a\u5668\u7ffb\u8bd1\u8f6f\u4ef6\uff0c\u4ed6\u7ecf\u5e38\u7528\u8fd9\u4e2a\u8f6f\u4ef6\u6765\u7ffb\u8bd1\u82f1\u8bed\u6587\u7ae0\u3002</p> <p>\u8fd9\u4e2a\u7ffb\u8bd1\u8f6f\u4ef6\u7684\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5b83\u53ea\u662f\u4ece\u5934\u5230\u5c3e\uff0c\u4f9d\u6b21\u5c06\u6bcf\u4e2a\u82f1\u6587\u5355\u8bcd\u7528\u5bf9\u5e94\u7684\u4e2d\u6587\u542b\u4e49\u6765\u66ff\u6362\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u82f1\u6587\u5355\u8bcd\uff0c\u8f6f\u4ef6\u4f1a\u5148\u5728\u5185\u5b58\u4e2d\u67e5\u627e\u8fd9\u4e2a\u5355\u8bcd\u7684\u4e2d\u6587\u542b\u4e49\uff0c\u5982\u679c\u5185\u5b58\u4e2d\u6709\uff0c\u8f6f\u4ef6\u5c31\u4f1a\u7528\u5b83\u8fdb\u884c\u7ffb\u8bd1\uff1b\u5982\u679c\u5185\u5b58\u4e2d\u6ca1\u6709\uff0c\u8f6f\u4ef6\u5c31\u4f1a\u5728\u5916\u5b58\u4e2d\u7684\u8bcd\u5178\u5185\u67e5\u627e\uff0c\u67e5\u51fa\u5355\u8bcd\u7684\u4e2d\u6587\u542b\u4e49\u7136\u540e\u7ffb\u8bd1\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5355\u8bcd\u548c\u8bd1\u4e49\u653e\u5165\u5185\u5b58\uff0c\u4ee5\u5907\u540e\u7eed\u7684\u67e5\u627e\u548c\u7ffb\u8bd1\u3002</p> <p>\u5047\u8bbe\u5185\u5b58\u4e2d\u6709 \\(M\\) \u4e2a\u5355\u5143\uff0c\u6bcf\u5355\u5143\u80fd\u5b58\u653e\u4e00\u4e2a\u5355\u8bcd\u548c\u8bd1\u4e49\u3002\u6bcf\u5f53\u8f6f\u4ef6\u5c06\u4e00\u4e2a\u65b0\u5355\u8bcd\u5b58\u5165\u5185\u5b58\u524d\uff0c\u5982\u679c\u5f53\u524d\u5185\u5b58\u4e2d\u5df2\u5b58\u5165\u7684\u5355\u8bcd\u6570\u4e0d\u8d85\u8fc7 \\(M-1\\)\uff0c\u8f6f\u4ef6\u4f1a\u5c06\u65b0\u5355\u8bcd\u5b58\u5165\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u5185\u5b58\u5355\u5143\uff1b\u82e5\u5185\u5b58\u4e2d\u5df2\u5b58\u5165 \\(M\\) \u4e2a\u5355\u8bcd\uff0c\u8f6f\u4ef6\u4f1a\u6e05\u7a7a\u6700\u65e9\u8fdb\u5165\u5185\u5b58\u7684\u90a3\u4e2a\u5355\u8bcd\uff0c\u817e\u51fa\u5355\u5143\u6765\uff0c\u5b58\u653e\u65b0\u5355\u8bcd\u3002</p> <p>\u5047\u8bbe\u4e00\u7bc7\u82f1\u8bed\u6587\u7ae0\u7684\u957f\u5ea6\u4e3a \\(N\\) \u4e2a\u5355\u8bcd\u3002\u7ed9\u5b9a\u8fd9\u7bc7\u5f85\u8bd1\u6587\u7ae0\uff0c\u7ffb\u8bd1\u8f6f\u4ef6\u9700\u8981\u53bb\u5916\u5b58\u67e5\u627e\u591a\u5c11\u6b21\u8bcd\u5178\uff1f\u5047\u8bbe\u5728\u7ffb\u8bd1\u5f00\u59cb\u524d\uff0c\u5185\u5b58\u4e2d\u6ca1\u6709\u4efb\u4f55\u5355\u8bcd\u3002</p> <p>\u5bf9\u4e8e \\(10\\%\\) \u7684\u6570\u636e\u6709 \\(M=1\\)\uff0c\\(N \\leq 5\\)\uff1b \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\u6709 \\(1 \\leq M \\leq 100\\)\uff0c\\(1 \\leq N \\leq 1000\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98C-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u5171 \\(2\\) \u884c\u3002\u6bcf\u884c\u4e2d\u4e24\u4e2a\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570 \\(M,N\\)\uff0c\u4ee3\u8868\u5185\u5b58\u5bb9\u91cf\u548c\u6587\u7ae0\u7684\u957f\u5ea6\u3002</p> <p>\u7b2c\u4e8c\u884c\u4e3a \\(N\\) \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u6309\u7167\u6587\u7ae0\u7684\u987a\u5e8f\uff0c\u6bcf\u4e2a\u6570\uff08\u5927\u5c0f\u4e0d\u8d85\u8fc7 \\(1000\\)\uff09\u4ee3\u8868\u4e00\u4e2a\u82f1\u6587\u5355\u8bcd\u3002\u6587\u7ae0\u4e2d\u4e24\u4e2a\u5355\u8bcd\u662f\u540c\u4e00\u4e2a\u5355\u8bcd\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u5bf9\u5e94\u7684\u975e\u8d1f\u6574\u6570\u76f8\u540c\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98C-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u8f6f\u4ef6\u9700\u8981\u67e5\u8bcd\u5178\u7684\u6b21\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98C-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>3 7\n1 2 1 5 4 4 1\n</code></pre> <pre><code>5\n</code></pre> <p>\u6574\u4e2a\u67e5\u5b57\u5178\u8fc7\u7a0b\u5982\u4e0b\uff1a\u6bcf\u884c\u8868\u793a\u4e00\u4e2a\u5355\u8bcd\u7684\u7ffb\u8bd1\uff0c\u5192\u53f7\u524d\u4e3a\u672c\u6b21\u7ffb\u8bd1\u540e\u7684\u5185\u5b58\u72b6\u51b5\uff1a</p> <ol> <li><code>1</code>\uff1a\u67e5\u627e\u5355\u8bcd 1 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>1 2</code>\uff1a\u67e5\u627e\u5355\u8bcd 2 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>1 2</code>\uff1a\u5728\u5185\u5b58\u4e2d\u627e\u5230\u5355\u8bcd 1\u3002</li> <li><code>1 2 5</code>\uff1a\u67e5\u627e\u5355\u8bcd 5 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>2 5 4</code>\uff1a\u67e5\u627e\u5355\u8bcd 4 \u5e76\u8c03\u5165\u5185\u5b58\u66ff\u4ee3\u5355\u8bcd 1\u3002</li> <li><code>2 5 4</code>\uff1a\u5728\u5185\u5b58\u4e2d\u627e\u5230\u5355\u8bcd 4\u3002</li> <li><code>5 4 1</code>\uff1a\u67e5\u627e\u5355\u8bcd 1 \u5e76\u8c03\u5165\u5185\u5b58\u66ff\u4ee3\u5355\u8bcd 2\u3002</li> </ol> <p>\u5171\u8ba1\u67e5\u4e86 \\(5\\) \u6b21\u8bcd\u5178\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98C-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u4f7f\u7528 <code>queue&lt;int&gt;</code> \u6309\u7167\u987a\u5e8f\u8bb0\u5f55\u5185\u5b58\u4e2d\u7684\u5355\u8bcd\uff0c\u4ee5\u4fbf\u5165\u961f\u65b0\u5355\u8bcd\u548c\u5f39\u51fa\u6700\u540e\u4e00\u4e2a\u8001\u5355\u8bcd\uff1b\u4f7f\u7528 <code>bool exist[]</code> \u8bb0\u5f55\u67d0\u4e2a\u5355\u8bcd\u662f\u5426\u5b58\u5728\u4e8e\u5185\u5b58\u4e2d\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAX  = 1000 + 9;    // \u82f1\u6587\u5355\u8bcd\u4e0b\u6807\nconst int MAXn = 1000 + 9;    // \u67e5\u8be2\u6b21\u6570\nconst int MAXm =  100 + 9;    // \u5185\u5b58 que \u5927\u5c0f\nbool exist[MAX];\nqueue&lt;int&gt; que;\n\nint main() {\n    int m, n;\n    scanf(\"%d%d\", &amp;m, &amp;n);\n    int ans = 0;\n    for(int i = 1, ia; i &lt;= n; i ++) {\n        scanf(\"%d\", &amp;ia);\n        if(!exist[ia]) {\n            ans ++;\n            if(que.size() == m) {\n                exist[que.front()] = false;\n                que.pop();\n                que.push(ia);\n                exist[ia] = true;\n            }\n            else {\n                que.push(ia);\n                exist[ia] = true;\n            }\n        }\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98D-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","title":"\u95ee\u9898 D: \u63d2\u5165\u6392\u5e8f","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 P7910 [CSP-J 2021] \u63d2\u5165\u6392\u5e8f (1)</p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1aCSP-J 2021 \u7b2c\u4e8c\u8f6e T2</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98D-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98D-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u63d2\u5165\u6392\u5e8f\u662f\u4e00\u79cd\u975e\u5e38\u5e38\u89c1\u4e14\u7b80\u5355\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5c0f Z \u662f\u4e00\u540d\u5927\u4e00\u7684\u65b0\u751f\uff0c\u4eca\u5929 H \u8001\u5e08\u521a\u521a\u5728\u4e0a\u8bfe\u7684\u65f6\u5019\u8bb2\u4e86\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u3002</p> <p>\u5047\u8bbe\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\u7684\u65f6\u95f4\u4e3a \\(\\mathcal O(1)\\)\uff0c\u5219\u63d2\u5165\u6392\u5e8f\u53ef\u4ee5\u4ee5 \\(\\mathcal O(n^2)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6570\u7ec4\u7684\u6392\u5e8f\u3002\u4e0d\u59a8\u5047\u8bbe\u8fd9 \\(n\\) \u4e2a\u6570\u5b57\u5206\u522b\u5b58\u50a8\u5728 \\(a_1, a_2, \\ldots, a_n\\) \u4e4b\u4e2d\uff0c\u5219\u5982\u4e0b\u4f2a\u4ee3\u7801\u7ed9\u51fa\u4e86\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u7684\u4e00\u79cd\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a</p> <p>\u8fd9\u4e0b\u9762\u662f C/C++ \u7684\u793a\u8303\u4ee3\u7801\uff1a</p> <pre><code>for (int i = 1; i &lt;= n; i++)\n    for (int j = i; j &gt;= 2; j--)\n        if (a[j] &lt; a[j-1]) {\n            int t = a[j-1];\n            a[j-1] = a[j];\n            a[j] = t;\n        }\n</code></pre> <p>\u8fd9\u4e0b\u9762\u662f Pascal \u7684\u793a\u8303\u4ee3\u7801\uff1a</p> <pre><code>for i:=1 to n do\n    for j:=i downto 2 do\n        if a[j]&lt;a[j-1] then\n            begin\n                t:=a[i];\n                a[i]:=a[j];\n                a[j]:=t;\n            end;\n</code></pre> <p>\u4e3a\u4e86\u5e2e\u52a9\u5c0f Z \u66f4\u597d\u7684\u7406\u89e3\u63d2\u5165\u6392\u5e8f\uff0c\u5c0f Z \u7684\u8001\u5e08 H \u8001\u5e08\u7559\u4e0b\u4e86\u8fd9\u4e48\u4e00\u9053\u5bb6\u5ead\u4f5c\u4e1a\uff1a</p> <p>H \u8001\u5e08\u7ed9\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(a\\)\uff0c\u6570\u7ec4\u4e0b\u6807\u4ece \\(1\\) \u5f00\u59cb\uff0c\u5e76\u4e14\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u5747\u4e3a\u975e\u8d1f\u6574\u6570\u3002\u5c0f Z \u9700\u8981\u652f\u6301\u5728\u6570\u7ec4 \\(a\\) \u4e0a\u7684 \\(Q\\) \u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5171\u4e24\u79cd\uff0c\u53c2\u6570\u5206\u522b\u5982\u4e0b\uff1a</p> <p>\\(1~x~v\\)\uff1a\u8fd9\u662f\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c\u4f1a\u5c06 \\(a\\) \u7684\u7b2c \\(x\\) \u4e2a\u5143\u7d20\uff0c\u4e5f\u5c31\u662f \\(a_x\\) \u7684\u503c\uff0c\u4fee\u6539\u4e3a \\(v\\)\u3002\u4fdd\u8bc1 \\(1 \\le x \\le n\\)\uff0c\\(1 \\le v \\le 10^9\\)\u3002\u6ce8\u610f\u8fd9\u79cd\u64cd\u4f5c\u4f1a\u6539\u53d8\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u4fee\u6539\u5f97\u5230\u7684\u6570\u7ec4\u4f1a\u88ab\u4fdd\u7559\uff0c\u4e5f\u4f1a\u5f71\u54cd\u540e\u7eed\u7684\u64cd\u4f5c\u3002</p> <p>\\(2~x\\)\uff1a\u8fd9\u662f\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff0c\u5047\u8bbe H \u8001\u5e08\u6309\u7167\u4e0a\u9762\u7684\u4f2a\u4ee3\u7801\u5bf9 \\(a\\) \u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u4f60\u9700\u8981\u544a\u8bc9 H \u8001\u5e08\u539f\u6765 \\(a\\) \u7684\u7b2c \\(x\\) \u4e2a\u5143\u7d20\uff0c\u4e5f\u5c31\u662f \\(a_x\\)\uff0c\u5728\u6392\u5e8f\u540e\u7684\u65b0\u6570\u7ec4\u6240\u5904\u7684\u4f4d\u7f6e\u3002\u4fdd\u8bc1 \\(1 \\le x \\le n\\)\u3002\u6ce8\u610f\u8fd9\u79cd\u64cd\u4f5c\u4e0d\u4f1a\u6539\u53d8\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e0d\u4f1a\u88ab\u4fdd\u7559\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u540e\u7eed\u7684\u64cd\u4f5c\u3002</p> <p>H \u8001\u5e08\u4e0d\u559c\u6b22\u8fc7\u591a\u7684\u4fee\u6539\uff0c\u6240\u4ee5\u4ed6\u4fdd\u8bc1\u7c7b\u578b \\(1\\) \u7684\u64cd\u4f5c\u6b21\u6570\u4e0d\u8d85\u8fc7 \\(5000\\)\u3002</p> <p>\u5c0f Z \u6ca1\u6709\u5b66\u8fc7\u8ba1\u7b97\u673a\u7ade\u8d5b\uff0c\u56e0\u6b64\u5c0f Z \u5e76\u4e0d\u4f1a\u505a\u8fd9\u9053\u9898\u3002\u4ed6\u627e\u5230\u4e86\u4f60\u6765\u5e2e\u52a9\u4ed6\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98D-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 \\(n, Q\\)\uff0c\u8868\u793a\u6570\u7ec4\u957f\u5ea6\u548c\u64cd\u4f5c\u6b21\u6570\u3002</p> <p>\u7b2c\u4e8c\u884c\uff0c\u5305\u542b \\(n\\) \u4e2a\u7a7a\u683c\u5206\u9694\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5176\u4e2d\u7b2c \\(i\\) \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a \\(a_i\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(Q\\) \u884c\uff0c\u6bcf\u884c \\(2 \\sim 3\\) \u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u4e00\u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u683c\u5f0f\u89c1\u3010\u9898\u76ee\u63cf\u8ff0\u3011\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98D-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u7c7b\u578b\u4e3a \\(2\\) \u7684\u8be2\u95ee\uff0c\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570\u8868\u793a\u7b54\u6848\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98D-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>3 4\n3 2 1\n2 3\n1 3 2\n2 2\n2 3\n</code></pre> <pre><code>1\n1\n2\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98D-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u6ce8\u610f\u5230\u4fee\u6539\u64cd\u4f5c\u7684\u6b21\u6570\u5e76\u4e0d\u591a\uff0c\u800c\u67e5\u8be2\u64cd\u4f5c\u7684\u6b21\u6570\u8f83\u591a\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u8f83\u4f4e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u67e5\u8be2\u64cd\u4f5c\uff0c\u800c\u4fee\u6539\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u66f4\u9ad8\u3002\u4e0d\u80fd\u4f7f\u7528\u6a21\u62df\u7684\u65b9\u6cd5\u5b8c\u6210\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int MAXn = 8000 + 9;\nint d[MAXn], p[MAXn];\nvector&lt;pii&gt; v;    // first: val; second: i\n\nbool cmp(const pii &amp; x, const pii &amp; y) {\n    if(x.first == y.first) return x.second &lt; y.second;\n    return x.first &lt; y.first;\n}\n\nint main() {\n    int n, q;\n    scanf(\"%d%d\", &amp;n, &amp;q);\n    for(int i = 1; i &lt;= n; i ++) {\n        scanf(\"%d\", &amp;d[i]);\n        v.push_back({d[i], i});\n    }\n    sort(v.begin(), v.end(), cmp);\n    for(int posi = 1; pii x : v) p[x.second] = posi ++;\n    for(int i = 1, op, ia, ib; i &lt;= q; i ++) {\n        scanf(\"%d%d\", &amp;op, &amp;ia);\n        if(op == 1) {\n            scanf(\"%d\", &amp;ib);\n            if(d[ia] == ib) continue;\n            for(int j = 1; j &lt;= n; j ++)\n                // 1 2 3 4 5 6\n                // 1 5 3 4 5 6\n                if(((d[j] &lt; d[ia]) || (d[ia] == d[j] &amp;&amp; j &lt; ia))\n                &amp;&amp; ((d[j] &gt; ib)    || (d[j] == ib &amp;&amp; j &gt; ia)))\n                    p[j] ++, p[ia] --;\n                else\n                if(((d[j] &gt; d[ia]) || (d[ia] == d[j] &amp;&amp; j &gt; ia))\n                &amp;&amp; ((d[j] &lt; ib)    || (d[j] == ib &amp;&amp; j &lt; ia)))\n                    p[j] --, p[ia] ++;\n            d[ia] = ib;\n        }\n        else printf(\"%d\\n\", p[ia]);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98E-%E6%A3%80%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"\u95ee\u9898 E: \u68c0\u7d22\u5b57\u7b26\u4e32","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u5b57\u7b26\u4e32 Ad-Hoc</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98E-%E6%A3%80%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98E-%E6%A3%80%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684 \\(n\\) \u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u4eec\u7684\u4efb\u610f\u987a\u5e8f\u6392\u5217\u4e4b\u540e\u5f97\u5230\u4e86\u4e32\u8054\u5b57\u7b26\u4e32\u3002\u6bd4\u5982\uff1a\\(n=3\\)\uff0c\u5b57\u7b26\u4e32\u5206\u522b\u4e3a\u201c\\(\\texttt{ab}\\)\u201d\uff0c\u201c\\(\\texttt{cd}\\)\u201d\uff0c\u201c\\(\\texttt{ef}\\)\u201d\uff0c\u4e32\u8054\u5b50\u4e32\u5982\u4e0b\uff1a</p> <p>\u201c\\(\\texttt{abcdef}\\)\u201d\uff0c\u201c\\(\\texttt{abefcd}\\)\u201d\uff0c\u201c\\(\\texttt{cdabef}\\)\u201d\uff0c\u201c\\(\\texttt{cdefab}\\)\u201d\uff0c\u201c\\(\\texttt{efabcd}\\)\u201d\uff0c\u201c\\(\\texttt{efcdab}\\)\u201d \u90fd\u662f\u4e32\u8054\u5b57\u7b26\u4e32\u3002\u201c\\(\\texttt{acdbef}\\)\u201d \u4e0d\u662f\u4e32\u8054\u5b50\u4e32\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662f\u6709\u6548\u7684\u6392\u5217\u8fde\u63a5\u3002</p> <p>\u73b0\u5728\uff0c\u7a0b\u5e8f\u7ed9\u5b9a\u4e00\u4e2a\u9700\u8981\u68c0\u7d22\u7684\u5b57\u7b26\u4e32\uff0c\u67e5\u8be2\u8be5\u68c0\u7d22\u5b57\u7b26\u4e32\u4e2d\u662f\u5426\u542b\u6709\u4e0a\u8ff0\u5404\u79cd\u4e32\u8054\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u8f93\u51fa\u5176\u5bf9\u5e94\u7684\u4f4d\u7f6e\u7f16\u53f7\uff08\u5982\u6709\u591a\u4e2a\uff0c\u7528\u7a7a\u683c\u5206\u9694\uff09\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u8f93\u51fa \\(-1\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98E-%E6%A3%80%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\uff0c\u8f93\u5165 \\(n\\) \u7684\u503c\u3002\uff08\\(1\\le n&lt;10\\)\uff09</p> <p>\u63a5\u4e0b\u6765\u7684 \\(n\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165\u9700\u8981\u4e32\u8054\u7684\u5b57\u7b26\u4e32 \\(P_i\\)\u3002\uff08\\(1\\le |Pi|\\le 10\\)\uff09</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u7b2c \\(n+1\\) \u884c\uff0c\u8f93\u5165\u9700\u8981\u68c0\u7d22\u7684\u5b57\u7b26\u4e32 \\(S\\)\u3002\uff08\\(1\\le |S|\\le 1000\\)\uff09</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98E-%E6%A3%80%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u4e00\u884c\uff0c\u8f93\u51fa\u7b26\u5408\u9898\u610f\u7684\u4f4d\u7f6e\u7f16\u53f7\uff08\u5982\u679c\u6709\u591a\u4e2a\uff0c\u6309\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\uff0c\u7528\u7a7a\u683c\u5206\u9694\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8f93\u51fa-1\uff09\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98E-%E6%A3%80%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>2\nfoo\nbar\nbarfoothefoobarman\n</code></pre> <pre><code>0 9\n</code></pre> <pre><code>3\nbar\nfoo\nthe\nbarfoofoobarthefoobarman\n</code></pre> <pre><code>6 9 12\n</code></pre> <pre><code>4\nword\ngood\nbest\nword\nwordgoodgoodgoodbestword\n</code></pre> <pre><code>-1\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98E-%E6%A3%80%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u4eec\u7684\u957f\u5ea6 \\(len \\equiv \\sum_{i=1}^{n} {|P_i|}\\)\u3002\u56e0\u6b64\u904d\u5386\u6bcf\u4e2a\u957f\u5ea6\u4e3a \\(len\\) \u7684\u533a\u95f4\uff0c\u5224\u65ad\u8be5\u533a\u95f4\u662f\u5426\u7b26\u5408\u6761\u4ef6\u3002</p> <p>\u4ee5\u4e0b\u4e0d\u540c\u89e3\u6cd5\u7684\u533a\u522b\u5728\u4e8e\u5224\u65ad\u8be5\u533a\u95f4\u662f\u5426\u7b26\u5408\u6761\u4ef6\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98E-%E6%A3%80%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u5168\u6392\u5217--\u54c8\u5e0c","title":"\u5168\u6392\u5217 + \u54c8\u5e0c","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int BASE1 = 13131, P1 = 1e9 + 7;\nconst int BASE2 =  1331, P2 = 1e9 + 9;\nconst int MAXn = 30 + 9;\nstring oris[MAXn];\nvector&lt;int&gt; v;\nvector&lt;pii&gt; msc[11];\nconst int MAXm = 1e4 + 9;\nint h1[MAXm], b1[MAXm];\nint h2[MAXm], b2[MAXm];\n\npii fsha(int l, int r) {\n    int ans1 = (h1[r] - 1ll * h1[l - 1] * b1[r - l + 1] % P1 + P1) % P1;\n    int ans2 = (h2[r] - 1ll * h2[l - 1] * b2[r - l + 1] % P2 + P2) % P2;\n    return {ans1, ans2};\n}\n\nint main() {\n    int n, len = 0;\n    scanf(\"%d\", &amp;n);\n    getline(cin, oris[1]);\n    for(int i = 1; i &lt;= n; i ++) {\n        getline(cin, oris[i]);\n        v.push_back(i);\n        len += oris[i].length();\n    }\n    do {\n        int sha1 = 0, sha2 = 0;\n        string s = \"\";\n        for(int p : v)\n            s += oris[p];\n        for(char c : s)\n            sha1 = (1ll * sha1 * BASE1 + c) % P1,\n            sha2 = (1ll * sha2 * BASE2 + c) % P2;\n        msc[sha1 % 10].push_back({sha1, sha2});\n    }\n    while(next_permutation(v.begin(), v.end()));\n    string ppc;\n    getline(cin, ppc);\n    int m = ppc.length();\n    ppc = \"#\" + ppc;\n    h1[0] = h2[0] = b1[0] = b2[0] = 1;\n    for(int i = 1; i &lt;= m; i ++) {\n        h1[i] = (1ll * h1[i - 1] * BASE1 + ppc[i]) % P1;\n        h2[i] = (1ll * h2[i - 1] * BASE2 + ppc[i]) % P2;\n        b1[i] = (1ll * b1[i - 1] * BASE1) % P1;\n        b2[i] = (1ll * b2[i - 1] * BASE2) % P2;\n    }\n    bool can = false;\n    for(int i = 1; i + len - 1 &lt;= m; i ++) {\n        pii sha = fsha(i, i + len - 1);\n        int md = sha.first % 10;\n        for(pii x : msc[md]) {\n            if(sha == x) {\n                can = true;\n                printf(\"%d \", i - 1);\n                break;\n            }\n        }\n    }\n    if(!can) printf(\"-1\");\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98E-%E6%A3%80%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/#\u641c\u7d22","title":"\u641c\u7d22","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 100 + 9;\nstring d[MAXn];\nint n;\nstring s;\n\nbool used[MAXn];\nbool dfs(int i, int j) {\n    if(i - 1 == j) return true;\n    int len = j - i + 1;\n    for(int k = 1; k &lt;= n; k ++) {\n        if(!used[k] &amp;&amp; d[k].length() &lt;= len &amp;&amp; s.substr(i, d[k].length()) == d[k]) {\n            used[k] = true;\n            if(dfs(i + d[k].length(), j))\n                return true;\n            used[k] = false;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int len = 0;\n    scanf(\"%d\", &amp;n);\n    getline(cin, d[1]);\n    for(int i = 1; i &lt;= n; i ++) {\n        getline(cin, d[i]);\n        len += d[i].length();\n    }\n    getline(cin, s);\n    int m = s.length();\n    s = \"#\" + s;\n    bool can = false;\n    for(int i = 1; i + len - 1 &lt;= m; i ++)\n        if(memset(used, 0, sizeof(used)) &amp;&amp; dfs(i, i + len - 1)) {\n            can = true;\n            printf(\"%d \", i - 1);\n        }\n    if(!can) printf(\"-1\");\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98F-%E5%AD%97%E7%AC%A6%E7%A7%BB%E5%8A%A8/","title":"\u95ee\u9898 F: \u5b57\u7b26\u79fb\u52a8","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u5b57\u7b26\u4e32 Ad-Hoc</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98F-%E5%AD%97%E7%AC%A6%E7%A7%BB%E5%8A%A8/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98F-%E5%AD%97%E7%AC%A6%E7%A7%BB%E5%8A%A8/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u5728\u4e00\u4e2a\u7531\\(\\texttt{\u201cL}\\)\u201d\uff0c\\(\\texttt{\u201cR}\\)\u201d\uff0c\\(\\texttt{\u201cX}\\)\u201d\u4e09\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e2d\u8fdb\u884c\u79fb\u52a8\u64cd\u4f5c\u3002\u6bd4\u5982\uff0c\u4e00\u6b21\u79fb\u52a8\u64cd\u4f5c\u662f\u6307\u5c06\u4e00\u4e2a\u201c\\(\\texttt{XL}\\)\u201d\u66ff\u6362\u4e3a\u4e00\u4e2a\u201c\\(\\texttt{LX}\\)\u201d\uff0c\u6216\u8005\u7528\u4e00\u4e2a\u201c\\(\\texttt{RX}\\)\u201d\u66ff\u6362\u4e3a\u4e00\u4e2a\u201c\\(\\texttt{XR}\\)\u201d\u3002\u73b0\u7ed9\u5b9a\u8d77\u59cb\u5b57\u7b26\u4e32 \\(S\\) \u548c\u7ed3\u675f\u5b57\u7b26\u4e32 \\(T\\)\uff0c\u8bf7\u7f16\u5199\u4ee3\u7801\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u7cfb\u5217\u79fb\u52a8\u64cd\u4f5c\u4f7f\u5f97 \\(S\\) \u4e32\u53ef\u4ee5\u8f6c\u6362\u6210 \\(T\\) \u4e32\u65f6\uff0c\u8fd4\u56de\u201c\\(\\texttt{True}\\)\u201d\uff0c\u5426\u5219\u8fd4\u56de\u201c\\(\\texttt{False}\\)\u201d\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98F-%E5%AD%97%E7%AC%A6%E7%A7%BB%E5%8A%A8/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(S\\) \u4e32\uff08\\(1\\le |S|\\le 10000\\)\uff09\u3002</p> <p>\u7b2c\u4e8c\u884c\u8f93\u5165 \\(T\\) \u4e32\uff08\\(1\\le |T|\\le 10000\\)\uff09\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98F-%E5%AD%97%E7%AC%A6%E7%A7%BB%E5%8A%A8/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u7b26\u5408\u9898\u610f\u7684\u503c\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98F-%E5%AD%97%E7%AC%A6%E7%A7%BB%E5%8A%A8/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>RXXLRXRXL\nXRLXXRRLX\n</code></pre> <pre><code>True\n</code></pre> <pre><code>RXRXXLRXLX\nXRXRLXRXXL\n</code></pre> <pre><code>False\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98F-%E5%AD%97%E7%AC%A6%E7%A7%BB%E5%8A%A8/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    string s, t;\n    getline(cin, s);\n    getline(cin, t);\n    int ls = s.length(), lt = t.length();\n    if(ls != lt) return 0 * printf(\"False\");\n    s = \"#\" + s; t = \"#\" + t;\n    int i = 1, j = 1;\n    while(i &lt;= ls &amp;&amp; j &lt;= lt) {\n        while(i &lt;= ls &amp;&amp; s[i] == 'X') i ++;\n        while(j &lt;= lt &amp;&amp; t[j] == 'X') j ++;\n        if(i &lt;= ls &amp;&amp; j &lt;= lt)\n            if(s[i] != t[j]) return 0 * printf(\"False\");\n            else if(s[i] == 'L' &amp;&amp; i &lt; j) return 0 * printf(\"False\");\n            else if(s[i] == 'R' &amp;&amp; i &gt; j) return 0 * printf(\"False\");\n            else i ++, j ++;\n    }\n    while(i &lt;= ls) if(s[i++] != 'X') return 0 * printf(\"False\");\n    while(j &lt;= lt) if(t[j++] != 'X') return 0 * printf(\"False\");\n    printf(\"True\");\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98G-%E5%88%87%E5%89%B2%E7%BB%B3%E5%AD%90/","title":"\u95ee\u9898 G: \u5207\u5272\u7ef3\u5b50","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u4e8c\u5206</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98G-%E5%88%87%E5%89%B2%E7%BB%B3%E5%AD%90/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98G-%E5%88%87%E5%89%B2%E7%BB%B3%E5%AD%90/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u6709 \\(n\\) \u6761\u7ef3\u5b50\uff0c\u6bcf\u6761\u7ef3\u5b50\u7684\u957f\u5ea6\u5df2\u77e5\u4e14\u5747\u4e3a\u6b63\u6574\u6570\u3002\u7ef3\u5b50\u53ef\u4ee5\u4ee5\u4efb\u610f\u6b63\u6574\u6570\u957f\u5ea6\u5207\u5272\uff0c\u4f46\u4e0d\u53ef\u4ee5\u8fde\u63a5\u3002\u73b0\u5728\u8981\u4ece\u8fd9\u4e9b\u7ef3\u5b50\u4e2d\u5207\u5272\u51fa \\(m\\) \u6761\u957f\u5ea6\u76f8\u540c\u7684\u7ef3\u6bb5\uff0c\u6c42\u7ef3\u6bb5\u7684\u6700\u5927\u957f\u5ea6\u662f\u591a\u5c11\uff1f</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98G-%E5%88%87%E5%89%B2%E7%BB%B3%E5%AD%90/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u4e0d\u8d85\u8fc7 \\(1000\\) \u7684\u6b63\u6574\u6570 \\(n\\)\u3002</p> <p>\u7b2c\u4e8c\u884c\u662f \\(n\\) \u4e2a\u4e0d\u8d85\u8fc7 \\(10^6\\) \u7684\u6b63\u6574\u6570\uff0c\u8868\u793a\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u3002</p> <p>\u7b2c\u4e09\u884c\u662f\u4e00\u4e2a\u4e0d\u8d85\u8fc7 \\(10^8\\) \u7684\u6b63\u6574\u6570 \\(m\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98G-%E5%88%87%E5%89%B2%E7%BB%B3%E5%AD%90/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u7ef3\u6bb5\u7684\u6700\u5927\u957f\u5ea6\uff0c\u82e5\u65e0\u6cd5\u5207\u5272\uff0c\u5219\u8f93\u51fa\u201c\\(\\texttt{Failed}\\)\u201d\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98G-%E5%88%87%E5%89%B2%E7%BB%B3%E5%AD%90/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>4\n20 40 35 38\n7\n</code></pre> <pre><code>17\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98G-%E5%88%87%E5%89%B2%E7%BB%B3%E5%AD%90/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98G-%E5%88%87%E5%89%B2%E7%BB%B3%E5%AD%90/#\u666e\u901a\u4e8c\u5206","title":"\u666e\u901a\u4e8c\u5206","text":"<p>\u8ba1\u7b97\u4e2d\u5fc3\u70b9 \\(m\\) \u7684\u51e0\u79cd\u65b9\u6cd5\uff1a</p> <ul> <li><code>m = (l + r) &gt;&gt; 1</code></li> <li><code>m = l + ((r - l) &gt;&gt; 1)</code></li> <li><code>m = (l &amp; r) + ((l ^ r) &gt;&gt; 1)</code></li> </ul> <p>\u4ee5\u4e0b\u4ee3\u7801\u7684\u4e8c\u5206\u533a\u95f4\u4e3a \\([l, r)\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1e3 + 9;\nint d[MAXn];\nint n, m;\n\nbool check(int x) {\n    int ans = 0;\n    for(int i = 1; i &lt;= n; i ++)\n        ans += d[i] / x;\n    return ans &gt;= m;\n}\n\nint ef() {\n    int l = 0, r = 1e9 + 1;\n    while(l + 1 &lt; r) {\n        int m = l + ((r - l) &gt;&gt; 1);\n        if(check(m)) l = m;\n        else r = m;\n    }\n    return l;\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]);\n    scanf(\"%d\", &amp;m);\n    int ans = ef();\n    ans == 0 ? printf(\"Failed\") : printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98G-%E5%88%87%E5%89%B2%E7%BB%B3%E5%AD%90/#\u500d\u589e","title":"\u500d\u589e","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1e3 + 9;\nint d[MAXn];\nint n, m;\n\nbool check(int x) {\n    int ans = 0;\n    for(int i = 1; i &lt;= n; i ++)\n        ans += d[i] / x;\n    return ans &gt;= m;\n}\n\nint bz() {\n    int ans = 0;\n    for(int i = 20; i &gt;= 0; i --) {\n        int t = ans | (1 &lt;&lt; i);\n        if(check(t)) ans = t;\n    }\n    return ans;\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]);\n    scanf(\"%d\", &amp;m);\n    int ans = bz();\n    ans == 0 ? printf(\"Failed\") : printf(\"%d\", ans);\n    return 0;\n}   \n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98H-%E5%A5%B6%E7%89%9B%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B7%AE/","title":"\u95ee\u9898 H: \u5976\u725b\u7684\u9ad8\u5ea6\u5dee","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 P2880 [USACO07JAN] Balanced Lineup G (1) | RMQ \u95ee\u9898 </p> <ol> <li>\u9898\u76ee\u6765\u6e90\uff1aUSACO 2007/1 \u6708\u8d5b</li> </ol>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98H-%E5%A5%B6%E7%89%9B%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B7%AE/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98H-%E5%A5%B6%E7%89%9B%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B7%AE/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u6bcf\u5929\uff0c\u519c\u592b John \u7684 \\(n\\:(1\\le n\\le 5\\times 10^4)\\) \u5934\u725b\u603b\u662f\u6309\u540c\u4e00\u5e8f\u5217\u6392\u961f\u3002</p> <p>\u6709\u4e00\u5929\uff0cJohn \u51b3\u5b9a\u8ba9\u4e00\u4e9b\u725b\u4eec\u73a9\u4e00\u573a\u98de\u76d8\u6bd4\u8d5b\u3002\u4ed6\u51c6\u5907\u627e\u4e00\u7fa4\u5728\u961f\u5217\u4e2d\u4f4d\u7f6e\u8fde\u7eed\u7684\u725b\u6765\u8fdb\u884c\u6bd4\u8d5b\u3002\u4f46\u662f\u4e3a\u4e86\u907f\u514d\u6c34\u5e73\u60ac\u6b8a\uff0c\u725b\u7684\u8eab\u9ad8\u4e0d\u5e94\u8be5\u76f8\u5dee\u592a\u5927\u3002John \u51c6\u5907\u4e86 \\(q\\:(1\\le q\\le 1.8\\times10^5)\\) \u4e2a\u53ef\u80fd\u7684\u725b\u7684\u9009\u62e9\u548c\u6240\u6709\u725b\u7684\u8eab\u9ad8 \\(h_i\\:(1\\le h_i\\le 10^6, 1\\le i\\le n)\\)\u3002\u4ed6\u60f3\u77e5\u9053\u6bcf\u4e00\u7ec4\u91cc\u9762\u6700\u9ad8\u548c\u6700\u4f4e\u7684\u725b\u7684\u8eab\u9ad8\u5dee\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98H-%E5%A5%B6%E7%89%9B%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B7%AE/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\u4e24\u4e2a\u6570 \\(n,q\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570 \\(h_i\\)\u3002</p> <p>\u518d\u63a5\u4e0b\u6765 \\(q\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(a\\) \u548c \\(b\\)\uff0c\u8868\u793a\u8be2\u95ee\u7b2c \\(a\\) \u5934\u725b\u5230\u7b2c \\(b\\) \u5934\u725b\u91cc\u7684\u6700\u9ad8\u548c\u6700\u4f4e\u7684\u725b\u7684\u8eab\u9ad8\u5dee\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98H-%E5%A5%B6%E7%89%9B%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B7%AE/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa\u5171 \\(q\\) \u884c\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u8be2\u95ee\uff0c\u8f93\u51fa\u6bcf\u4e00\u7ec4\u4e2d\u6700\u9ad8\u548c\u6700\u4f4e\u7684\u725b\u7684\u8eab\u9ad8\u5dee\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98H-%E5%A5%B6%E7%89%9B%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B7%AE/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>6 3\n1\n7\n3\n4\n2\n5\n1 5\n4 6\n2 2\n</code></pre> <pre><code>6\n3\n0\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98H-%E5%A5%B6%E7%89%9B%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B7%AE/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98H-%E5%A5%B6%E7%89%9B%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B7%AE/#st-\u8868","title":"ST \u8868","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1.8e5 + 9;\nconst int MAXl = 25;\nint mx[MAXn][MAXl], mn[MAXn][MAXl];\n\nint main() {\n    for(int i = 0; i &lt;= MAXn - 3; i ++)\n        for(int j = 0; j &lt;= MAXl - 1; j ++)\n            mn[i][j] = INT_MAX;\n    int n, m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;mx[i][0]), mn[i][0] = mx[i][0];\n    for(int j = 1; j &lt;= MAXl; j ++) {\n        int alen = 1 &lt;&lt; j;\n        int blen = 1 &lt;&lt; (j - 1);\n        for(int i = 1; i &lt;= n - alen + 1; i ++)\n            mx[i][j] = max(mx[i][j - 1], mx[i + blen][j - 1]),\n            mn[i][j] = min(mn[i][j - 1], mn[i + blen][j - 1]);\n    }\n    for(int i = 1, l, r, lg, len; i &lt;= m; i ++) {\n        scanf(\"%d%d\", &amp;l, &amp;r);\n        lg = log2(r - l + 1);\n        len = 1 &lt;&lt; lg;\n        printf(\"%d\\n\", max(mx[l][lg], mx[r - len + 1][lg])\n                     - min(mn[l][lg], mn[r - len + 1][lg]));\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98H-%E5%A5%B6%E7%89%9B%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B7%AE/#\u7ebf\u6bb5\u6811","title":"\u7ebf\u6bb5\u6811","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define calm ((a + b) &gt;&gt; 1)\nusing namespace std;\nconst int MAXn = 1.8e5 + 9;\nint d[MAXn + 9], tx[(MAXn &lt;&lt; 2) + 9], tn[(MAXn &lt;&lt; 2) + 9];\nint n;\n\nvoid fini(int a, int b, int p) {\n    if(a == b) return tx[p] = tn[p] = d[a], void();\n    int m = calm;\n    fini(a, m, p &lt;&lt; 1);\n    fini(m + 1, b, p &lt;&lt; 1 | 1);\n    tx[p] = max(tx[p &lt;&lt; 1], tx[p &lt;&lt; 1 | 1]);\n    tn[p] = min(tn[p &lt;&lt; 1], tn[p &lt;&lt; 1 | 1]);\n}\n\nint fgetmx(int x, int y, int a, int b, int p) {\n    if(x &lt;= a &amp;&amp; b &lt;= y) return tx[p];\n    int m = calm, mx = 0;\n    if(x &lt;= m) mx = max(mx, fgetmx(x, y, a, m, p &lt;&lt; 1));\n    if(m + 1 &lt;= y) mx = max(mx, fgetmx(x, y, m + 1, b, p &lt;&lt; 1 | 1));\n    return mx;\n}\n\nint fgetmn(int x, int y, int a, int b, int p) {\n    if(x &lt;= a &amp;&amp; b &lt;= y) return tn[p];\n    int m = calm, mn = INT_MAX;\n    if(x &lt;= m) mn = min(mn, fgetmn(x, y, a, m, p &lt;&lt; 1));\n    if(m + 1 &lt;= y) mn = min(mn, fgetmn(x, y, m + 1, b, p &lt;&lt; 1 | 1));\n    return mn;\n}\n\nint main() {\n    int m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%d\", &amp;d[i]);\n    fini(1, n, 1);\n    for(int i = 1, l, r; i &lt;= m; i ++) {\n        scanf(\"%d%d\", &amp;l, &amp;r);\n        printf(\"%d\\n\", fgetmx(l, r, 1, n, 1) - fgetmn(l, r, 1, n, 1));\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98I-%E6%97%85%E8%A1%8C/","title":"\u95ee\u9898 I: \u65c5\u884c","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98I-%E6%97%85%E8%A1%8C/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98I-%E6%97%85%E8%A1%8C/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u4e50\u4e50\u8981\u662f\u5f00\u59cb\u4ed6\u7684\u80cc\u5305\u65c5\u884c\uff0c\u8fd9\u6b21\u5171 \\(n\\) \u4e2a\u57ce\u5e02\uff0c\u7f16\u53f7\u4e3a \\(1 \\sim n\\)\u3002\u4e50\u4e50\u4ece\u7f16\u53f7\u4e3a \\(1\\) \u7684\u57ce\u5e02\u51fa\u53d1\uff0c\u524d\u5f80\u7f16\u53f7\u4e3a \\(n\\) \u7684\u57ce\u5e02\u3002\u6bcf\u4e2a\u57ce\u5e02\u90fd\u6709\u4e00\u4ef6\u7269\u54c1\uff0c\u91cd\u91cf\u4e3a \\(w_i\\)\uff0c\u4ef7\u503c\u4e3a \\(v_i\\)\u3002\u4e50\u4e50\u4ece\u4e00\u4e2a\u57ce\u5e02\u5230\u53e6\u4e00\u4e2a\u57ce\u5e02\uff0c\u5982\u679c\u80cc\u5305\u4e2d\u7684\u7269\u54c1\u91cd\u91cf\u4e3a \\(a\\)\uff0c\u884c\u8d70\u8ddd\u79bb\u4e3a \\(b\\) \u65f6\uff0c\u82b1\u8d39\u7684\u4f53\u529b\u4e3a \\(a \\times b\\)\uff0c\u4e50\u4e50\u6700\u591a\u53ea\u80fd\u80cc\u603b\u91cd\u91cf\u4e3a \\(W\\) \u7684\u7269\u54c1\u3002\u4e50\u4e50\u5e0c\u671b\u5230\u8fbe \\(n\\) \u65f6\uff0c\u80cc\u5305\u4e2d\u7684\u7269\u54c1\u4ef7\u503c\u6700\u5927\uff0c\u540c\u65f6\u82b1\u8d39\u7684\u4f53\u529b\u6700\u5c0f\u3002\\(n\\) \u4e2a\u57ce\u5e02\u4e4b\u95f4\u5171 \\(m\\) \u6761\u5355\u5411\u8def\uff0c\u4e14\u65e0\u73af\uff0c\u4ece\u4e00\u4e2a\u57ce\u5e02\u51fa\u53d1\u4e4b\u540e\uff0c\u65e0\u6cd5\u518d\u56de\u5230\u8fd9\u4e2a\u57ce\u5e02\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98I-%E6%97%85%E8%A1%8C/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c \\(3\\) \u4e2a\u6574\u6570 \\(n,\\: m,\\:W\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c \\(2\\) \u4e2a\u6574\u6570\u8868\u793a \\(w_i\\) \u548c \\(v_i\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6bcf\u884c \\(3\\) \u4e2a\u6574\u6570 \\(x_i,\\:y_i,\\:z_i\\)\uff0c\u65e0\u91cd\u8fb9\uff0c\u65e0\u81ea\u73af\u3002\u6570\u636e\u4fdd\u8bc1 \\(1\\) \u53ef\u4ee5\u5230\u8fbe \\(n\\)\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98I-%E6%97%85%E8%A1%8C/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u8f93\u51fa \\(2\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u503c\u4ef7\u503c\u548c\u83b7\u5f97\u6700\u5927\u503c\u60c5\u51b5\u4e0b\u6700\u5c0f\u7684\u4f53\u529b\u6d88\u8017\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98I-%E6%97%85%E8%A1%8C/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>5 6 10\n2 2\n1 3\n3 5\n4 2\n2 3\n1 2 1\n2 4 5\n2 5 3\n1 3 4\n3 4 2\n4 5 2\n</code></pre> <pre><code>10 20\n</code></pre> <pre><code>\u80cc\u5305\u5bb9\u91cf\uff1a10\n\uff08X\u4ee3\u8868\u88c5\u4e0d\u4e0b\u80cc\u5305\uff0c\u8be5\u65b9\u6848\u88ab\u820d\u5f03\uff09\n------------------------------------------------------------------\n\u6cd51\uff1a1 \u2192 3 \u2192 4 \u2192 5\n\u9009\u62e9\uff1a1345  134  135  145  345  13  14  15  34  35  45  1  3  4  5\n\u5bb9\u91cf\uff1aX11   9    7    8    9    5   6   4   7   5   6   2  3  4  2\n\u4ef7\u503c\uff1aX12   9    10   7    10   7   4   5   7   8   5   2  5  2  3\n\u4f53\u529b\uff1aX36   36   28   24   20   28  24  16  20  12  8   16 12 8  0\n---\n\u4f53\u529b\u8ba1\u7b97\uff1a1: 16; 3: 12; 4: 8; 5: 0\n------------------------------------------------------------------\n\u6cd52\uff1a1 \u2192 2 \u2192 5\n\u9009\u62e9\uff1a125  12  15  25  1  2  5\n\u4ef7\u503c\uff1a5    3   4   3   2  1  2\n\u4f53\u529b\uff1a11   11  8   3   8  3  0\n---\n\u4f53\u529b\u8ba1\u7b97\uff1a1: 8; 2: 3; 5: 0\n------------------------------------------------------------------\n\u6cd53\uff1a1 \u2192 2 \u2192 4 \u2192 5\n\u9009\u62e9\uff1a1245  124  125  145  245  12  14  15  24  25  45  1  2  4  5  \n\u4ef7\u503c\uff1a9     7    5    8    7    3   6   4   5   3   6   2  1  4  2\n\u4f53\u529b\uff1a31    31   23   24   15   23  24  16  15  7   8   16 7  8  0\n---\n\u4f53\u529b\u8ba1\u7b97\uff1a1: 16; 2: 7; 4: 8; 5: 0\n------------------------------------------------------------------\n\u7b54\u6848\u8def\u7ebf\uff1a1(\u4e0d\u9009) \u2192 3(\u9009) \u2192 4(\u9009) \u2192 5(\u9009)\n\u6700\u5927\u4ef7\u503c\uff1a10\n\u6700\u5c0f\u4f53\u529b\uff1a20\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98I-%E6%97%85%E8%A1%8C/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>DAG \u56fe\uff0c\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\uff1b\u4f7f\u7528 01 \u80cc\u5305\u5b8c\u6210\u52a8\u6001\u89c4\u5212\u72b6\u6001\u8f6c\u79fb\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\ntypedef pair&lt;signed, int&gt; pii;\nconst int MAXn = 8e3 + 9;\nconst int MAXw = 1e3 + 9;\nint w[MAXn], v[MAXn], rd[MAXn];\nvector&lt;pii&gt; g[MAXn];\nqueue&lt;signed&gt; que;\nvector&lt;signed&gt; ord;\nint dp[MAXn][MAXw], ans[MAXn][MAXw];\nbool can[MAXn];\n\nsigned main() {\n    for(int i = 0; i &lt;= MAXn - 3; i ++)\n        for(int j = 0; j &lt;= MAXw - 3; j ++)\n            ans[i][j] = LLONG_MAX - 1;\n    int n, m, W;\n    scanf(\"%lld%lld%lld\", &amp;n, &amp;m, &amp;W);\n    for(int i = 1; i &lt;= n; i ++)\n        scanf(\"%lld%lld\", &amp;w[i], &amp;v[i]);\n    for(int i = 1, x, y, z; i &lt;= m; i ++) {\n        scanf(\"%lld%lld%lld\", &amp;x, &amp;y, &amp;z);\n        g[x].push_back({y, z});\n        rd[y] ++;\n    }\n    // \u62d3\u6251\u6392\u5e8f\n    for(int i = 1; i &lt;= n; i ++)\n        if(rd[i] == 0)\n            que.push(i), ord.push_back(i);\n    while(!que.empty()) {\n        signed u = que.front();\n        que.pop();\n        for(pii x : g[u]) {\n            rd[x.first] --;\n            if(rd[x.first] == 0)\n                que.push(x.first), ord.push_back(x.first);\n        }\n    }\n    // 01 \u80cc\u5305\n    can[1] = true;\n    for(int j = 0; j &lt;= W; j ++) {\n        ans[1][j] = 0;\n        if(j &gt;= w[1]) dp[1][j] = v[1];\n    }\n    int i = 0;\n    while(i &lt; n &amp;&amp; ord[i] != 1) i ++;\n    for(; i &lt; ord.size(); i ++) {\n        signed now = ord[i];\n        if(!can[now]) continue;\n        for(pii x : g[now]) {\n            signed nxt = x.first;\n            int dis = x.second;\n            can[nxt] = true;\n            for(int j = W; j &gt;= 0; j --) {\n                if(j &gt;= w[nxt]) {\n                    if(dp[now][j - w[nxt]] + v[nxt] &gt; dp[nxt][j]) {\n                        dp[nxt][j] = dp[now][j - w[nxt]] + v[nxt];\n                        ans[nxt][j] = ans[now][j - w[nxt]] + dis * (j - w[nxt]);\n                    }\n                    else if(dp[now][j - w[nxt]] + v[nxt] == dp[nxt][j])\n                        ans[nxt][j] = min(ans[nxt][j], ans[now][j - w[nxt]] + dis * (j - w[nxt]));\n                }\n                if(dp[now][j] &gt; dp[nxt][j]) {\n                    dp[nxt][j] = dp[now][j];\n                    ans[nxt][j] = ans[now][j] + dis * j;\n                }\n                else if(dp[now][j] == dp[nxt][j])\n                    ans[nxt][j] = min(ans[nxt][j], ans[now][j] + dis * j);\n            }\n        }\n    }\n    int fdp = 0, fans = LLONG_MAX;\n    for(int j = 0; j &lt;= W; j ++)\n        if(dp[n][j] &gt; fdp || (dp[n][j] == fdp &amp;&amp; ans[n][j] &lt; fans))\n            fdp = dp[n][j], fans = ans[n][j];\n    printf(\"%lld %lld\", fdp, fans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98I-%E6%97%85%E8%A1%8C/#\u5173\u4e8e\u65e0\u73af\u56fe","title":"\u5173\u4e8e\u65e0\u73af\u56fe","text":"\u751f\u6210\u65e0\u73af\u56fe <p>\u4f7f\u7528\u4ee5\u4e0b python \u4ee3\u7801\u53ef\u4ee5\u751f\u6210\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\u3002\u4e3a\u4fdd\u8bc1\u9898\u76ee\u6709\u89e3\uff0c\u751f\u6210\u7684\u56fe\u662f\u8054\u901a\u7684\u3002</p> <pre><code>import networkx as nx\nimport random\n\ndef generate_dag(n, m):\n    G = nx.DiGraph()\n    nodes = list(range(1, n + 1))\n    G.add_nodes_from(nodes)\n\n    # Step 1: Create a basic connected structure (linear chain)\n    for i in range(1, n):\n        G.add_edge(i, i + 1, weight=random.randint(1, 10))\n\n    # Step 2: Add remaining edges while keeping the graph acyclic\n    while len(G.edges) &lt; m:\n        u, v = random.sample(nodes, 2)\n        if not G.has_edge(u, v):\n            G.add_edge(u, v, weight=random.randint(1, 10))\n            if not nx.is_directed_acyclic_graph(G):\n                G.remove_edge(u, v)\n\n    return G\n\nn = 995\nm = 1080\nw = 872\nG = generate_dag(n, m)\n\nedge_list = list(G.edges(data=False))\nrandom.shuffle(edge_list)\n\nwith open('output.txt', 'w') as f:\n    f.write(f\"{n} {m} {w}\\n\")\n\n    for i in range(1, n + 1):\n        f.write(f\"{random.randint(1, 30)} {random.randint(1, 30)}\\n\")\n\n    for u, v in edge_list:\n        f.write(f\"{u} {v} {random.randint(1, 30)}\\n\")\n</code></pre> \u68c0\u9a8c\u65e0\u73af\u56fe <p>\u4f7f\u7528 dfs \u6216 \u62d3\u6251\u7b97\u6cd5\u7686\u53ef\u68c0\u9a8c\u4e00\u5f20\u56fe\u662f\u5426\u662f\u65e0\u73af\u7684\u3002</p> \u4f7f\u7528 dfs \u68c0\u9a8c\u65e0\u73af\u6027<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nbool dfs(int node, vector&lt;int&gt;&amp; visited, vector&lt;vector&lt;int&gt;&gt;&amp; adj) {\n    visited[node] = 1;\n    for (int neighbor : adj[node]) {\n        if (visited[neighbor] == 1) {\n            return true;\n        } else if (visited[neighbor] == 0 &amp;&amp; dfs(neighbor, visited, adj)) {\n            return true;\n        }\n    }\n    visited[node] = 2;\n    return false;\n}\n\nbool hasCycleDFS(int n, vector&lt;pair&lt;int, int&gt;&gt;&amp; edges) {\n    vector&lt;vector&lt;int&gt;&gt; adj(n + 1);\n    for (auto&amp; edge : edges) {\n        adj[edge.first].push_back(edge.second);\n    }\n\n    vector&lt;int&gt; visited(n + 1, 0);\n\n    for (int i = 1; i &lt;= n; ++i) {\n        if (visited[i] == 0 &amp;&amp; dfs(i, visited, adj)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    freopen(\"output.txt\", \"r\", stdin);\n\n    int n, m, tmp;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; tmp;\n\n    for(int i = 1; i &lt;= n; i ++)\n        cin &gt;&gt; tmp, cin &gt;&gt; tmp;\n\n\n    vector&lt;pair&lt;int, int&gt;&gt; edges(m);\n    for (int i = 0; i &lt; m; ++i) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; tmp;\n        edges[i] = {a, b};\n    }\n\n    if (hasCycleDFS(n, edges)) {\n        cout &lt;&lt; \"Graph has a cycle (detected by DFS).\" &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; \"Graph does not have a cycle (detected by DFS).\" &lt;&lt; endl;\n    }\n\n    // if (hasCycleTopo(n, edges)) {\n    //     cout &lt;&lt; \"Graph has a cycle (detected by Topological Sort).\" &lt;&lt; endl;\n    // } else {\n    //     cout &lt;&lt; \"Graph does not have a cycle (detected by Topological Sort).\" &lt;&lt; endl;\n    // }\n\n    return 0;\n}\n</code></pre> \u4f7f\u7528 \u62d3\u6251\u6392\u5e8f \u68c0\u9a8c\u65e0\u73af\u6027<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nbool hasCycleTopo(int n, vector&lt;pair&lt;int, int&gt;&gt;&amp; edges) {\n    vector&lt;vector&lt;int&gt;&gt; adj(n + 1);\n    vector&lt;int&gt; inDegree(n + 1, 0);\n\n    for (auto&amp; edge : edges) {\n        adj[edge.first].push_back(edge.second);\n        inDegree[edge.second]++;\n    }\n\n    queue&lt;int&gt; q;\n    for (int i = 1; i &lt;= n; ++i) {\n        if (inDegree[i] == 0) {\n            q.push(i);\n        }\n    }\n\n    int count = 0;\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        count++;\n\n        for (int neighbor : adj[node]) {\n            if (--inDegree[neighbor] == 0) {\n                q.push(neighbor);\n            }\n        }\n    }\n\n    return count != n;\n}\n\nint main() {\n    freopen(\"output.txt\", \"r\", stdin);\n\n    int n, m, tmp;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; tmp;\n\n    for(int i = 1; i &lt;= n; i ++)\n        cin &gt;&gt; tmp, cin &gt;&gt; tmp;\n\n\n    vector&lt;pair&lt;int, int&gt;&gt; edges(m);\n    for (int i = 0; i &lt; m; ++i) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; tmp;\n        edges[i] = {a, b};\n    }\n\n    // if (hasCycleDFS(n, edges)) {\n    //     cout &lt;&lt; \"Graph has a cycle (detected by DFS).\" &lt;&lt; endl;\n    // } else {\n    //     cout &lt;&lt; \"Graph does not have a cycle (detected by DFS).\" &lt;&lt; endl;\n    // }\n\n    if (hasCycleTopo(n, edges)) {\n        cout &lt;&lt; \"Graph has a cycle (detected by Topological Sort).\" &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; \"Graph does not have a cycle (detected by Topological Sort).\" &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98J-%E9%A2%9C%E8%89%B2%E7%BB%9F%E8%AE%A1/","title":"\u95ee\u9898 J: \u989c\u8272\u7edf\u8ba1","text":"<p>\u4f20\u9001\u95e8\uff1aZWGOJ | \u6d1b\u8c37 P1558 \u8272\u677f\u6e38\u620f | POJ 2777 Count Color</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98J-%E9%A2%9C%E8%89%B2%E7%BB%9F%E8%AE%A1/#\u9898\u76ee\u63cf\u8ff0","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98J-%E9%A2%9C%E8%89%B2%E7%BB%9F%E8%AE%A1/#\u539f\u9898\u9762","title":"\u539f\u9898\u9762","text":"<p>\u963f\u5b9d\u4e0a\u5b66\u4e86\uff0c\u4eca\u5929\u8001\u5e08\u62ff\u6765\u4e86\u4e00\u5757\u5f88\u957f\u7684\u6d82\u8272\u677f\u3002</p> <p>\u8272\u677f\u957f\u5ea6\u4e3a \\(L\\)\uff0c\\(L\\) \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5747\u5300\u5730\u5c06\u5b83\u5212\u5206\u6210 \\(L\\) \u5757 \\(1\\) \u5398\u7c73\u957f\u7684\u5c0f\u65b9\u683c\u3002\u5e76\u4ece\u5de6\u5230\u53f3\u6807\u8bb0\u4e3a \\(1, 2, \\dots L\\)\u3002</p> <p>\u73b0\u5728\u8272\u677f\u4e0a\u53ea\u6709\u4e00\u4e2a\u989c\u8272\uff0c\u8001\u5e08\u544a\u8bc9\u963f\u5b9d\u5728\u8272\u677f\u4e0a\u53ea\u80fd\u505a\u4e24\u4ef6\u4e8b\uff1a</p> <ol> <li><code>C A B C</code> \u6307\u5728 \\(A\\) \u5230 \\(B\\) \u53f7\u65b9\u683c\u4e2d\u6d82\u4e0a\u989c\u8272 \\(C\\)\u3002</li> <li><code>P A B</code> \u6307\u8001\u5e08\u7684\u63d0\u95ee\uff1a\\(A\\) \u5230 \\(B\\) \u53f7\u65b9\u683c\u4e2d\u6709\u51e0\u79cd\u989c\u8272\u3002</li> </ol> <p>\u5b66\u6821\u7684\u989c\u6599\u76d2\u4e2d\u4e00\u5171\u6709 \\(T\\) \u79cd\u989c\u6599\u3002\u4e3a\u7b80\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u628a\u4ed6\u4eec\u6807\u8bb0\u4e3a \\(1, 2, \\dots T\\)\u3002\u5f00\u59cb\u65f6\u8272\u677f\u4e0a\u539f\u6709\u7684\u989c\u8272\u5c31\u4e3a \\(1\\) \u53f7\u8272\u3002\u9762\u5bf9\u5982\u6b64\u590d\u6742\u7684\u95ee\u9898\uff0c\u963f\u5b9d\u5411\u4f60\u6c42\u52a9\uff0c\u4f60\u80fd\u5e2e\u52a9\u4ed6\u5417\uff1f</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98J-%E9%A2%9C%E8%89%B2%E7%BB%9F%E8%AE%A1/#\u8f93\u5165\u8981\u6c42","title":"\u8f93\u5165\u8981\u6c42","text":"<p>\u7b2c\u4e00\u884c\u67093\u4e2a\u6574\u6570 \\(L \\:(1 \\le L \\le 10^5)\\)\uff0c\\(T \\:(1 \\le T \\le 30)\\) \u548c \\(O \\:(1 \\le O \\le 10^5)\\)\u3002 \u5728\u8fd9\u91cc \\(O\\) \u8868\u793a\u4e8b\u4ef6\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(O\\) \u884c\uff0c\u6bcf\u884c\u4ee5 <code>C A B C</code> \u6216 <code>P A B</code> \u5f97\u5f62\u5f0f\u8868\u793a\u6240\u8981\u505a\u7684\u4e8b\u60c5\uff08\u8fd9\u91cc \\(A, B, C\\) \u4e3a\u6574\u6570\uff0c\u53ef\u80fd \\(A&gt; B\\)\uff0c\u8fd9\u6837\u7684\u8bdd\u9700\u8981\u4f60\u4ea4\u6362 \\(A\\) \u548c \\(B\\)\uff09\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98J-%E9%A2%9C%E8%89%B2%E7%BB%9F%E8%AE%A1/#\u8f93\u51fa\u8981\u6c42","title":"\u8f93\u51fa\u8981\u6c42","text":"<p>\u5bf9\u4e8e\u8001\u5e08\u7684\u63d0\u95ee\uff0c\u505a\u51fa\u76f8\u5e94\u7684\u56de\u7b54\u3002\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\u3002</p>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98J-%E9%A2%9C%E8%89%B2%E7%BB%9F%E8%AE%A1/#\u6837\u4f8b","title":"\u6837\u4f8b","text":"<pre><code>2 2 4\nC 1 1 2\nP 1 2\nC 2 2 2\nP 1 2\n</code></pre> <pre><code>2\n1\n</code></pre>"},{"location":"%E9%A2%98%E5%8D%95%E8%AE%B0%E5%BD%95/%E5%BC%A0%E8%80%81%E5%B8%88OJ/2024%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/%E9%A2%98%E5%8D%95E/%E9%97%AE%E9%A2%98J-%E9%A2%9C%E8%89%B2%E7%BB%9F%E8%AE%A1/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u5982\u679c\u6570\u636e\u66f4\u5927\uff0c\u989c\u8272\u6570\u91cf\u66f4\u591a\uff0c\u9700\u8981\u4f7f\u7528 \u83ab\u961f / \u5206\u5757 / CDQ \u5206\u6cbb / \u6811\u5957\u6811 \u7b49\u505a\u6cd5\uff0c\u5982 \u6d1b\u8c37 P1903 [\u56fd\u5bb6\u96c6\u8bad\u961f] \u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3001\u6d1b\u8c37 P4690 [Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b\u3001\u6d1b\u8c37\u9898\u5355 - Ynoi \u5927\u5206\u5757\u7cfb\u5217\u3002</p> <p>\u4ee5\u4e0b\u4e3a\u7ebf\u6bb5\u6811\u89e3\u6cd5\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define calm ((a + b) &gt;&gt; 1)\nusing namespace std;\nconst int MAXn = 1e5 + 5;    // \u70b9\u6570\nconst int MAXt = 30 + 9;    // \u989c\u8272\u6570\nconst int MAXq = 1e5 + 5;    // \u8be2\u95ee\u6570\ntypedef bitset&lt;MAXt&gt; bs;\nbs t[MAXn * 4 + 9], tag[MAXn * 4 + 9];\n\nvoid fini(int a, int b, int p) {\n    if(a == b) return t[p][1] = 1, void();\n    int m = calm;\n    fini(a, m, p &lt;&lt; 1);\n    fini(m + 1, b, p &lt;&lt; 1 | 1);\n    t[p] = t[p &lt;&lt; 1] | t[p &lt;&lt; 1 | 1];\n}\n\nvoid pushdown(int p) {\n    tag[p &lt;&lt; 1] = tag[p];\n    tag[p &lt;&lt; 1 | 1] = tag[p];\n    t[p &lt;&lt; 1] = t[p];\n    t[p &lt;&lt; 1 | 1] = t[p];\n    tag[p] = 0;\n}\n\nvoid fset(int x, int y, int a, int b, int p, int v) {\n    if(x &lt;= a &amp;&amp; b &lt;= y) {\n        t[p] = 0; t[p][v] = 1;\n        tag[p] = 0; tag[p][v] = 1;\n        return;\n    }\n    if(tag[p].count()) pushdown(p);\n    int m = calm;\n    if(x &lt;= m) fset(x, y, a, m, p &lt;&lt; 1, v);\n    if(m + 1 &lt;= y) fset(x, y, m + 1, b, p &lt;&lt; 1 | 1, v);\n    t[p] = t[p &lt;&lt; 1] | t[p &lt;&lt; 1 | 1];\n}\n\nbs fquery(int x, int y, int a, int b, int p) {\n    if(x &lt;= a &amp;&amp; b &lt;= y) return t[p];\n    if(tag[p].count()) pushdown(p);\n    int m = calm;\n    bs res = 0;\n    if(x &lt;= m) res |= fquery(x, y, a, m, p &lt;&lt; 1);\n    if(m + 1 &lt;= y) res |= fquery(x, y, m + 1, b, p &lt;&lt; 1 | 1);\n    return res;\n}\n\nint main() {\n    int n, t, q;\n    scanf(\"%d%d%d\", &amp;n, &amp;t, &amp;q);\n    fini(1, n, 1);\n    char c; string s;\n    getline(cin, s);\n    for(int _ = 1; _ &lt;= q; _ ++) {\n        c = getchar();\n        if(c == 'C') {\n            int ia, ib, ic;\n            scanf(\"%d%d%d\", &amp;ia, &amp;ib, &amp;ic);\n            getline(cin, s);\n            if(ia &gt; ib) swap(ia, ib);\n            fset(ia, ib, 1, n, 1, ic);\n        }\n        else if(c == 'P') {\n            int ia, ib;\n            scanf(\"%d%d\", &amp;ia, &amp;ib);\n            getline(cin, s);\n            if(ia &gt; ib) swap(ia, ib);\n            bs res = fquery(ia, ib, 1, n, 1);\n            printf(\"%d\\n\", res.count());\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/LOJ10008/","title":"LOJ 10008","text":"<p>LOJ #10008. \u300c\u4e00\u672c\u901a 1.1 \u7ec3\u4e60 4\u300d\u5bb6\u5ead\u4f5c\u4e1a \u4f20\u9001\u95e8\uff1aLOJ 10008 | SSOIER 1430</p>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/LOJ10008/#\u9898\u76ee\u5927\u610f","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u5df2\u77e5\uff1a\u6709 \\(n\\) \u9879\u4f5c\u4e1a\uff0c\u6bcf\u4e2a\u4f5c\u4e1a\u5982\u679c\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u4ea4\u4e0a\u6765\u7684\u8bdd\u624d\u6709\u5b66\u5206\u3002\u6bcf\u4e2a\u4f5c\u4e1a\u7684\u622a\u6b62\u65e5\u671f\u548c\u5b66\u5206\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u3002\u4f8b\u5982\u5982\u679c\u4e00\u4e2a\u4f5c\u4e1a\u5b66\u5206\u4e3a \\(10\\)\uff0c\u8981\u6c42\u5728 \\(6\\) \u5929\u5185\u4ea4\uff0c\u90a3\u4e48\u8981\u60f3\u62ff\u5230\u8fd9 \\(10\\) \u5b66\u5206\uff0c\u5c31\u5fc5\u987b\u5728\u7b2c \\(6\\) \u5929\u7ed3\u675f\u524d\u4ea4\u3002 \u6c42\u89e3\uff1a\u627e\u5230\u4e00\u4e2a\u5b8c\u6210\u4f5c\u4e1a\u7684\u987a\u5e8f\u83b7\u5f97\u6700\u5927\u5b66\u5206\u3002</p>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/LOJ10008/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u672c\u9898\u662f\u8d2a\u5fc3\u7b97\u6cd5\u7684\u5178\u578b\u4f8b\u9898\uff0c\u5728\u6b64\u4ecb\u7ecd \\(3\\) \u79cd\u65b9\u6cd5\u89e3\u51b3\u6b64\u7c7b\u95ee\u9898\u3002</p>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/LOJ10008/#\u6cd51\u53cd\u6094\u8d2a\u5fc3","title":"\u6cd51\uff1a\u53cd\u6094\u8d2a\u5fc3","text":"<p>100 AC \u63d0\u4ea4\u8bb0\u5f55 | \u6309\u7167\u622a\u6b62\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u653e\u4e0d\u4e0b\u5c1d\u8bd5\u66ff\u6362\u653e\u597d\u7684\u5143\u7d20\u4e2d\u5956\u52b1\u6700\u5c0f\u7684</p> \u53cd\u6094\u8d2a\u5fc3<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int MAXn = 1e6 + 9;\nconst int MAXdl = 7e5 + 9;\npriority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt; &gt; pq;    // first: v; second: time\nvector&lt;pii&gt; d;    // first: deadline; second: v\n\nbool cmp(const pii &amp; x, const pii &amp; y) {\n    if(x.first == y.first) return x.second &gt; y.second;\n    return x.first &lt; y.first;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia, ib; i &lt;= n; i ++) {\n        scanf(\"%d%d\", &amp;ia, &amp;ib);\n        d.push_back({ia, ib});\n    }\n    sort(d.begin(), d.end(), cmp);\n    lli ans = 0;\n    int t = 1;\n    for(pii x : d) {\n        if(x.first &lt; t) {\n            if(!pq.empty() &amp;&amp; pq.top().first &lt; x.second) {\n                int tt = pq.top().second;\n                ans -= pq.top().first;\n                pq.pop();\n                pq.push({x.second, tt});\n                ans += x.second;\n            }\n            else continue;\n        }\n        else {\n            pq.push({x.second, t});\n            ans += x.second;\n            t ++;\n        }\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/LOJ10008/#\u6cd52\u679a\u4e3e\u6bcf\u4e2a\u5143\u7d20","title":"\u6cd52\uff1a\u679a\u4e3e\u6bcf\u4e2a\u5143\u7d20","text":"<p>80 TLE \u63d0\u4ea4\u8bb0\u5f55 | \u6309\u7167\u5956\u52b1\u5927\u5c0f\u6392\u5e8f\uff0c\u4f18\u5148\u5b89\u6392\u5956\u52b1\u6570\u6700\u5927\u7684\uff0c\u4e14\u5c3d\u91cf\u9760\u540e\u5730\u5b89\u6392</p> \u679a\u4e3e\u6bcf\u4e2a\u5143\u7d20<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int MAXn = 1e6 + 9;\nbool ved[MAXn];\nvector&lt;pii&gt; d;    // first: deadline; second: v\n\nbool cmp(const pii &amp; x, const pii &amp; y) {\n    if(x.second == y.second) return x.first &gt; y.first;\n    return x.second &gt; y.second;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia, ib; i &lt;= n; i ++) {\n        scanf(\"%d%d\", &amp;ia, &amp;ib);\n        d.push_back({ia, ib});\n    }\n    sort(d.begin(), d.end(), cmp);\n    lli ans = 0;\n    for(pii x : d) {\n        for(int i = x.first; i &gt;= 1; i --)\n            if(!ved[i]) {\n                ved[i] = true;\n                ans += x.second;\n                break;\n            }\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre> <p>\u4f7f\u7528\u679a\u4e3e\u6bcf\u4e2a\u5143\u7d20\u7684\u65b9\u6cd5\u5e76\u4e0d\u80fd\u901a\u8fc7\u6b64\u9898\uff0c\u4f46\u5bf9\u4e8e\u6b64\u7c7b\u8d2a\u5fc3\u95ee\u9898\u662f\u4e00\u4e2a\u53ef\u4ee5\u8003\u8651\u7684\u9009\u62e9\uff0c\u5982 LOJ 10004. \u300c\u4e00\u672c\u901a 1.1 \u4f8b 5\u300d\u667a\u529b\u5927\u51b2\u6d6a \u53ef\u4ee5 AC\u3002</p> LOJ 10004. \u300c\u4e00\u672c\u901a 1.1 \u4f8b 5\u300d\u667a\u529b\u5927\u51b2\u6d6a <p>\u4f20\u9001\u95e8\uff1aLOJ 10004 | \u6d1b\u8c37 P1230</p> \u679a\u4e3e\u6bcf\u4e2a\u6570<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int MAXn = 500 + 9;\nbool ved[MAXn];\nvector&lt;pii&gt; d;    // first: deadline; second: v\n\nbool cmp(const pii &amp; x, const pii &amp; y) {\n    if(x.second == y.second) return x.first &gt; y.first;\n    return x.second &gt; y.second;\n}\n\nint main() {\n    int m, n;\n    scanf(\"%d%d\", &amp;m, &amp;n);\n    for(int i = 0, ia; i &lt; n; i ++) {\n        scanf(\"%d\", &amp;ia);\n        d.push_back({ia, 0});\n    }\n    for(int i = 0; i &lt; n; i ++) {\n        scanf(\"%d\", &amp;d[i].second);\n    }\n    sort(d.begin(), d.end(), cmp);\n    for(int i = 0; i &lt; n; i ++) {\n        int dl = d[i].first;\n        bool can = false;\n        for(int t = dl; t &gt;= 1; t --)\n            if(!ved[t]) {\n                ved[t] = true;\n                can = true;\n                break;\n            }\n        if(!can) {\n            m -= d[i].second;\n        }\n    }\n    printf(\"%d\", m);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/LOJ10008/#\u6cd53\u679a\u4e3e\u65f6\u95f4","title":"\u6cd53\uff1a\u679a\u4e3e\u65f6\u95f4","text":"<p>100 AC \u63d0\u4ea4\u8bb0\u5f55 | \u679a\u4e3e\u6240\u6709\u65f6\u95f4\uff0c\u5e76\u653e\u5165\u80fd\u653e\u5165\u7684\u5143\u7d20\u4e2d\u5956\u52b1\u6570\u6700\u5927\u7684\u3002</p> \u679a\u4e3e\u65f6\u95f4<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 1e6 + 9;\nvector&lt;int&gt; d[MAXn];    // d[x]: \u6b7b\u7ebf\u4e3a x \u7684\u6240\u6709\u5956\u52b1\npriority_queue&lt;int&gt; pq;\n\nint main() {\n    int n, maxdl = 1;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia, ib; i &lt;= n; i ++) {\n        scanf(\"%d%d\", &amp;ia, &amp;ib);\n        d[ia].push_back(ib);\n        maxdl = max(maxdl, ia);\n    }\n    lli ans = 0;\n    for(int i = maxdl; i &gt;= 1; i --) {\n        for(int v : d[i]) pq.push(v);\n        if(!pq.empty()) ans += pq.top(), pq.pop();\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre> <p>\u8003\u8651\u5230\u672c\u9898\u622a\u6b62\u65f6\u95f4\u7684\u6570\u636e\u8303\u56f4\u4e3a \\(1\\le t \\le 1 \\times 10^5\\)\uff0c\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801\u4e0d\u4f1a\u51fa\u73b0 MLE \u7684\u60c5\u51b5\u3002\u5982\u679c\u6570\u636e\u8303\u56f4\u8f83\u5927\uff0c\u53ef\u4ee5\u4f7f\u7528\u79bb\u6563\u5316\u7b97\u6cd5\uff0c\u5c06\u622a\u6b62\u65f6\u95f4\u6570\u7ec4\u79bb\u6563\u5316\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u8303\u56f4\uff0c\u5c31\u53ef\u4ee5\u5b58\u653e\u5230\u5bb9\u5668\u4e2d\u4e86\u3002</p> <p>\u7c7b\u4f3c\u7684\u9898\u76ee P2949 [USACO09OPEN] Work Scheduling G \u4f7f\u7528\u79bb\u6563\u5316\u7b97\u6cd5\u540e 92 MLE \u4ee3\u7801\uff1a</p> \u679a\u4e3e\u65f6\u95f4+\u79bb\u6563\u5316<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 1e5 + 9;\nvector&lt;int&gt; dl, v, lsh;\nvector&lt;int&gt; d[MAXn];\npriority_queue&lt;int&gt; pq;\nmap&lt;int, int&gt; sl, ls;\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia, ib; i &lt;= n; i ++)\n        scanf(\"%d%d\", &amp;ia, &amp;ib),\n        dl.push_back(ia),\n        v.push_back(ib);\n    lsh.assign(dl.begin(), dl.end());\n    sort(lsh.begin(), lsh.end());\n    int mxdl = lsh.back();\n    auto it = unique(lsh.begin(), lsh.end());\n    for(int i = 0; i &lt; n; i ++)\n        ls[dl[i]] = distance(lsh.begin(), lower_bound(lsh.begin(), it, dl[i])) + 1;\n    for(int i = 0; i &lt; n; i ++)\n        d[ls[dl[i]]].push_back(v[i]);\n    lli ans = 0;\n    for(int i = mxdl; i &gt;= 1; i --) {\n        if(ls[i]) for(int v : d[ls[i]]) pq.push(v);\n        if(!pq.empty()) ans += pq.top(), pq.pop();\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre> \u8be5\u9898\u53ef\u4f7f\u7528\u53cd\u6094\u8d2a\u5fc3\u901a\u8fc7 <p>100 AC \u63d0\u4ea4\u8bb0\u5f55</p> \u53cd\u6094\u8d2a\u5fc3<pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\npriority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt; &gt; pque;    // first: value; second: position\nvector&lt;pii&gt; d;    // first: endtime; second: value\n\nbool cmpd(const pii &amp; x, const pii &amp; y) {\n    if(x.first == y.first) return x.second &gt; y.second;\n    return x.first &lt; y.first;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1, ia, ib; i &lt;= n; i ++) {\n        scanf(\"%d%d\", &amp;ia, &amp;ib);\n        d.push_back({ia, ib});\n    }\n    sort(d.begin(), d.end(), cmpd);\n    lli ans = 0;\n    int p = 1;\n    for(pii x : d) {\n        if(x.first &lt; p) {\n            if(!pque.empty() &amp;&amp; x.second &gt; pque.top().first) {\n                int pp = pque.top().second;\n                ans -= pque.top().first;\n                pque.pop();\n                pque.push({x.second, pp});\n                ans += x.second;\n            }\n            else continue;\n        }\n        else {\n            pque.push({x.second, p});\n            ans += x.second;\n            p ++;\n        }\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/UVA10382/","title":"UVA 10382","text":"<p>UVA 10382 Watering Grass \u4f20\u9001\u95e8\uff1a\u6d1b\u8c37 UVA10382 | UVA 10382 | LibreOJ #10002</p>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/UVA10382/#\u9898\u76ee\u5927\u610f","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u5728\u4e00\u5757\u957f \\(L\\) \u7c73\uff0c\u5bbd \\(W\\) \u7c73\u7684\u77e9\u5f62\u8349\u576a\u4e2d\u5171\u6709 \\(n\\) \u4e2a\u55b7\u6c34\u88c5\u7f6e\uff0c\u6bcf\u4e2a\u55b7\u6c34\u88c5\u7f6e\u90fd\u5728\u8349\u576a\u7684\u4e2d\u5fc3\u7ebf\u4e0a\uff08\u5373\u79bb\u4e24\u8fb9\u5404 \\(\\frac{W}{2}\\) \u7c73\uff09\u3002 \u5df2\u77e5\uff1a\u6bcf\u4e2a\u55b7\u6c34\u88c5\u7f6e\u7684\u4f4d\u7f6e\uff08\u5373\u79bb\u8349\u576a\u6700\u5de6\u7aef\u7684\u8ddd\u79bb\uff09\uff0c\u4ee5\u53ca\u5b83\u80fd\u704c\u6e89\u5230\u7684\u5706\u5f62\u8303\u56f4\u7684\u534a\u5f84\u3002 \u6c42\u95ee\uff1a\u8981\u786e\u4fdd\u6574\u5757\u8349\u576a\u90fd\u88ab\u704c\u6e89\u5230\uff0c\u5219\u6700\u5c11\u9700\u8981\u6253\u5f00\u591a\u5c11\u4e2a\u55b7\u6c34\u88c5\u7f6e\uff1f</p>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/UVA10382/#\u95ee\u9898\u5206\u6790","title":"\u95ee\u9898\u5206\u6790","text":"<p>\u6b64\u9898\u4e3a\u8d2a\u5fc3\u7b97\u6cd5\u4e2d\u533a\u95f4\u8986\u76d6\u95ee\u9898\u7684\u5178\u578b\u4f8b\u9898\u3002</p> <p>\u6b64\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\u7ed9\u5b9a\u591a\u4e2a\u533a\u95f4 \\([a_i, b_i]\\)\uff0c\u9009\u62e9\u6700\u5c11\u7684\u533a\u95f4\uff0c\u4f7f\u5b83\u4eec\u53ef\u4ee5\u8986\u76d6\u6574\u4e2a\u533a\u95f4 \\([1, l]\\)\u3002</p> <p>\u5bf9\u4e8e\u4e0a\u8ff0\u95ee\u9898\uff0c\u53ef\u4ee5\u8003\u8651\u8d2a\u5fc3\u3002\u5c06\u6240\u6709\u533a\u95f4\u6309\u7167\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\u3002\u5047\u8bbe \\([0, p)\\) \u5df2\u7ecf\u88ab\u8986\u76d6\uff0c\u5bf9\u4e8e\u672a\u88ab\u8986\u76d6\u5230\u7684\u70b9 \\(p(0\\le p &lt; l)\\)\uff0c\u679a\u4e3e\u6240\u6709\u80fd\u8986\u76d6\u5230\u70b9 \\(p\\) \u7684\u533a\u95f4\uff0c\u9009\u62e9\u5176\u4e2d\u53f3\u7aef\u70b9\u6700\u5927\u7684\u533a\u95f4 \\([a, b]\\)\uff0c\u5176\u4e2d \\(a \\le p\\)\u3002\u5219\u8986\u76d6\u7684\u8303\u56f4\u53d8\u4e3a\u4e86 \\([0, b]\\)\u3002\u5c06 \\(p\\) \u8bbe\u4e3a \\(b\\) \u4e4b\u540e\u7684\u672a\u88ab\u8986\u76d6\u7684\u70b9\uff08\u53ef\u8ba4\u4e3a\u662f \\(b\\) \u672c\u8eab\uff09\uff0c\u7ee7\u7eed\u4e0b\u6b21\u5faa\u73af\u3002</p>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/UVA10382/#\u6b63\u786e\u6027\u8bc1\u660e","title":"\u6b63\u786e\u6027\u8bc1\u660e","text":"<p>\u4f7f\u7528\u53cd\u8bc1\u6cd5\u53ef\u4ee5\u8bc1\u660e\u6b64\u8d2a\u5fc3\u89e3\u6cd5\u662f\u6700\u4f18\u89e3\u3002</p> <p>\u7b80\u5355\u6765\u8bf4\uff0c\u73b0\u5728\u533a\u95f4 \\([0, p)\\) \u5747\u88ab\u8986\u76d6\uff0c\u90a3\u4e48\u5bf9\u4e8e\u672a\u88ab\u8986\u76d6\u7684\u70b9 \\(p\\)\uff0c\u8d2a\u5fc3\u89e3\u6cd5\u662f\u9009\u62e9\u80fd\u8986\u76d6\u70b9 \\(p\\) \u7684\u6240\u6709\u533a\u95f4\u4e2d\uff0c\u53f3\u7aef\u70b9\u6700\u5927\u7684\u533a\u95f4 \\([a_x, b_x]\\)\u3002\u5982\u679c\u9009\u62e9\u7684\u533a\u95f4 \\([a_y, b_y]\\) \u53f3\u7aef\u70b9\u4e0d\u662f\u6700\u5927\u7684\uff0c\u5373 \\(b_y &lt; b_x\\)\uff0c\u90a3\u4e48\u9009\u62e9\u533a\u95f4 \\([a_x, b_x]\\) \u80fd\u591f\u591a\u9009\u62e9\u5230\u533a\u95f4 \\((b_y, b_x]\\) \uff0c\u6bd4\u8be5\u65b9\u6848\u66f4\u4f18\uff1b\u5982\u679c\u9009\u62e9\u4e0d\u80fd\u8986\u76d6\u70b9 \\(p\\) \u7684\u533a\u95f4\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u518d\u589e\u52a0\u4e00\u4e2a\u533a\u95f4\u6765\u8986\u76d6\u70b9 \\(p\\)\u3002</p>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/UVA10382/#\u672c\u9898\u5177\u4f53\u89e3\u6cd5","title":"\u672c\u9898\u5177\u4f53\u89e3\u6cd5","text":""},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/UVA10382/#\u8ba1\u7b97\u6bcf\u4e2a\u533a\u57df\u7684\u7aef\u70b9","title":"\u8ba1\u7b97\u6bcf\u4e2a\u533a\u57df\u7684\u7aef\u70b9","text":"<p>\u5bf9\u4e8e\u5728\u77e9\u5f62\u8349\u576a\u4e0a\u5706\u5f62\u7684\u8986\u76d6\u8303\u56f4\uff0c\u53ef\u4ee5\u5c06\u5176\u8f6c\u5316\u4e3a\u4e00\u7ef4\u76f4\u7ebf\uff08\u8349\u576a\u4e2d\u5fc3\u7ebf \\(center\\)\uff09\u4e0a\u7684\u533a\u95f4\u8986\u76d6\u95ee\u9898\u3002</p> <p>\u89c2\u5bdf\u5230\u5706\u5f62\u8303\u56f4\u5728\u77e9\u5f62\u8349\u576a\u4e2d\u8986\u76d6\u7684\u56fe\u5f62\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u5f53\u5706\u5f62\u534a\u5f84 \\(r &gt; \\frac{W}{2}\\) \u65f6\uff0c\u56fe\u5f62\u4e3a\u4e24\u8fb9\u6709\u5f27\u5ea6\u7684\u77e9\u5f62\uff1b\u5f53 \\(r \\le \\frac{W}{2}\\) \u65f6\uff0c\u56fe\u5f62\u4e3a\u5b8c\u6574\u7684\u5706\u5f62\uff08\u5982\u56fe\u7070\u8272\u90e8\u5206\uff09\u3002</p> <p></p> <p>\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u5b9e\u9645\u8d77\u5230\u4f5c\u7528\u7684\u662f\u4e0b\u56fe\u7070\u8272\u77e9\u5f62\u4ee3\u8868\u7684\u533a\u95f4\u3002\u5728\u8bfb\u5165\u65f6\u53ef\u4ee5\u9884\u5904\u7406\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u8fb9\u754c\uff0c\u5373\u84dd\u8272\u8fb9\u6846\u7684\u4f4d\u7f6e\u3002\u5177\u4f53\u5730\uff0c\u4f7f\u7528\u52fe\u80a1\u5b9a\u7406\u8ba1\u7b97\u5de6\u53f3\u8fb9\u754c\uff1a\u4ee4 \\(dis = \\sqrt {r^2 - (\\frac{w}{2})^2}\\)\uff0c\u5219\u5de6\u8fb9\u754c\u4e3a \\(p - dis\\)\uff0c\u53f3\u8fb9\u754c\u4e3a \\(p + dis\\)\uff0c\u5176\u4e2d \\(p\\) \u4e3a\u55b7\u6c34\u88c5\u7f6e\u7684\u4f4d\u7f6e\u3002</p> <p></p> <p>\u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u5b9e\u9645\u5e76\u6ca1\u6709\u8d77\u5230\u8986\u76d6\u9762\u79ef\u7684\u4f5c\u7528\uff08\u5982\u56fe\uff0c\u8fd9\u90e8\u5206\u56fe\u5f62\u6ca1\u6709\u8d77\u5230\u4efb\u4f55\u4f5c\u7528\uff09\u3002\u5728\u8bfb\u5165 \\(r \\le \\frac{W}{2}\\) \u65f6\u5e94\u5f53\u5ffd\u7565\u8be5\u55b7\u6c34\u88c5\u7f6e\u3002</p> <p></p> <pre><code>#define ld long double\ntypedef pair&lt;ld, ld&gt; pdd;\nvector&lt;pdd&gt; d;    // d \u6570\u7ec4\u4e2d\u5b58\u50a8\u5de6\u53f3\u8fb9\u754c\n\nint n = 0, tms, l, w;    // tms, l, w \u5206\u522b\u4e3a\u8bfb\u5165\u7684\u533a\u95f4\u4e2a\u6570\u3001\u8349\u576a\u957f\u5ea6\u3001\u8349\u576a\u5bbd\u5ea6\nscanf(\"%d%d%d\", &amp;tms, &amp;l, &amp;w);\nfor(int i = 1, p, r; i &lt;= tms; i ++) {\n    scanf(\"%d%d\", &amp;p, &amp;r);    // p, r \u5206\u522b\u4e3a\u8be5\u55b7\u6c34\u88c5\u7f6e\u7684\u4f4d\u7f6e\u3001\u55b7\u6c34\u534a\u5f84\n    if(2 * r &lt;= w) continue;    // \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u76f4\u63a5\u5ffd\u7565\n    ld dis = sqrt(r * r - w * w / (ld)4.0);    // \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u8ba1\u7b97 dis \u7684\u503c\u4ee5\u8ba1\u7b97\u5de6\u53f3\u8fb9\u754c\n    d.push_back({p - dis, p + dis});\n    n ++;    // n: d \u6570\u7ec4\u4e2d\u533a\u95f4\u7684\u4e2a\u6570\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/UVA10382/#\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f","title":"\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f","text":"<p>\u6309\u7167\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u5bf9 \\(d\\) \u6570\u7ec4\u6392\u5e8f\u3002</p> <pre><code>bool cmp(const pdd &amp; x, const pdd &amp; y) {    // \u5f53\u7136\uff0cpair \u7c7b\u578b\u7684\u6392\u5e8f\u9ed8\u8ba4\u987a\u5e8f\u5c31\u662f\u5148\u6309\u7167\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\n    return x.first &lt; y.first;    // first \u662f\u5de6\u7aef\u70b9\u7684\u503c\n}\n\nsort(d.begin(), d.end(), cmp);\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/UVA10382/#\u8d2a\u5fc3\u9009\u62e9\u533a\u95f4","title":"\u8d2a\u5fc3\u9009\u62e9\u533a\u95f4","text":"<p>\u5bf9\u4e8e\u67d0\u4e2a\u672a\u88ab\u8986\u76d6\u5230\u7684\u70b9 \\(p (0\\le p &lt; l)\\)\uff0c\u679a\u4e3e\u6240\u6709\u80fd\u8986\u76d6\u5230\u70b9 \\(p\\) \u7684\u533a\u95f4\uff0c\u9009\u62e9\u5176\u4e2d\u53f3\u7aef\u70b9\u6700\u5927\u7684\u55b7\u6c34\u88c5\u7f6e\uff0c\u5e76\u5c06 \\(p\\) \u66f4\u65b0\u4e3a\u53f3\u7aef\u70b9\u7684\u5750\u6807\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u672a\u88ab\u8986\u76d6\u7684\u70b9\uff0c\u7ee7\u7eed\u5faa\u73af\u3002 \u5176\u4e2d\uff0c\u679a\u4e3e\u6240\u6709\u80fd\u8986\u76d6\u70b9 \\(p\\) \u7684\u533a\u95f4\uff0c\u53ef\u4ee5\u4ece\u4e0a\u4e00\u6b21\u5faa\u73af\u679a\u4e3e\u5230\u7684\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u4e4b\u540e\u5f00\u59cb\u3002</p> <p>\u5bf9\u4e8e\u672a\u88ab\u8986\u76d6\u5230\u7684\u70b9 \\(p\\)\uff0c\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u533a\u95f4\u80fd\u591f\u8986\u76d6\u5b83\uff0c\u5219\u65e0\u6cd5\u704c\u6e89\uff0c\u8f93\u51fa \\(-1\\)\u3002 \u5982\u679c \\(p\\) \u8d85\u8fc7 \\(l\\)\uff0c\u8bf4\u660e\u5168\u90e8\u8986\u76d6\u5b8c\u6210\uff0c\u53ef\u4ee5\u8f93\u51fa\u7b54\u6848\u3002</p> <pre><code>bool flg = false;    // \u65e0\u6cd5\u704c\u6e89\u7684\u60c5\u51b5\nint ans = 0, x = 0;    // ans: \u9009\u62e9\u7684\u533a\u95f4\u6570\u91cf, x: \u679a\u4e3e\u7684\u533a\u95f4\nld p = 0;    // \u6240\u6709\u672a\u88ab\u8986\u76d6\u5230\u7684\u70b9\nwhile(p &lt; l) {\n    ld fp = -1;\n    while(x &lt; n &amp;&amp; d[x].first &lt;= p) {    // \u5728 n \u4e2a\u533a\u95f4\u4e2d\u679a\u4e3e x\uff0cd[x].first&lt;=p \u786e\u4fdd\u533a\u95f4\u80fd\u591f\u8986\u76d6\u5230\u70b9 p\n        if(p &lt;= d[x].second)\n            fp = max(fp, d[x].second);    // \u6c42\u6240\u6709\u7b26\u5408\u7684\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u7684\u6700\u5927\u503c\n        x ++;\n    }\n    if(fp == -1) {    // fp \u6ca1\u53d8\u8fc7\u8bf4\u660e\u6ca1\u6709\u533a\u95f4\u80fd\u591f\u8986\u76d6\u70b9 p\uff0c\u56e0\u6b64\u65e0\u6cd5\u704c\u6e89\n        flg = true;\n        break;\n    }\n    ans ++;    // \u9009\u62e9\u4e86\u4e00\u4e2a\u55b7\u6c34\u88c5\u7f6e\uff0c\u7b54\u6848 + 1\n    p = fp;    // \u67e5\u627e\u4e0b\u4e00\u4e2a\u672a\u88ab\u8986\u76d6\u7684\u70b9 p \u4e3a\u4e4b\u524d\u627e\u5230\u7684\u6700\u5927\u7684\u53f3\u7aef\u70b9\u7684\u503c\n}\nflg ? printf(\"-1\\n\") : printf(\"%d\\n\", ans);\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/UVA10382/#\u5b8c\u6574\u4ee3\u7801","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Warning</p> <p>\u63d0\u4ea4\u5230 UVA \u4e0a\u65f6\uff0c\u6d89\u53ca\u5230\u4f4d\u7f6e\u7684\u53d8\u91cf\u5efa\u8bae\u90fd\u5b9a\u4e49\u4e3a\u6d6e\u70b9\u578b\uff1b</p> <p>Libre OJ \u4e0a\u9700\u8981\u591a\u8bfb\u5165\u4e00\u884c\u591a\u6d4b\u6570\u636e\u7ec4\u6570 \\(T\\)\uff0c\u800c UVA \u4e0d\u9700\u8981\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define ld long double\nusing namespace std;\ntypedef pair&lt;ld, ld&gt; pdd;\nvector&lt;pdd&gt; d;\n\nbool cmp(const pdd &amp; x, const pdd &amp; y) {\n    return x.first &lt; y.first;\n}\n\nint main() {\n    int n, tms;\n    ld l, w;\n    while(scanf(\"%d%llf%llf\", &amp;tms, &amp;l, &amp;w) == 3) {\n        d.clear();\n        n = 0;\n        for(int i = 1; i &lt;= tms; i ++) {\n            ld p, r;\n            scanf(\"%llf%llf\", &amp;p, &amp;r);\n            if(2 * r &lt;= w) continue;\n            ld ll = sqrt(r * r - w * w / (ld)4.0);\n            d.push_back({p - ll, p + ll});\n            n ++;\n        }\n        sort(d.begin(), d.end(), cmp);\n        bool flg = false;\n        int ans = 0, x = 0;\n        ld p = 0;\n        while(p &lt; l) {\n            ld fp = -1;\n            while(x &lt; n &amp;&amp; d[x].first &lt;= p) {\n                if(p &lt;= d[x].second)\n                    fp = max(fp, d[x].second + 0.001);\n                x ++;\n            }\n            if(fp == -1) {\n                flg = true;\n                break;\n            }\n            ans ++;\n            p = fp;\n        }\n        flg ? printf(\"-1\\n\") : printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32\u95ee\u9898","text":""},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/#\u89e3\u6cd5","title":"\u89e3\u6cd5","text":"<p>\u6b63\u89e3\u4e3a Manacher \u7b97\u6cd5\u3002\u4ee5\u4e0b\u540c\u65f6\u63d0\u4f9b\u4e00\u4e9b\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\u7684\uff0c\u4f46\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u7b80\u5355\u65b9\u6cd5\uff0c\u4ee5\u53ca\u540c\u6837\u4e3a \\(O(n)\\) \u65f6\u95f4\u590d\u6742\u5ea6\u7684 \u56de\u6587\u81ea\u52a8\u673a \u6c42\u89e3\u6b64\u95ee\u9898\u3002</p> <p>\u89e3\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a (1)</p> <ol> <li>\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8be5\u89e3\u6cd5\u7684\u7b97\u6cd5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u662f\u4e25\u8c28\u7684\u6574\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ol> <ul> <li>\u6cd51\uff1a\u679a\u4e3e\u6240\u6709\u5b50\u4e32 \\(O(n^3)\\)</li> <li>\u6cd52\uff1a\u679a\u4e3e\u4e2d\u5fc3\u70b9 \\(O(n^2)\\)</li> <li>\u6cd53\uff1a\u679a\u4e3e\u4e2d\u5fc3\u70b9 + \u4e8c\u5206 \\(O(n\\log n)\\)</li> <li>\u6cd54\uff1a\u4e8c\u7ef4\u52a8\u6001\u89c4\u5212 \\(O(n^2)\\)</li> <li>\u6cd55\uff1a\u4e00\u7ef4\u52a8\u6001\u89c4\u5212 \\(O(n^2)\\)</li> <li>\u6cd56\uff1aManacher \u7b97\u6cd5 \\(O(n)\\)</li> <li>\u6cd57\uff1a\u56de\u6587\u81ea\u52a8\u673a \\(O(n)\\)</li> </ul>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/#\u6cd51\u679a\u4e3e\u6240\u6709\u5b50\u4e32","title":"\u6cd51\uff1a\u679a\u4e3e\u6240\u6709\u5b50\u4e32","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    string s;\n    getline(cin, s);\n    int len = s.length();\n    int ans = 1;\n    for(int i = 0; i &lt; len - 1; i ++)\n        for(int j = i + 1; j &lt; len; j ++) {\n            bool can = true;\n            int a = i - 1, b = j + 1;\n            while((++ a) &lt; (-- b))\n                if(s[a] != s[b]) {\n                    can = false;\n                    break;\n                }\n            if(can) ans = max(ans, j - i + 1);\n        }\n    printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/#\u6cd52\u679a\u4e3e\u4e2d\u5fc3\u70b9","title":"\u6cd52\uff1a\u679a\u4e3e\u4e2d\u5fc3\u70b9","text":"<p>\u7565\uff0c\u89c1\u6cd53\u3002</p>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/#\u6cd53\u679a\u4e3e\u4e2d\u5fc3\u70b9--\u4e8c\u5206","title":"\u6cd53\uff1a\u679a\u4e3e\u4e2d\u5fc3\u70b9 + \u4e8c\u5206","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1.1e7 + 9;\nconst int BASE = 13131, MOD = 1e9 + 9;\nint h1[2 * MAXn], h2[2 * MAXn], p[2 * MAXn];\n\nint fsha1(int l, int r) {\n    l ++; r ++;\n    return (h1[r] - 1ll * h1[l - 1] * p[r - l + 1] % MOD + MOD) % MOD;\n}\nint fsha2(int l, int r) {\n    l ++; r ++;\n    return (h2[r] - 1ll * h2[l - 1] * p[r - l + 1] % MOD + MOD) % MOD;\n}\n\nint main() {\n    string s1 = \"#\";\n    char c;\n    while(scanf(\"%c\", &amp;c) != EOF) {\n        s1.push_back(c);\n        s1.push_back('#');\n    }\n    string s2(s1.rbegin(), s1.rend());\n    int len = s1.length();\n    h1[0] = h2[0] = p[0] = 1;\n    for(int i = 1; i &lt;= len; i ++) {\n        p[i] = (1ll * p[i - 1] * BASE) % MOD;\n        h1[i] = (1ll * h1[i - 1] * BASE + s1[i - 1]) % MOD;\n        h2[i] = (1ll * h2[i - 1] * BASE + s2[i - 1]) % MOD;\n    }\n    int ans = 0;\n    for(int i = 1, j = len - 2; i &lt;= len - 2; i ++, j --) {\n        // i: \u6b63\u5411\u4e2d\u5fc3\u70b9; j: \u9006\u5411\u4e2d\u5fc3\u70b9\n        int a = 0, b = min({len / 2, i, j});\n        while(a &lt; b) {\n            int m = (a + b + 1) &gt;&gt; 1;\n            if(fsha1(i - m, i - 1) == fsha2(j - m, j - 1)) a = m;\n            else b = m - 1;\n        }\n        if(ans &lt; a) ans = a;\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/#\u6cd54\u4e8c\u7ef4\u52a8\u6001\u89c4\u5212","title":"\u6cd54\uff1a\u4e8c\u7ef4\u52a8\u6001\u89c4\u5212","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1000 + 9;\nbool dp[MAXn][MAXn];\n\nint main() {\n    string s;\n    getline(cin, s);\n    int len = s.length();\n    for(int i = 0; i &lt; len; i ++)\n        dp[i][i] = true;\n    int ans = 1;\n    for(int j = 1; j &lt; len; j ++)\n        for(int i = 0; i &lt; j; i ++) {\n            dp[i][j] = (s[i] == s[j] &amp;&amp; (dp[i + 1][j - 1] || j - i + 1 &lt;= 3));\n            if(dp[i][j] &amp;&amp; ans &lt; (j - i + 1))\n                ans = j - i + 1;\n        }\n    printf(\"%d\", ans);\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/#\u6cd55\u4e00\u7ef4\u52a8\u6001\u89c4\u5212","title":"\u6cd55\uff1a\u4e00\u7ef4\u52a8\u6001\u89c4\u5212","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXn = 1000 + 9;\nint dp[MAXn];\n\nint main() {\n    string s;\n    getline(cin, s);\n    int len = s.length();\n    s = \"#\" + s;\n    int ans = 1;\n    dp[1] = 1;\n    for(int j = 2; j &lt;= len; j ++) {\n        if(s[j] == s[j - dp[j - 1] - 1]) dp[j] = dp[j - 1] + 2;\n        else for(int i = j - dp[j - 1]; i &lt;= j; i ++) {\n            int l = i, r = j;\n            bool can = true;\n            while(l &lt;= r &amp;&amp; can) {\n                can = s[l] == s[r];\n                l ++;\n                r --;\n            }\n            if(can) {\n                dp[j] = j - i + 1;\n                break;\n            }\n        }\n        ans = max(ans, dp[j]);\n    }\n    printf(\"%d\", ans);\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/#\u6cd56manacher-\u7b97\u6cd5","title":"\u6cd56\uff1aManacher \u7b97\u6cd5","text":"\u3010\u6a21\u677f\u3011Manacher \u7b97\u6cd5<pre><code>#include&lt;bits/stdc++.h&gt;\n#define int long long int\nusing namespace std;\nconst int MAXn = 1.1e7 + 9;\nstring os, s;\nint d[(MAXn &lt;&lt; 1) + 9];\n\nsigned main() {\n    getline(cin, os);\n    s = \"@\";\n    for(char c : os)\n        s.push_back('#'),\n        s.push_back(c);\n    s.push_back('#');\n    int len = s.length() - 1, ans = 1;\n    for(int t = 1, r = 0, m = 0; t &lt;= len; t ++) {\n        if(t &lt;= r) d[t] = min(d[(m &lt;&lt; 1) - t], r - t + 1);\n        while(s[t - d[t]] == s[t + d[t]]) d[t] ++;\n        if(d[t] + t &gt; r) r = d[t] + t - 1, m = t;\n        ans = max(ans, d[t] - 1);\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E7%9B%AE%E5%88%86%E4%BA%AB/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/#\u6cd57\u56de\u6587\u81ea\u52a8\u673a","title":"\u6cd57\uff1a\u56de\u6587\u81ea\u52a8\u673a","text":"<p>\u6ce8\uff1a\u6b64\u90e8\u5206\u4ee3\u7801\u501f\u9274\u81ea OI wiki\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define lli long long int\nusing namespace std;\nconst int MAXn = 4e3 + 9;\nint sz, tot, last;\nint cnt[MAXn], ch[MAXn][128], len[MAXn], fail[MAXn];\nchar s[MAXn], d[MAXn];\n\n// \u5efa\u7acb\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u957f\u5ea6\u4e3a l\nint node(int l) {\n    sz ++;\n    memset(ch[sz], 0, sizeof(ch[sz]));\n    len[sz] = l;\n    fail[sz] = cnt[sz] = 0;\n    return sz;\n}\n\n// \u521d\u59cb\u5316\nvoid clear() {\n    sz = -1;\n    last = 0;\n    s[tot = 0] = '$';\n    node(0);\n    node(-1);\n    fail[0] = 1;\n}\n\n// \u627e\u540e\u7f00\u56de\u6587\nint getfail(int x) {\n    while (s[tot - len[x] - 1] != s[tot]) x = fail[x];\n    return x;\n}\n\n// \u5efa\u6811\nvoid insert(char c) {\n    s[++tot] = c;\n    int now = getfail(last);\n    if(!ch[now][c - 'a']) {\n        int x = node(len[now] + 2);\n        fail[x] = ch[getfail(fail[now])][c - 'a'];\n        ch[now][c - 'a'] = x;\n    }\n    last = ch[now][c - 'a'];\n    cnt[last] ++;\n}\n\nlli solve() {\n    lli ans = 0;\n    for(int i = sz; i &gt;= 0; i--)\n        cnt[fail[i]] += cnt[i];\n    for(int i = 1; i &lt;= sz; i++)\n        ans = max(ans, 1ll * len[i]);\n    return ans;\n}\n\nint main() {\n    clear();\n    scanf(\"%s\", d + 1);\n    for(int i = 1; d[i]; i++) {\n        insert(d[i]);\n    }\n    printf(\"%lld\", solve());\n    return 0;\n}\n</code></pre>"}]}